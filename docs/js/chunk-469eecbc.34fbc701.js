(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-469eecbc"],{"13d5":function(t,e,n){"use strict";var a=n("23e7"),i=n("d58f").left,c=n("a640"),s=n("ae40"),r=c("reduce"),o=s("reduce",{1:0});a({target:"Array",proto:!0,forced:!r||!o},{reduce:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},"31a0":function(t,e,n){},"4edd":function(t,e,n){"use strict";n.r(e);var a=n("7a23"),i=Object(a["F"])("data-v-51497042");Object(a["t"])("data-v-51497042");var c=Object(a["h"])("h1",null,"新型コロナウイルス情報",-1),s={key:0,class:"flex"},r={class:"box"},o={class:"box"},u={class:"box"},l={class:"box"},d={class:"box"},h={class:"box27"},b=Object(a["h"])("span",{class:"box-title"},"病床使用数",-1),f={class:"text"},k=Object(a["h"])("br",null,null,-1),p={class:"ueo"},g={key:1,class:"loader"};Object(a["r"])();var j=i((function(t,e,n,i,j,v){var O=Object(a["x"])("mainmenu"),m=Object(a["x"])("labelbox");return Object(a["q"])(),Object(a["d"])("div",null,[Object(a["h"])(O,{judge:"0"}),c,v.readyToshowMainPage?(Object(a["q"])(),Object(a["d"])("div",s,[Object(a["h"])("div",r,[Object(a["h"])(m,{class:"box1",msg:"感染者数",idname:"kansen",infected:v.infected},null,8,["infected"])]),Object(a["h"])("div",o,[Object(a["h"])(m,{class:"box2",msg:"死者数",idname:"dead",infected:v.dead},null,8,["infected"])]),Object(a["h"])("div",u,[Object(a["h"])(m,{class:"box3",msg:"PCR検査数",idname:"pcr",infected:v.pcr},null,8,["infected"])]),Object(a["h"])("div",l,[Object(a["h"])(m,{class:"box4",msg:"退院者数",idname:"dischange",infected:v.discharge},null,8,["infected"])]),Object(a["h"])("div",d,[Object(a["h"])("div",h,[b,Object(a["h"])("input",{type:"radio",id:v.zenkokuId,name:"TAB",class:"tab-switch",checked:"checked"},null,8,["id"]),Object(a["h"])("label",{for:v.zenkokuId,class:"tab-label"},"岡山",8,["for"]),Object(a["h"])("div",f,[Object(a["g"])(Object(a["z"])(v.use)+"/"+Object(a["z"])(v.all),1),k,Object(a["h"])("p",p,Object(a["z"])(v.update),1)])])])])):(Object(a["q"])(),Object(a["d"])("div",g)),Object(a["h"])("button",{type:"button",onClick:e[1]||(e[1]=function(){return v.cash.apply(v,arguments)})},"更新")])})),v=n("c287");n("79f3");v["a"].render=j,v["a"].__scopeId="data-v-51497042";e["default"]=v["a"]},5899:function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},"58a8":function(t,e,n){var a=n("1d80"),i=n("5899"),c="["+i+"]",s=RegExp("^"+c+c+"*"),r=RegExp(c+c+"*$"),o=function(t){return function(e){var n=String(a(e));return 1&t&&(n=n.replace(s,"")),2&t&&(n=n.replace(r,"")),n}};t.exports={start:o(1),end:o(2),trim:o(3)}},7156:function(t,e,n){var a=n("861d"),i=n("d2bb");t.exports=function(t,e,n){var c,s;return i&&"function"==typeof(c=e.constructor)&&c!==n&&a(s=c.prototype)&&s!==n.prototype&&i(t,s),t}},"79f3":function(t,e,n){"use strict";n("31a0")},a351:function(t,e,n){"use strict";var a=n("7a23"),i={class:"box27"},c={class:"box-title"},s={class:"text"},r=Object(a["h"])("br",null,null,-1),o={class:"ueo"},u={class:"text"},l=Object(a["h"])("br",null,null,-1),d={class:"ueo"},h={class:"text"},b=Object(a["h"])("br",null,null,-1),f={class:"ueo"};function k(t,e,n,k,p,g){return Object(a["q"])(),Object(a["d"])("form",null,[Object(a["h"])("div",i,[Object(a["h"])("span",c,Object(a["z"])(n.msg),1),Object(a["h"])("input",{type:"radio",id:g.zenkokuId,name:"TAB",class:"tab-switch",checked:"checked"},null,8,["id"]),Object(a["h"])("label",{for:g.zenkokuId,class:"tab-label"},"全国",8,["for"]),Object(a["h"])("div",s,[Object(a["g"])(Object(a["z"])(n.infected.zenkoku),1),r,Object(a["h"])("p",o,Object(a["z"])(n.infected.data1),1)]),Object(a["h"])("input",{type:"radio",id:g.okayamaId,name:"TAB",class:"tab-switch"},null,8,["id"]),Object(a["h"])("label",{for:g.okayamaId,class:"tab-label"},"岡山",8,["for"]),Object(a["h"])("div",u,[Object(a["g"])(Object(a["z"])(n.infected.okayama),1),l,Object(a["h"])("p",d,Object(a["z"])(n.infected.data2),1)]),"感染者数"==n.msg?(Object(a["q"])(),Object(a["d"])("input",{key:0,type:"button",class:"aiu",value:"詳細",onClick:e[1]||(e[1]=function(e){return t.$router.push("/Detailspage")})})):Object(a["e"])("",!0),Object(a["h"])("input",{type:"radio",id:g.tsuyamaId,name:"TAB",class:"tab-switch"},null,8,["id"]),Object(a["h"])("label",{for:g.tsuyamaId,class:"tab-label"},"津山",8,["for"]),Object(a["h"])("div",h,[Object(a["g"])(Object(a["z"])(n.infected.tsuyama),1),b,Object(a["h"])("p",f,Object(a["z"])(n.infected.data3),1)])])])}var p={name:"labelbox",computed:{zenkokuId:function(){return this.idname+"zenkoku"},okayamaId:function(){return this.idname+"okayama"},tsuyamaId:function(){return this.idname+"tsuyama"}},props:{msg:{type:String},idname:{type:String},infected:{type:Object}}};n("ebca");p.render=k;e["a"]=p},a9e3:function(t,e,n){"use strict";var a=n("83ab"),i=n("da84"),c=n("94ca"),s=n("6eeb"),r=n("5135"),o=n("c6b6"),u=n("7156"),l=n("c04e"),d=n("d039"),h=n("7c73"),b=n("241c").f,f=n("06cf").f,k=n("9bf2").f,p=n("58a8").trim,g="Number",j=i[g],v=j.prototype,O=o(h(v))==g,m=function(t){var e,n,a,i,c,s,r,o,u=l(t,!1);if("string"==typeof u&&u.length>2)if(u=p(u),e=u.charCodeAt(0),43===e||45===e){if(n=u.charCodeAt(2),88===n||120===n)return NaN}else if(48===e){switch(u.charCodeAt(1)){case 66:case 98:a=2,i=49;break;case 79:case 111:a=8,i=55;break;default:return+u}for(c=u.slice(2),s=c.length,r=0;r<s;r++)if(o=c.charCodeAt(r),o<48||o>i)return NaN;return parseInt(c,a)}return+u};if(c(g,!j(" 0o1")||!j("0b1")||j("+0x1"))){for(var y,I=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof I&&(O?d((function(){v.valueOf.call(n)})):o(n)!=g)?u(new j(m(e)),n,I):m(e)},w=a?b(j):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),N=0;w.length>N;N++)r(j,y=w[N])&&!r(I,y)&&k(I,y,f(j,y));I.prototype=v,v.constructor=I,s(i,g,I)}},b04d:function(t,e,n){},c287:function(t,e,n){"use strict";(function(t){n("4de4"),n("13d5"),n("a9e3"),n("dca8"),n("ac1f"),n("5319"),n("1276");var a=n("a351"),i=n("ad3a"),c=n("bc3a"),s=n.n(c),r=n("4bb4"),o=n("10bf"),u=n.n(o);e["a"]={name:"Mainpage",components:{labelbox:a["a"],mainmenu:i["a"]},computed:{readyToshowMainPage:function(){return this.kenDetails.length>0&&this.kenUtiwake.length>0&&this.kenPcr.length>0&&this.kenDead.length>0&&this.kenIryou.length>0&&this.Zenkoku.length>0},zenkokuId:function(){return"zenkoku"},use:function(){return Number(this.kenDead[this.kenDead.length-1]["患者_入院中_入院予定含む"])+Number(this.kenDead[this.kenDead.length-1]["患者_宿泊療養施設に入所中"])},all:function(){return Number(this.kenIryou[this.kenIryou.length-1]["確保数_病床"])+Number(this.kenIryou[this.kenIryou.length-1]["確保数_宿泊療養施設"])},update:function(){for(var t=this.kenDead[this.kenDead.length-1]["公表_年月日"].split("/"),e=1;e<3;e++)1==t[e].length&&(t[e]="0"+t[e]);var n="※"+t[0]+"年"+t[1]+"月"+t[2]+"日時点";return n},infected:function(){var t=this.Zenkoku.reduce((function(t,e){return t+e["npatients"]}),0);console.log("this.kenUtiwake"),console.log(this.kenUtiwake);var e=this.kenUtiwake[this.kenUtiwake.length-1]["公表年月日"].replace("年","/");e=e.replace("月","/"),e=e.replace("日","/"),e=e.split("/");for(var n=1;n<3;n++)1==e[n].length&&(e[n]="0"+e[n]);var a="※"+e[0]+"年"+e[1]+"月"+e[2]+"日時点",i=this.last.split("-");return i="※"+i[0]+"年"+i[1]+"月"+i[2]+"日時点",{zenkoku:t+"人",okayama:this.kenUtiwake.length+"人",tsuyama:this.kenUtiwake.filter((function(t){if("津山市"==t.患者＿居住地)return!0})).length+"人",data1:i,data2:a,data3:a}},pcr:function(){var t=this.Zenkoku.reduce((function(t,e){return t+e["ninspections"]}),0),e=this.kenPcr.filter((function(t){if(""!=t.集計時点_年月日)return!0})),n=e[e.length-1].集計時点_年月日.split("/");1==n[2].length&&(n[2]="0"+n[2]);var a="※"+n[0]+"年"+n[1]+"月"+n[2]+"日時点",i=this.last.split("-");return i="※"+i[0]+"年"+i[1]+"月"+i[2]+"日時点",{zenkoku:t+"人",okayama:this.kenPcr.reduce((function(t,e){return t+Number(e["検査実施人数"])}),0)+"人",tsuyama:"No data",data1:i,data2:a,data3:""}},dead:function(){for(var t=this.Zenkoku.reduce((function(t,e){return t+e["ndeaths"]}),0),e=this.kenDead[this.kenDead.length-1]["公表_年月日"].split("/"),n=1;n<3;n++)1==e[n].length&&(e[n]="0"+e[n]);var a="※"+e[0]+"年"+e[1]+"月"+e[2]+"日時点",i=this.last.split("-");return i="※"+i[0]+"年"+i[1]+"月"+i[2]+"日時点",{zenkoku:t+"人",okayama:this.kenDead[this.kenDead.length-1]["患者_死亡"]+"人",tsuyama:"No data",data1:i,data2:a,data3:""}},discharge:function(){for(var t=this.Zenkoku.reduce((function(t,e){return t+e["nexits"]}),0),e=this.kenDead[this.kenDead.length-1]["公表_年月日"].split("/"),n=1;n<3;n++)1==e[n].length&&(e[n]="0"+e[n]);var a="※"+e[0]+"年"+e[1]+"月"+e[2]+"日時点",i=this.last.split("-");return i="※"+i[0]+"年"+i[1]+"月"+i[2]+"日時点",{zenkoku:t+"人",okayama:this.kenDead[this.kenDead.length-1]["患者_退院等"]+"人",tsuyama:"No data",data1:i,data2:a,data3:""}}},data:function(){return{kenDetails:[],kenUtiwake:[],kenPcr:[],kenDead:[],kenIryou:[],Zenkoku:[],last:[]}},mounted:function(){this.get_csv("https://taurayouhei.github.io/covid-19/data/kansenshasuu0420.csv",!0,"SJIS","UNICODE",this.setKenDetails),this.get_csv("https://taurayouhei.github.io/covid-19/data/pcr.csv",!0,"SJIS","UNICODE",this.setKenPcr),this.get_csv("https://taurayouhei.github.io/covid-19/data/kansenshashousaijouhou.csv",!0,"SJIS","UNICODE",this.setKenUchiwake),this.get_csv("https://taurayouhei.github.io/covid-19/data/kanjahasseijoukyou.csv",!0,"SJIS","UNICODE",this.setKenDead),this.get_csv("https://taurayouhei.github.io/covid-19/data/330001okayamacovid19medicalsystem.csv",!0,"SJIS","UNICODE",this.setKenIryou),this.get_csv("https://www.stopcovid19.jp/data/covid19japan.csv",!0,"UTF8","UNICODE",this.setZenkoku),this.lastupdata()},methods:{cash:function(){window.location.reload(!0)},lastupdata:function(){var t=this;s.a.get("https://www.stopcovid19.jp/data/covid19japan.json").then((function(e){t.last=e.data["lastUpdate"]})).catch((function(t){return console.log(t)}))},setKenUchiwake:function(t){this.kenUtiwake=t,this.$store.commit("Enter2",this.kenUtiwake)},setKenPcr:function(t){this.kenPcr=t},setKenDead:function(t){this.kenDead=t},setKenIryou:function(t){this.kenIryou=t},setZenkoku:function(t){this.Zenkoku=t},setKenDetails:function(t){this.kenDetails=t,this.$store.commit("Enter",this.kenDetails)},get_csv:function(e,n,a,i,c){s.a.get(e,{responseType:"arraybuffer"}).then((function(e){var s=t.from(e.data),o=u.a.convert(s,{from:a,to:i,type:"string"});console.log(o),o=o.replace(/^\ufeff/,""),Object(r["parse"])(o,{columns:n,quote:'"',ltrim:!0,rtrim:!0,delimiter:",",cast:!0},(function(t,e){c(Object.freeze(e))}))})).catch((function(t){return console.log(t)}))}}}}).call(this,n("b639").Buffer)},d58f:function(t,e,n){var a=n("1c0b"),i=n("7b0b"),c=n("44ad"),s=n("50c4"),r=function(t){return function(e,n,r,o){a(n);var u=i(e),l=c(u),d=s(u.length),h=t?d-1:0,b=t?-1:1;if(r<2)while(1){if(h in l){o=l[h],h+=b;break}if(h+=b,t?h<0:d<=h)throw TypeError("Reduce of empty array with no initial value")}for(;t?h>=0:d>h;h+=b)h in l&&(o=n(o,l[h],h,u));return o}};t.exports={left:r(!1),right:r(!0)}},ebca:function(t,e,n){"use strict";n("b04d")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,