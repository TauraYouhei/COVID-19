(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-1c607788"],{"057f":function(t,e,n){var r=n("fc6a"),a=n("241c").f,i={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return a(t)}catch(e){return o.slice()}};t.exports.f=function(t){return o&&"[object Window]"==i.call(t)?c(t):a(r(t))}},"13d5":function(t,e,n){"use strict";var r=n("23e7"),a=n("d58f").left,i=n("a640"),o=n("ae40"),c=i("reduce"),s=o("reduce",{1:0});r({target:"Array",proto:!0,forced:!c||!s},{reduce:function(t){return a(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},"25f0":function(t,e,n){"use strict";var r=n("6eeb"),a=n("825a"),i=n("d039"),o=n("ad6d"),c="toString",s=RegExp.prototype,u=s[c],f=i((function(){return"/a/b"!=u.call({source:"a",flags:"b"})})),l=u.name!=c;(f||l)&&r(RegExp.prototype,c,(function(){var t=a(this),e=String(t.source),n=t.flags,r=String(void 0===n&&t instanceof RegExp&&!("flags"in s)?o.call(t):n);return"/"+e+"/"+r}),{unsafe:!0})},2955:function(t,e,n){"use strict";n("3734")},3734:function(t,e,n){},"3ca3":function(t,e,n){"use strict";var r=n("6547").charAt,a=n("69f3"),i=n("7dd0"),o="String Iterator",c=a.set,s=a.getterFor(o);i(String,"String",(function(t){c(this,{type:o,string:String(t),index:0})}),(function(){var t,e=s(this),n=e.string,a=e.index;return a>=n.length?{value:void 0,done:!0}:(t=r(n,a),e.index+=t.length,{value:t,done:!1})}))},"4df4":function(t,e,n){"use strict";var r=n("0366"),a=n("7b0b"),i=n("9bdd"),o=n("e95a"),c=n("50c4"),s=n("8418"),u=n("35a1");t.exports=function(t){var e,n,f,l,d,h,b=a(t),p="function"==typeof this?this:Array,g=arguments.length,v=g>1?arguments[1]:void 0,y=void 0!==v,k=u(b),m=0;if(y&&(v=r(v,g>2?arguments[2]:void 0,2)),void 0==k||p==Array&&o(k))for(e=c(b.length),n=new p(e);e>m;m++)h=y?v(b[m],m):b[m],s(n,m,h);else for(l=k.call(b),d=l.next,n=new p;!(f=d.call(l)).done;m++)h=y?i(l,v,[f.value,m],!0):f.value,s(n,m,h);return n.length=m,n}},"4edd":function(t,e,n){"use strict";n.r(e);var r=n("7a23"),a=Object(r["F"])("data-v-31b73a7b");Object(r["t"])("data-v-31b73a7b");var i=Object(r["h"])("h1",null,"新型コロナウイルス情報",-1),o={key:0,class:"flex"},c={class:"box"},s={class:"box"},u={class:"box"},f={class:"box"},l={class:"box"},d={class:"box27"},h=Object(r["h"])("span",{class:"box-title"},"病床使用数",-1),b={class:"text"},p=Object(r["h"])("br",null,null,-1),g={class:"ueo"},v={key:1,class:"loader"};Object(r["r"])();var y=a((function(t,e,n,a,y,k){var m=Object(r["x"])("mainmenu"),O=Object(r["x"])("labelbox");return Object(r["q"])(),Object(r["d"])("div",null,[Object(r["h"])(m,{judge:"0"}),i,k.readyToshowMainPage?(Object(r["q"])(),Object(r["d"])("div",o,[Object(r["h"])("div",c,[Object(r["h"])(O,{class:"box1",msg:"感染者数",idname:"kansen",infected:k.infected},null,8,["infected"])]),Object(r["h"])("div",s,[Object(r["h"])(O,{class:"box2",msg:"死者数",idname:"dead",infected:k.dead},null,8,["infected"])]),Object(r["h"])("div",u,[Object(r["h"])(O,{class:"box3",msg:"PCR検査数",idname:"pcr",infected:k.pcr},null,8,["infected"])]),Object(r["h"])("div",f,[Object(r["h"])(O,{class:"box4",msg:"退院者数",idname:"dischange",infected:k.discharge},null,8,["infected"])]),Object(r["h"])("div",l,[Object(r["h"])("div",d,[h,Object(r["h"])("input",{type:"radio",id:k.zenkokuId,name:"TAB",class:"tab-switch",checked:"checked"},null,8,["id"]),Object(r["h"])("label",{for:k.zenkokuId,class:"tab-label"},"岡山",8,["for"]),Object(r["h"])("div",b,[Object(r["g"])(Object(r["z"])(k.use)+"/"+Object(r["z"])(k.all),1),p,Object(r["h"])("p",g,Object(r["z"])(k.update),1)])])])])):(Object(r["q"])(),Object(r["d"])("div",v)),Object(r["h"])("button",{type:"button",onClick:e[1]||(e[1]=function(){return k.cash.apply(k,arguments)})},"更新")])})),k=n("c287");n("2955");k["a"].render=y,k["a"].__scopeId="data-v-31b73a7b";e["default"]=k["a"]},5899:function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},"58a8":function(t,e,n){var r=n("1d80"),a=n("5899"),i="["+a+"]",o=RegExp("^"+i+i+"*"),c=RegExp(i+i+"*$"),s=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(o,"")),2&t&&(n=n.replace(c,"")),n}};t.exports={start:s(1),end:s(2),trim:s(3)}},7156:function(t,e,n){var r=n("861d"),a=n("d2bb");t.exports=function(t,e,n){var i,o;return a&&"function"==typeof(i=e.constructor)&&i!==n&&r(o=i.prototype)&&o!==n.prototype&&a(t,o),t}},"746f":function(t,e,n){var r=n("428f"),a=n("5135"),i=n("e538"),o=n("9bf2").f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});a(e,t)||o(e,t,{value:i.f(t)})}},a351:function(t,e,n){"use strict";var r=n("7a23"),a={class:"box27"},i={class:"box-title"},o={class:"text"},c=Object(r["h"])("br",null,null,-1),s={class:"ueo"},u={class:"text"},f=Object(r["h"])("br",null,null,-1),l={class:"ueo"},d={class:"text"},h=Object(r["h"])("br",null,null,-1),b={class:"ueo"};function p(t,e,n,p,g,v){return Object(r["q"])(),Object(r["d"])("form",null,[Object(r["h"])("div",a,[Object(r["h"])("span",i,Object(r["z"])(n.msg),1),Object(r["h"])("input",{type:"radio",id:v.zenkokuId,name:"TAB",class:"tab-switch",checked:"checked"},null,8,["id"]),Object(r["h"])("label",{for:v.zenkokuId,class:"tab-label"},"全国",8,["for"]),Object(r["h"])("div",o,[Object(r["g"])(Object(r["z"])(n.infected.zenkoku),1),c,Object(r["h"])("p",s,Object(r["z"])(n.infected.data1),1)]),Object(r["h"])("input",{type:"radio",id:v.okayamaId,name:"TAB",class:"tab-switch"},null,8,["id"]),Object(r["h"])("label",{for:v.okayamaId,class:"tab-label"},"岡山",8,["for"]),Object(r["h"])("div",u,[Object(r["g"])(Object(r["z"])(n.infected.okayama),1),f,Object(r["h"])("p",l,Object(r["z"])(n.infected.data2),1)]),"感染者数"==n.msg?(Object(r["q"])(),Object(r["d"])("input",{key:0,type:"button",class:"aiu",value:"詳細",onClick:e[1]||(e[1]=function(e){return t.$router.push("/Detailspage")})})):Object(r["e"])("",!0),Object(r["h"])("input",{type:"radio",id:v.tsuyamaId,name:"TAB",class:"tab-switch"},null,8,["id"]),Object(r["h"])("label",{for:v.tsuyamaId,class:"tab-label"},"津山",8,["for"]),Object(r["h"])("div",d,[Object(r["g"])(Object(r["z"])(n.infected.tsuyama),1),h,Object(r["h"])("p",b,Object(r["z"])(n.infected.data3),1)])])])}var g={name:"labelbox",computed:{zenkokuId:function(){return this.idname+"zenkoku"},okayamaId:function(){return this.idname+"okayama"},tsuyamaId:function(){return this.idname+"tsuyama"}},props:{msg:{type:String},idname:{type:String},infected:{type:Object}}};n("ebca");g.render=p;e["a"]=g},a4d3:function(t,e,n){"use strict";var r=n("23e7"),a=n("da84"),i=n("d066"),o=n("c430"),c=n("83ab"),s=n("4930"),u=n("fdbf"),f=n("d039"),l=n("5135"),d=n("e8b5"),h=n("861d"),b=n("825a"),p=n("7b0b"),g=n("fc6a"),v=n("c04e"),y=n("5c6c"),k=n("7c73"),m=n("df75"),O=n("241c"),j=n("057f"),S=n("7418"),w=n("06cf"),I=n("9bf2"),x=n("d1e7"),N=n("9112"),D=n("6eeb"),A=n("5692"),E=n("f772"),T=n("d012"),L=n("90e3"),_=n("b622"),P=n("e538"),z=n("746f"),C=n("d44e"),U=n("69f3"),M=n("b727").forEach,R=E("hidden"),F="Symbol",V="prototype",K=_("toPrimitive"),G=U.set,J=U.getterFor(F),Z=Object[V],q=a.Symbol,$=i("JSON","stringify"),B=w.f,H=I.f,W=j.f,X=x.f,Y=A("symbols"),Q=A("op-symbols"),tt=A("string-to-symbol-registry"),et=A("symbol-to-string-registry"),nt=A("wks"),rt=a.QObject,at=!rt||!rt[V]||!rt[V].findChild,it=c&&f((function(){return 7!=k(H({},"a",{get:function(){return H(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=B(Z,e);r&&delete Z[e],H(t,e,n),r&&t!==Z&&H(Z,e,r)}:H,ot=function(t,e){var n=Y[t]=k(q[V]);return G(n,{type:F,tag:t,description:e}),c||(n.description=e),n},ct=u?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof q},st=function(t,e,n){t===Z&&st(Q,e,n),b(t);var r=v(e,!0);return b(n),l(Y,r)?(n.enumerable?(l(t,R)&&t[R][r]&&(t[R][r]=!1),n=k(n,{enumerable:y(0,!1)})):(l(t,R)||H(t,R,y(1,{})),t[R][r]=!0),it(t,r,n)):H(t,r,n)},ut=function(t,e){b(t);var n=g(e),r=m(n).concat(bt(n));return M(r,(function(e){c&&!lt.call(n,e)||st(t,e,n[e])})),t},ft=function(t,e){return void 0===e?k(t):ut(k(t),e)},lt=function(t){var e=v(t,!0),n=X.call(this,e);return!(this===Z&&l(Y,e)&&!l(Q,e))&&(!(n||!l(this,e)||!l(Y,e)||l(this,R)&&this[R][e])||n)},dt=function(t,e){var n=g(t),r=v(e,!0);if(n!==Z||!l(Y,r)||l(Q,r)){var a=B(n,r);return!a||!l(Y,r)||l(n,R)&&n[R][r]||(a.enumerable=!0),a}},ht=function(t){var e=W(g(t)),n=[];return M(e,(function(t){l(Y,t)||l(T,t)||n.push(t)})),n},bt=function(t){var e=t===Z,n=W(e?Q:g(t)),r=[];return M(n,(function(t){!l(Y,t)||e&&!l(Z,t)||r.push(Y[t])})),r};if(s||(q=function(){if(this instanceof q)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=L(t),n=function(t){this===Z&&n.call(Q,t),l(this,R)&&l(this[R],e)&&(this[R][e]=!1),it(this,e,y(1,t))};return c&&at&&it(Z,e,{configurable:!0,set:n}),ot(e,t)},D(q[V],"toString",(function(){return J(this).tag})),D(q,"withoutSetter",(function(t){return ot(L(t),t)})),x.f=lt,I.f=st,w.f=dt,O.f=j.f=ht,S.f=bt,P.f=function(t){return ot(_(t),t)},c&&(H(q[V],"description",{configurable:!0,get:function(){return J(this).description}}),o||D(Z,"propertyIsEnumerable",lt,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:q}),M(m(nt),(function(t){z(t)})),r({target:F,stat:!0,forced:!s},{for:function(t){var e=String(t);if(l(tt,e))return tt[e];var n=q(e);return tt[e]=n,et[n]=e,n},keyFor:function(t){if(!ct(t))throw TypeError(t+" is not a symbol");if(l(et,t))return et[t]},useSetter:function(){at=!0},useSimple:function(){at=!1}}),r({target:"Object",stat:!0,forced:!s,sham:!c},{create:ft,defineProperty:st,defineProperties:ut,getOwnPropertyDescriptor:dt}),r({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:ht,getOwnPropertySymbols:bt}),r({target:"Object",stat:!0,forced:f((function(){S.f(1)}))},{getOwnPropertySymbols:function(t){return S.f(p(t))}}),$){var pt=!s||f((function(){var t=q();return"[null]"!=$([t])||"{}"!=$({a:t})||"{}"!=$(Object(t))}));r({target:"JSON",stat:!0,forced:pt},{stringify:function(t,e,n){var r,a=[t],i=1;while(arguments.length>i)a.push(arguments[i++]);if(r=e,(h(e)||void 0!==t)&&!ct(t))return d(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!ct(e))return e}),a[1]=e,$.apply(null,a)}})}q[V][K]||N(q[V],K,q[V].valueOf),C(q,F),T[R]=!0},a630:function(t,e,n){var r=n("23e7"),a=n("4df4"),i=n("1c7e"),o=!i((function(t){Array.from(t)}));r({target:"Array",stat:!0,forced:o},{from:a})},a9e3:function(t,e,n){"use strict";var r=n("83ab"),a=n("da84"),i=n("94ca"),o=n("6eeb"),c=n("5135"),s=n("c6b6"),u=n("7156"),f=n("c04e"),l=n("d039"),d=n("7c73"),h=n("241c").f,b=n("06cf").f,p=n("9bf2").f,g=n("58a8").trim,v="Number",y=a[v],k=y.prototype,m=s(d(k))==v,O=function(t){var e,n,r,a,i,o,c,s,u=f(t,!1);if("string"==typeof u&&u.length>2)if(u=g(u),e=u.charCodeAt(0),43===e||45===e){if(n=u.charCodeAt(2),88===n||120===n)return NaN}else if(48===e){switch(u.charCodeAt(1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+u}for(i=u.slice(2),o=i.length,c=0;c<o;c++)if(s=i.charCodeAt(c),s<48||s>a)return NaN;return parseInt(i,r)}return+u};if(i(v,!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var j,S=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof S&&(m?l((function(){k.valueOf.call(n)})):s(n)!=v)?u(new y(O(e)),n,S):O(e)},w=r?h(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),I=0;w.length>I;I++)c(y,j=w[I])&&!c(S,j)&&p(S,j,b(y,j));S.prototype=k,k.constructor=S,o(a,v,S)}},b04d:function(t,e,n){},b0c0:function(t,e,n){var r=n("83ab"),a=n("9bf2").f,i=Function.prototype,o=i.toString,c=/^\s*function ([^ (]*)/,s="name";r&&!(s in i)&&a(i,s,{configurable:!0,get:function(){try{return o.call(this).match(c)[1]}catch(t){return""}}})},b85c:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));n("a4d3"),n("e01a"),n("d28b"),n("d3b7"),n("3ca3"),n("ddb0"),n("a630"),n("fb6a"),n("b0c0"),n("25f0");function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function a(t,e){if(t){if("string"===typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}function i(t,e){var n;if("undefined"===typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=a(t))||e&&t&&"number"===typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,c=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return c=t.done,t},e:function(t){s=!0,o=t},f:function(){try{c||null==n["return"]||n["return"]()}finally{if(s)throw o}}}}},c287:function(t,e,n){"use strict";(function(t){n("4de4"),n("13d5"),n("a9e3"),n("dca8"),n("ac1f"),n("5319"),n("1276");var r=n("b85c"),a=n("a351"),i=n("ad3a"),o=n("bc3a"),c=n.n(o),s=n("4bb4"),u=n("10bf"),f=n.n(u);e["a"]={name:"Mainpage",components:{labelbox:a["a"],mainmenu:i["a"]},computed:{readyToshowMainPage:function(){return this.kenDetails.length>0&&this.kenUtiwake.length>0&&this.kenPcr.length>0&&this.kenDead.length>0&&this.kenIryou.length>0&&this.Zenkoku.length>0},zenkokuId:function(){return"zenkoku"},use:function(){return Number(this.kenDead[this.kenDead.length-1]["患者_入院中_入院予定含む"])+Number(this.kenDead[this.kenDead.length-1]["患者_宿泊療養施設に入所中"])},all:function(){return Number(this.kenIryou[this.kenIryou.length-1]["確保数_病床"])+Number(this.kenIryou[this.kenIryou.length-1]["確保数_宿泊療養施設"])},update:function(){for(var t=this.kenDead[this.kenDead.length-1]["公表_年月日"].split("/"),e=1;e<3;e++)1==t[e].length&&(t[e]="0"+t[e]);var n="※"+t[0]+"年"+t[1]+"月"+t[2]+"日時点";return n},infected:function(){var t=this.Zenkoku.reduce((function(t,e){return t+e["npatients"]}),0);console.log("this.kenUtiwake"),console.log(this.kenUtiwake);var e=this.kenUtiwake[this.kenUtiwake.length-1]["公表年月日"].replace("年","/");e=e.replace("月","/"),e=e.replace("日","/"),e=e.split("/");for(var n=1;n<3;n++)1==e[n].length&&(e[n]="0"+e[n]);var r="※"+e[0]+"年"+e[1]+"月"+e[2]+"日時点",a=this.last.split("-");return a="※"+a[0]+"年"+a[1]+"月"+a[2]+"日時点",{zenkoku:t+"人",okayama:this.kenUtiwake.length+"人",tsuyama:this.kenUtiwake.filter((function(t){if("津山市"==t.患者＿居住地)return!0})).length+"人",data1:a,data2:r,data3:r}},pcr:function(){var t=this.Zenkoku.reduce((function(t,e){return t+e["ninspections"]}),0),e=this.kenPcr.filter((function(t){if(""!=t.集計時点_年月日)return!0})),n=e[e.length-1].集計時点_年月日.split("/");1==n[2].length&&(n[2]="0"+n[2]);var r="※"+n[0]+"年"+n[1]+"月"+n[2]+"日時点",a=this.last.split("-");return a="※"+a[0]+"年"+a[1]+"月"+a[2]+"日時点",{zenkoku:t+"人",okayama:this.kenPcr.reduce((function(t,e){return t+Number(e["検査実施人数"])}),0)+"人",tsuyama:"No data",data1:a,data2:r,data3:""}},dead:function(){for(var t=this.Zenkoku.reduce((function(t,e){return t+e["ndeaths"]}),0),e=this.kenDead[this.kenDead.length-1]["公表_年月日"].split("/"),n=1;n<3;n++)1==e[n].length&&(e[n]="0"+e[n]);var r="※"+e[0]+"年"+e[1]+"月"+e[2]+"日時点",a=this.last.split("-");return a="※"+a[0]+"年"+a[1]+"月"+a[2]+"日時点",{zenkoku:t+"人",okayama:this.kenDead[this.kenDead.length-1]["患者_死亡"]+"人",tsuyama:"No data",data1:a,data2:r,data3:""}},discharge:function(){for(var t=this.Zenkoku.reduce((function(t,e){return t+e["nexits"]}),0),e=this.kenDead[this.kenDead.length-1]["公表_年月日"].split("/"),n=1;n<3;n++)1==e[n].length&&(e[n]="0"+e[n]);var r="※"+e[0]+"年"+e[1]+"月"+e[2]+"日時点",a=this.last.split("-");return a="※"+a[0]+"年"+a[1]+"月"+a[2]+"日時点",{zenkoku:t+"人",okayama:this.kenDead[this.kenDead.length-1]["患者_退院等"]+"人",tsuyama:"No data",data1:a,data2:r,data3:""}}},data:function(){return{kenDetails:[],kenUtiwake:[],kenPcr:[],kenDead:[],kenIryou:[],Zenkoku:[],last:[]}},mounted:function(){this.get_csv("https://taurayouhei.github.io/covid-19/data/kansenshasuu0420.csv",!0,"SJIS","UNICODE",this.setKenDetails),this.get_csv("https://taurayouhei.github.io/covid-19/data/pcr.csv",!0,"SJIS","UNICODE",this.setKenPcr),this.get_csv("https://taurayouhei.github.io/covid-19/data/kansenshashousaijouhou.csv",!0,"SJIS","UNICODE",this.setKenUchiwake),this.get_csv("https://taurayouhei.github.io/covid-19/data/kanjahasseijoukyou.csv",!0,"SJIS","UNICODE",this.setKenDead),this.get_csv("https://taurayouhei.github.io/covid-19/data/330001okayamacovid19medicalsystem.csv",!0,"SJIS","UNICODE",this.setKenIryou),this.get_csv("https://www.stopcovid19.jp/data/covid19japan.csv",!0,"UTF8","UNICODE",this.setZenkoku),this.lastupdata()},methods:{cash:function(){window.navigator.serviceWorker.getRegistrations().then((function(t){var e,n=Object(r["a"])(t);try{for(n.s();!(e=n.n()).done;){var a=e.value;a.unregister()}}catch(i){n.e(i)}finally{n.f()}})),window.navigator.serviceWorker.getRegistration.update()},lastupdata:function(){var t=this;c.a.get("https://www.stopcovid19.jp/data/covid19japan.json").then((function(e){t.last=e.data["lastUpdate"]})).catch((function(t){return console.log(t)}))},setKenUchiwake:function(t){console.log("setkenUtiwake"),console.log(t),this.kenUtiwake=t,this.$store.commit("Enter2",this.kenUtiwake)},setKenPcr:function(t){this.kenPcr=t},setKenDead:function(t){this.kenDead=t},setKenIryou:function(t){this.kenIryou=t},setZenkoku:function(t){this.Zenkoku=t},setKenDetails:function(t){this.kenDetails=t,this.$store.commit("Enter",this.kenDetails)},get_csv:function(e,n,r,a,i){c.a.get(e,{responseType:"arraybuffer"}).then((function(e){var o=t.from(e.data),c=f.a.convert(o,{from:r,to:a,type:"string"});c=c.replace(/^\ufeff/,""),Object(s["parse"])(c,{columns:n,quote:'"',ltrim:!0,rtrim:!0,delimiter:",",cast:!0},(function(t,e){i(Object.freeze(e))}))})).catch((function(t){return console.log(t)}))}}}}).call(this,n("b639").Buffer)},d28b:function(t,e,n){var r=n("746f");r("iterator")},d58f:function(t,e,n){var r=n("1c0b"),a=n("7b0b"),i=n("44ad"),o=n("50c4"),c=function(t){return function(e,n,c,s){r(n);var u=a(e),f=i(u),l=o(u.length),d=t?l-1:0,h=t?-1:1;if(c<2)while(1){if(d in f){s=f[d],d+=h;break}if(d+=h,t?d<0:l<=d)throw TypeError("Reduce of empty array with no initial value")}for(;t?d>=0:l>d;d+=h)d in f&&(s=n(s,f[d],d,u));return s}};t.exports={left:c(!1),right:c(!0)}},ddb0:function(t,e,n){var r=n("da84"),a=n("fdbc"),i=n("e260"),o=n("9112"),c=n("b622"),s=c("iterator"),u=c("toStringTag"),f=i.values;for(var l in a){var d=r[l],h=d&&d.prototype;if(h){if(h[s]!==f)try{o(h,s,f)}catch(p){h[s]=f}if(h[u]||o(h,u,l),a[l])for(var b in i)if(h[b]!==i[b])try{o(h,b,i[b])}catch(p){h[b]=i[b]}}}},e01a:function(t,e,n){"use strict";var r=n("23e7"),a=n("83ab"),i=n("da84"),o=n("5135"),c=n("861d"),s=n("9bf2").f,u=n("e893"),f=i.Symbol;if(a&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},d=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof d?new f(t):void 0===t?f():f(t);return""===t&&(l[e]=!0),e};u(d,f);var h=d.prototype=f.prototype;h.constructor=d;var b=h.toString,p="Symbol(test)"==String(f("test")),g=/^Symbol\((.*)\)[^)]+$/;s(h,"description",{configurable:!0,get:function(){var t=c(this)?this.valueOf():this,e=b.call(t);if(o(l,t))return"";var n=p?e.slice(7,-1):e.replace(g,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:d})}},e538:function(t,e,n){var r=n("b622");e.f=r},ebca:function(t,e,n){"use strict";n("b04d")},fb6a:function(t,e,n){"use strict";var r=n("23e7"),a=n("861d"),i=n("e8b5"),o=n("23cb"),c=n("50c4"),s=n("fc6a"),u=n("8418"),f=n("b622"),l=n("1dde"),d=n("ae40"),h=l("slice"),b=d("slice",{ACCESSORS:!0,0:0,1:2}),p=f("species"),g=[].slice,v=Math.max;r({target:"Array",proto:!0,forced:!h||!b},{slice:function(t,e){var n,r,f,l=s(this),d=c(l.length),h=o(t,d),b=o(void 0===e?d:e,d);if(i(l)&&(n=l.constructor,"function"!=typeof n||n!==Array&&!i(n.prototype)?a(n)&&(n=n[p],null===n&&(n=void 0)):n=void 0,n===Array||void 0===n))return g.call(l,h,b);for(r=new(void 0===n?Array:n)(v(b-h,0)),f=0;h<b;h++,f++)h in l&&u(r,f,l[h]);return r.length=f,r}})},fdbc:function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,