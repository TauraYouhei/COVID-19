(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-vendors"],{"00ee":function(t,e,n){var r=n("b622"),o=r("toStringTag"),i={};i[o]="z",t.exports="[object z]"===String(i)},"0366":function(t,e,n){var r=n("1c0b");t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},"057f":function(t,e,n){var r=n("fc6a"),o=n("241c").f,i={}.toString,c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(t){try{return o(t)}catch(e){return c.slice()}};t.exports.f=function(t){return c&&"[object Window]"==i.call(t)?s(t):o(r(t))}},"06cf":function(t,e,n){var r=n("83ab"),o=n("d1e7"),i=n("5c6c"),c=n("fc6a"),s=n("c04e"),a=n("5135"),u=n("0cfb"),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=c(t),e=s(e,!0),u)try{return l(t,e)}catch(n){}if(a(t,e))return i(!o.f.call(t,e),t[e])}},"0cfb":function(t,e,n){var r=n("83ab"),o=n("d039"),i=n("cc12");t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},"0e44":function(t,e,n){"use strict";var r=function(t){return function(t){return!!t&&"object"==typeof t}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===o}(t)}(t)},o="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function i(t,e){return!1!==e.clone&&e.isMergeableObject(t)?u(Array.isArray(t)?[]:{},t,e):t}function c(t,e,n){return t.concat(e).map((function(t){return i(t,n)}))}function s(t){return Object.keys(t).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter((function(e){return t.propertyIsEnumerable(e)})):[]}(t))}function a(t,e){try{return e in t}catch(t){return!1}}function u(t,e,n){(n=n||{}).arrayMerge=n.arrayMerge||c,n.isMergeableObject=n.isMergeableObject||r,n.cloneUnlessOtherwiseSpecified=i;var o=Array.isArray(e);return o===Array.isArray(t)?o?n.arrayMerge(t,e,n):function(t,e,n){var r={};return n.isMergeableObject(t)&&s(t).forEach((function(e){r[e]=i(t[e],n)})),s(e).forEach((function(o){(function(t,e){return a(t,e)&&!(Object.hasOwnProperty.call(t,e)&&Object.propertyIsEnumerable.call(t,e))})(t,o)||(r[o]=a(t,o)&&n.isMergeableObject(e[o])?function(t,e){if(!e.customMerge)return u;var n=e.customMerge(t);return"function"==typeof n?n:u}(o,n)(t[o],e[o],n):i(e[o],n))})),r}(t,e,n):i(e,n)}u.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce((function(t,n){return u(t,n,e)}),{})};var l=u;e["a"]=function(t){var e=(t=t||{}).storage||window&&window.localStorage,n=t.key||"vuex";function r(t,e){var n=e.getItem(t);try{return void 0!==n?JSON.parse(n):void 0}catch(t){}}function o(){return!0}function i(t,e,n){return n.setItem(t,JSON.stringify(e))}function c(t,e){return Array.isArray(e)?e.reduce((function(e,n){return function(t,e,n,r){return(e=e.split?e.split("."):e.slice(0)).slice(0,-1).reduce((function(t,e){return t[e]=t[e]||{}}),t)[e.pop()]=n,t}(e,n,(r=t,void 0===(r=((o=n).split?o.split("."):o).reduce((function(t,e){return t&&t[e]}),r))?void 0:r));var r,o}),{}):t}function s(t){return function(e){return t.subscribe(e)}}(t.assertStorage||function(){e.setItem("@@",1),e.removeItem("@@")})(e);var a,u=function(){return(t.getState||r)(n,e)};return t.fetchBeforeUse&&(a=u()),function(r){t.fetchBeforeUse||(a=u()),"object"==typeof a&&null!==a&&(r.replaceState(t.overwrite?a:l(r.state,a,{arrayMerge:t.arrayMerger||function(t,e){return e},clone:!1})),(t.rehydrated||function(){})(r)),(t.subscriber||s)(r)((function(r,s){(t.filter||o)(r)&&(t.setState||i)(n,(t.reducer||c)(s,t.paths),e)}))}}},"19aa":function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},"1be4":function(t,e,n){var r=n("d066");t.exports=r("document","documentElement")},"1c0b":function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},"1c7e":function(t,e,n){var r=n("b622"),o=r("iterator"),i=!1;try{var c=0,s={next:function(){return{done:!!c++}},return:function(){i=!0}};s[o]=function(){return this},Array.from(s,(function(){throw 2}))}catch(a){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var r={};r[o]=function(){return{next:function(){return{done:n=!0}}}},t(r)}catch(a){}return n}},"1cdc":function(t,e,n){var r=n("342f");t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},"1d80":function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on "+t);return t}},"1dde":function(t,e,n){var r=n("d039"),o=n("b622"),i=n("2d00"),c=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[],n=e.constructor={};return n[c]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2266:function(t,e,n){var r=n("825a"),o=n("e95a"),i=n("50c4"),c=n("0366"),s=n("35a1"),a=n("9bdd"),u=function(t,e){this.stopped=t,this.result=e},l=t.exports=function(t,e,n,l,f){var p,d,h,v,b,m,g,y=c(e,n,l?2:1);if(f)p=t;else{if(d=s(t),"function"!=typeof d)throw TypeError("Target is not iterable");if(o(d)){for(h=0,v=i(t.length);v>h;h++)if(b=l?y(r(g=t[h])[0],g[1]):y(t[h]),b&&b instanceof u)return b;return new u(!1)}p=d.call(t)}m=p.next;while(!(g=m.call(p)).done)if(b=a(p,y,g.value,l),"object"==typeof b&&b&&b instanceof u)return b;return new u(!1)};l.stop=function(t){return new u(!0,t)}},"23cb":function(t,e,n){var r=n("a691"),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},"23e7":function(t,e,n){var r=n("da84"),o=n("06cf").f,i=n("9112"),c=n("6eeb"),s=n("ce4e"),a=n("e893"),u=n("94ca");t.exports=function(t,e){var n,l,f,p,d,h,v=t.target,b=t.global,m=t.stat;if(l=b?r:m?r[v]||s(v,{}):(r[v]||{}).prototype,l)for(f in e){if(d=e[f],t.noTargetGet?(h=o(l,f),p=h&&h.value):p=l[f],n=u(b?f:v+(m?".":"#")+f,t.forced),!n&&void 0!==p){if(typeof d===typeof p)continue;a(d,p)}(t.sham||p&&p.sham)&&i(d,"sham",!0),c(l,f,d,t)}}},"241c":function(t,e,n){var r=n("ca84"),o=n("7839"),i=o.concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},"25f0":function(t,e,n){"use strict";var r=n("6eeb"),o=n("825a"),i=n("d039"),c=n("ad6d"),s="toString",a=RegExp.prototype,u=a[s],l=i((function(){return"/a/b"!=u.call({source:"a",flags:"b"})})),f=u.name!=s;(l||f)&&r(RegExp.prototype,s,(function(){var t=o(this),e=String(t.source),n=t.flags,r=String(void 0===n&&t instanceof RegExp&&!("flags"in a)?c.call(t):n);return"/"+e+"/"+r}),{unsafe:!0})},2626:function(t,e,n){"use strict";var r=n("d066"),o=n("9bf2"),i=n("b622"),c=n("83ab"),s=i("species");t.exports=function(t){var e=r(t),n=o.f;c&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},"2cf4":function(t,e,n){var r,o,i,c=n("da84"),s=n("d039"),a=n("c6b6"),u=n("0366"),l=n("1be4"),f=n("cc12"),p=n("1cdc"),d=c.location,h=c.setImmediate,v=c.clearImmediate,b=c.process,m=c.MessageChannel,g=c.Dispatch,y=0,O={},j="onreadystatechange",w=function(t){if(O.hasOwnProperty(t)){var e=O[t];delete O[t],e()}},_=function(t){return function(){w(t)}},x=function(t){w(t.data)},S=function(t){c.postMessage(t+"",d.protocol+"//"+d.host)};h&&v||(h=function(t){var e=[],n=1;while(arguments.length>n)e.push(arguments[n++]);return O[++y]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(y),y},v=function(t){delete O[t]},"process"==a(b)?r=function(t){b.nextTick(_(t))}:g&&g.now?r=function(t){g.now(_(t))}:m&&!p?(o=new m,i=o.port2,o.port1.onmessage=x,r=u(i.postMessage,i,1)):!c.addEventListener||"function"!=typeof postMessage||c.importScripts||s(S)||"file:"===d.protocol?r=j in f("script")?function(t){l.appendChild(f("script"))[j]=function(){l.removeChild(this),w(t)}}:function(t){setTimeout(_(t),0)}:(r=S,c.addEventListener("message",x,!1))),t.exports={set:h,clear:v}},"2d00":function(t,e,n){var r,o,i=n("da84"),c=n("342f"),s=i.process,a=s&&s.versions,u=a&&a.v8;u?(r=u.split("."),o=r[0]+r[1]):c&&(r=c.match(/Edge\/(\d+)/),(!r||r[1]>=74)&&(r=c.match(/Chrome\/(\d+)/),r&&(o=r[1]))),t.exports=o&&+o},"342f":function(t,e,n){var r=n("d066");t.exports=r("navigator","userAgent")||""},"35a1":function(t,e,n){var r=n("f5df"),o=n("3f8c"),i=n("b622"),c=i("iterator");t.exports=function(t){if(void 0!=t)return t[c]||t["@@iterator"]||o[r(t)]}},"37e8":function(t,e,n){var r=n("83ab"),o=n("9bf2"),i=n("825a"),c=n("df75");t.exports=r?Object.defineProperties:function(t,e){i(t);var n,r=c(e),s=r.length,a=0;while(s>a)o.f(t,n=r[a++],e[n]);return t}},"3bbe":function(t,e,n){var r=n("861d");t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},"3ca3":function(t,e,n){"use strict";var r=n("6547").charAt,o=n("69f3"),i=n("7dd0"),c="String Iterator",s=o.set,a=o.getterFor(c);i(String,"String",(function(t){s(this,{type:c,string:String(t),index:0})}),(function(){var t,e=a(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},"3f8c":function(t,e){t.exports={}},"428f":function(t,e,n){var r=n("da84");t.exports=r},"44ad":function(t,e,n){var r=n("d039"),o=n("c6b6"),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},"44d2":function(t,e,n){var r=n("b622"),o=n("7c73"),i=n("9bf2"),c=r("unscopables"),s=Array.prototype;void 0==s[c]&&i.f(s,c,{configurable:!0,value:o(null)}),t.exports=function(t){s[c][t]=!0}},"44de":function(t,e,n){var r=n("da84");t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},4840:function(t,e,n){var r=n("825a"),o=n("1c0b"),i=n("b622"),c=i("species");t.exports=function(t,e){var n,i=r(t).constructor;return void 0===i||void 0==(n=r(i)[c])?e:o(n)}},4930:function(t,e,n){var r=n("d039");t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},"4d64":function(t,e,n){var r=n("fc6a"),o=n("50c4"),i=n("23cb"),c=function(t){return function(e,n,c){var s,a=r(e),u=o(a.length),l=i(c,u);if(t&&n!=n){while(u>l)if(s=a[l++],s!=s)return!0}else for(;u>l;l++)if((t||l in a)&&a[l]===n)return t||l||0;return!t&&-1}};t.exports={includes:c(!0),indexOf:c(!1)}},"4df4":function(t,e,n){"use strict";var r=n("0366"),o=n("7b0b"),i=n("9bdd"),c=n("e95a"),s=n("50c4"),a=n("8418"),u=n("35a1");t.exports=function(t){var e,n,l,f,p,d,h=o(t),v="function"==typeof this?this:Array,b=arguments.length,m=b>1?arguments[1]:void 0,g=void 0!==m,y=u(h),O=0;if(g&&(m=r(m,b>2?arguments[2]:void 0,2)),void 0==y||v==Array&&c(y))for(e=s(h.length),n=new v(e);e>O;O++)d=g?m(h[O],O):h[O],a(n,O,d);else for(f=y.call(h),p=f.next,n=new v;!(l=p.call(f)).done;O++)d=g?i(f,m,[l.value,O],!0):l.value,a(n,O,d);return n.length=O,n}},"50c4":function(t,e,n){var r=n("a691"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},5135:function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},5502:function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return w}));var r=n("7a23"),o="store";
/*!
 * vuex v4.0.0-rc.1
 * (c) 2020 Evan You
 * @license MIT
 */var i="undefined"!==typeof window?window:"undefined"!==typeof t?t:{},c=i.__VUE_DEVTOOLS_GLOBAL_HOOK__;function s(t){c&&(t._devtoolHook=c,c.emit("vuex:init",t),c.on("vuex:travel-to-state",(function(e){t.replaceState(e)})),t.subscribe((function(t,e){c.emit("vuex:mutation",t,e)}),{prepend:!0}),t.subscribeAction((function(t,e){c.emit("vuex:action",t,e)}),{prepend:!0}))}function a(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}function u(t){return null!==t&&"object"===typeof t}function l(t){return t&&"function"===typeof t.then}function f(t,e){if(!t)throw new Error("[vuex] "+e)}function p(t,e){return function(){return t(e)}}var d=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"===typeof n?n():n)||{}},h={namespaced:{configurable:!0}};h.namespaced.get=function(){return!!this._rawModule.namespaced},d.prototype.addChild=function(t,e){this._children[t]=e},d.prototype.removeChild=function(t){delete this._children[t]},d.prototype.getChild=function(t){return this._children[t]},d.prototype.hasChild=function(t){return t in this._children},d.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},d.prototype.forEachChild=function(t){a(this._children,t)},d.prototype.forEachGetter=function(t){this._rawModule.getters&&a(this._rawModule.getters,t)},d.prototype.forEachAction=function(t){this._rawModule.actions&&a(this._rawModule.actions,t)},d.prototype.forEachMutation=function(t){this._rawModule.mutations&&a(this._rawModule.mutations,t)},Object.defineProperties(d.prototype,h);var v=function(t){this.register([],t,!1)};function b(t,e,n){if(O(t,n),e.update(n),n.modules)for(var r in n.modules){if(!e.getChild(r))return void console.warn("[vuex] trying to add a new module '"+r+"' on hot reloading, manual reload is needed");b(t.concat(r),e.getChild(r),n.modules[r])}}v.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},v.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return e=e.getChild(n),t+(e.namespaced?n+"/":"")}),"")},v.prototype.update=function(t){b([],this.root,t)},v.prototype.register=function(t,e,n){var r=this;void 0===n&&(n=!0),O(t,e);var o=new d(e,n);if(0===t.length)this.root=o;else{var i=this.get(t.slice(0,-1));i.addChild(t[t.length-1],o)}e.modules&&a(e.modules,(function(e,o){r.register(t.concat(o),e,n)}))},v.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1],r=e.getChild(n);r?r.runtime&&e.removeChild(n):console.warn("[vuex] trying to unregister module '"+n+"', which is not registered")},v.prototype.isRegistered=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];return e.hasChild(n)};var m={assert:function(t){return"function"===typeof t},expected:"function"},g={assert:function(t){return"function"===typeof t||"object"===typeof t&&"function"===typeof t.handler},expected:'function or object with "handler" function'},y={getters:m,mutations:m,actions:g};function O(t,e){Object.keys(y).forEach((function(n){if(e[n]){var r=y[n];a(e[n],(function(e,o){f(r.assert(e),j(t,n,o,e,r.expected))}))}}))}function j(t,e,n,r,o){var i=e+" should be "+o+' but "'+e+"."+n+'"';return t.length>0&&(i+=' in module "'+t.join(".")+'"'),i+=" is "+JSON.stringify(r)+".",i}function w(t){return new _(t)}var _=function t(e){var n=this;void 0===e&&(e={}),f("undefined"!==typeof Promise,"vuex requires a Promise polyfill in this browser."),f(this instanceof t,"store must be called with the new operator.");var r=e.plugins;void 0===r&&(r=[]);var o=e.strict;void 0===o&&(o=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new v(e),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._makeLocalGettersCache=Object.create(null);var i=this,c=this,a=c.dispatch,u=c.commit;this.dispatch=function(t,e){return a.call(i,t,e)},this.commit=function(t,e,n){return u.call(i,t,e,n)},this.strict=o;var l=this._modules.root.state;E(this,l,[],this._modules.root),C(this,l),r.forEach((function(t){return t(n)}));var p=void 0===e.devtools||e.devtools;p&&s(this)},x={state:{configurable:!0}};function S(t,e,n){return e.indexOf(t)<0&&(n&&n.prepend?e.unshift(t):e.push(t)),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function k(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;E(t,n,[],t._modules.root,!0),C(t,n,e)}function C(t,e,n){var o=t._state;t.getters={},t._makeLocalGettersCache=Object.create(null);var i=t._wrappedGetters,c={},s={};a(i,(function(e,n){c[n]=p(e,t),s[n]=Object(r["b"])((function(){return c[n]()})),Object.defineProperty(t.getters,n,{get:function(){return s[n].value},enumerable:!0})})),t._state=Object(r["u"])({data:e}),t.strict&&R(t),o&&n&&t._withCommit((function(){o.data=null}))}function E(t,e,n,r,o){var i=!n.length,c=t._modules.getNamespace(n);if(r.namespaced&&(t._modulesNamespaceMap[c]&&console.error("[vuex] duplicate namespace "+c+" for the namespaced module "+n.join("/")),t._modulesNamespaceMap[c]=r),!i&&!o){var s=F(e,n.slice(0,-1)),a=n[n.length-1];t._withCommit((function(){a in s&&console.warn('[vuex] state field "'+a+'" was overridden by a module with the same name at "'+n.join(".")+'"'),s[a]=r.state}))}var u=r.context=A(t,c,n);r.forEachMutation((function(e,n){var r=c+n;M(t,r,e,u)})),r.forEachAction((function(e,n){var r=e.root?n:c+n,o=e.handler||e;T(t,r,o,u)})),r.forEachGetter((function(e,n){var r=c+n;L(t,r,e,u)})),r.forEachChild((function(r,i){E(t,e,n.concat(i),r,o)}))}function A(t,e,n){var r=""===e,o={dispatch:r?t.dispatch:function(n,r,o){var i=I(n,r,o),c=i.payload,s=i.options,a=i.type;if(s&&s.root||(a=e+a,t._actions[a]))return t.dispatch(a,c);console.error("[vuex] unknown local action type: "+i.type+", global type: "+a)},commit:r?t.commit:function(n,r,o){var i=I(n,r,o),c=i.payload,s=i.options,a=i.type;s&&s.root||(a=e+a,t._mutations[a])?t.commit(a,c,s):console.error("[vuex] unknown local mutation type: "+i.type+", global type: "+a)}};return Object.defineProperties(o,{getters:{get:r?function(){return t.getters}:function(){return P(t,e)}},state:{get:function(){return F(t.state,n)}}}),o}function P(t,e){if(!t._makeLocalGettersCache[e]){var n={},r=e.length;Object.keys(t.getters).forEach((function(o){if(o.slice(0,r)===e){var i=o.slice(r);Object.defineProperty(n,i,{get:function(){return t.getters[o]},enumerable:!0})}})),t._makeLocalGettersCache[e]=n}return t._makeLocalGettersCache[e]}function M(t,e,n,r){var o=t._mutations[e]||(t._mutations[e]=[]);o.push((function(e){n.call(t,r.state,e)}))}function T(t,e,n,r){var o=t._actions[e]||(t._actions[e]=[]);o.push((function(e){var o=n.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},e);return l(o)||(o=Promise.resolve(o)),t._devtoolHook?o.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):o}))}function L(t,e,n,r){t._wrappedGetters[e]?console.error("[vuex] duplicate getter key: "+e):t._wrappedGetters[e]=function(t){return n(r.state,r.getters,t.state,t.getters)}}function R(t){Object(r["C"])((function(){return t._state.data}),(function(){f(t._committing,"do not mutate vuex store state outside mutation handlers.")}),{deep:!0,flush:"sync"})}function F(t,e){return e.reduce((function(t,e){return t[e]}),t)}function I(t,e,n){return u(t)&&t.type&&(n=e,e=t,t=t.type),f("string"===typeof t,"expects string as the type, but found "+typeof t+"."),{type:t,payload:e,options:n}}_.prototype.install=function(t,e){t.provide(e||o,this),t.config.globalProperties.$store=this},x.state.get=function(){return this._state.data},x.state.set=function(t){f(!1,"use store.replaceState() to explicit replace store state.")},_.prototype.commit=function(t,e,n){var r=this,o=I(t,e,n),i=o.type,c=o.payload,s=o.options,a={type:i,payload:c},u=this._mutations[i];u?(this._withCommit((function(){u.forEach((function(t){t(c)}))})),this._subscribers.slice().forEach((function(t){return t(a,r.state)})),s&&s.silent&&console.warn("[vuex] mutation type: "+i+". Silent option has been removed. Use the filter functionality in the vue-devtools")):console.error("[vuex] unknown mutation type: "+i)},_.prototype.dispatch=function(t,e){var n=this,r=I(t,e),o=r.type,i=r.payload,c={type:o,payload:i},s=this._actions[o];if(s){try{this._actionSubscribers.slice().filter((function(t){return t.before})).forEach((function(t){return t.before(c,n.state)}))}catch(u){console.warn("[vuex] error in before action subscribers: "),console.error(u)}var a=s.length>1?Promise.all(s.map((function(t){return t(i)}))):s[0](i);return new Promise((function(t,e){a.then((function(e){try{n._actionSubscribers.filter((function(t){return t.after})).forEach((function(t){return t.after(c,n.state)}))}catch(u){console.warn("[vuex] error in after action subscribers: "),console.error(u)}t(e)}),(function(t){try{n._actionSubscribers.filter((function(t){return t.error})).forEach((function(e){return e.error(c,n.state,t)}))}catch(u){console.warn("[vuex] error in error action subscribers: "),console.error(u)}e(t)}))}))}console.error("[vuex] unknown action type: "+o)},_.prototype.subscribe=function(t,e){return S(t,this._subscribers,e)},_.prototype.subscribeAction=function(t,e){var n="function"===typeof t?{before:t}:t;return S(n,this._actionSubscribers,e)},_.prototype.watch=function(t,e,n){var o=this;return f("function"===typeof t,"store.watch only accepts a function."),Object(r["C"])((function(){return t(o.state,o.getters)}),e,Object.assign({},n))},_.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._state.data=t}))},_.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"===typeof t&&(t=[t]),f(Array.isArray(t),"module path must be a string or an Array."),f(t.length>0,"cannot register the root module by using registerModule."),this._modules.register(t,e),E(this,this.state,t,this._modules.get(t),n.preserveState),C(this,this.state)},_.prototype.unregisterModule=function(t){var e=this;"string"===typeof t&&(t=[t]),f(Array.isArray(t),"module path must be a string or an Array."),this._modules.unregister(t),this._withCommit((function(){var n=F(e.state,t.slice(0,-1));delete n[t[t.length-1]]})),k(this)},_.prototype.hasModule=function(t){return"string"===typeof t&&(t=[t]),f(Array.isArray(t),"module path must be a string or an Array."),this._modules.isRegistered(t)},_.prototype.hotUpdate=function(t){this._modules.update(t),k(this,!0)},_.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(_.prototype,x);B((function(t,e){var n={};return N(e)||console.error("[vuex] mapState: mapper parameter must be either an Array or an Object"),$(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var r=U(this.$store,"mapState",t);if(!r)return;e=r.context.state,n=r.context.getters}return"function"===typeof o?o.call(this,e,n):e[o]},n[r].vuex=!0})),n})),B((function(t,e){var n={};return N(e)||console.error("[vuex] mapMutations: mapper parameter must be either an Array or an Object"),$(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.commit;if(t){var i=U(this.$store,"mapMutations",t);if(!i)return;r=i.context.commit}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),B((function(t,e){var n={};return N(e)||console.error("[vuex] mapGetters: mapper parameter must be either an Array or an Object"),$(e).forEach((function(e){var r=e.key,o=e.val;o=t+o,n[r]=function(){if(!t||U(this.$store,"mapGetters",t)){if(o in this.$store.getters)return this.$store.getters[o];console.error("[vuex] unknown getter: "+o)}},n[r].vuex=!0})),n})),B((function(t,e){var n={};return N(e)||console.error("[vuex] mapActions: mapper parameter must be either an Array or an Object"),$(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.dispatch;if(t){var i=U(this.$store,"mapActions",t);if(!i)return;r=i.context.dispatch}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n}));function $(t){return N(t)?Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}})):[]}function N(t){return Array.isArray(t)||u(t)}function B(t){return function(e,n){return"string"!==typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function U(t,e,n){var r=t._modulesNamespaceMap[n];return r||console.error("[vuex] module namespace not found in "+e+"(): "+n),r}}).call(this,n("c8ba"))},5692:function(t,e,n){var r=n("c430"),o=n("c6cd");(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},"56ef":function(t,e,n){var r=n("d066"),o=n("241c"),i=n("7418"),c=n("825a");t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(c(t)),n=i.f;return n?e.concat(n(t)):e}},"5c6c":function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},"60da":function(t,e,n){"use strict";var r=n("83ab"),o=n("d039"),i=n("df75"),c=n("7418"),s=n("d1e7"),a=n("7b0b"),u=n("44ad"),l=Object.assign,f=Object.defineProperty;t.exports=!l||o((function(){if(r&&1!==l({b:1},l(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),o="abcdefghijklmnopqrst";return t[n]=7,o.split("").forEach((function(t){e[t]=t})),7!=l({},t)[n]||i(l({},e)).join("")!=o}))?function(t,e){var n=a(t),o=arguments.length,l=1,f=c.f,p=s.f;while(o>l){var d,h=u(arguments[l++]),v=f?i(h).concat(f(h)):i(h),b=v.length,m=0;while(b>m)d=v[m++],r&&!p.call(h,d)||(n[d]=h[d])}return n}:l},6547:function(t,e,n){var r=n("a691"),o=n("1d80"),i=function(t){return function(e,n){var i,c,s=String(o(e)),a=r(n),u=s.length;return a<0||a>=u?t?"":void 0:(i=s.charCodeAt(a),i<55296||i>56319||a+1===u||(c=s.charCodeAt(a+1))<56320||c>57343?t?s.charAt(a):i:t?s.slice(a,a+2):c-56320+(i-55296<<10)+65536)}};t.exports={codeAt:i(!1),charAt:i(!0)}},"65f0":function(t,e,n){var r=n("861d"),o=n("e8b5"),i=n("b622"),c=i("species");t.exports=function(t,e){var n;return o(t)&&(n=t.constructor,"function"!=typeof n||n!==Array&&!o(n.prototype)?r(n)&&(n=n[c],null===n&&(n=void 0)):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},"69f3":function(t,e,n){var r,o,i,c=n("7f9a"),s=n("da84"),a=n("861d"),u=n("9112"),l=n("5135"),f=n("f772"),p=n("d012"),d=s.WeakMap,h=function(t){return i(t)?o(t):r(t,{})},v=function(t){return function(e){var n;if(!a(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}};if(c){var b=new d,m=b.get,g=b.has,y=b.set;r=function(t,e){return y.call(b,t,e),e},o=function(t){return m.call(b,t)||{}},i=function(t){return g.call(b,t)}}else{var O=f("state");p[O]=!0,r=function(t,e){return u(t,O,e),e},o=function(t){return l(t,O)?t[O]:{}},i=function(t){return l(t,O)}}t.exports={set:r,get:o,has:i,enforce:h,getterFor:v}},"6c02":function(t,e,n){"use strict";n.d(e,"a",(function(){return Yt})),n.d(e,"b",(function(){return W}));var r=n("7a23");
/*!
  * vue-router v4.0.0-rc.1
  * (c) 2020 Eduardo San Martin Morote
  * @license MIT
  */const o="function"===typeof Symbol&&"symbol"===typeof Symbol.toStringTag,i=t=>o?Symbol(t):"_vr_"+t,c=i("rvlm"),s=i("rvd"),a=i("r"),u=i("rl"),l="undefined"!==typeof window;function f(t){return t.__esModule||o&&"Module"===t[Symbol.toStringTag]}const p=Object.assign;function d(t,e){const n={};for(const r in e){const o=e[r];n[r]=Array.isArray(o)?o.map(t):t(o)}return n}let h=()=>{};const v=/\/$/,b=t=>t.replace(v,"");function m(t,e,n="/"){let r,o={},i="",c="";const s=e.indexOf("?"),a=e.indexOf("#",s>-1?s:0);return s>-1&&(r=e.slice(0,s),i=e.slice(s+1,a>-1?a:e.length),o=t(i)),a>-1&&(r=r||e.slice(0,a),c=e.slice(a,e.length)),r=S(null!=r?r:e,n),{fullPath:r+(i&&"?")+i+c,path:r,query:o,hash:c}}function g(t,e){let n=e.query?t(e.query):"";return e.path+(n&&"?")+n+(e.hash||"")}function y(t,e){return!e||t.toLowerCase().indexOf(e.toLowerCase())?t:t.slice(e.length)||"/"}function O(t,e,n){let r=e.matched.length-1,o=n.matched.length-1;return r>-1&&r===o&&j(e.matched[r],n.matched[o])&&w(e.params,n.params)&&t(e.query)===t(n.query)&&e.hash===n.hash}function j(t,e){return(t.aliasOf||t)===(e.aliasOf||e)}function w(t,e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(let n in t)if(!_(t[n],e[n]))return!1;return!0}function _(t,e){return Array.isArray(t)?x(t,e):Array.isArray(e)?x(e,t):t===e}function x(t,e){return Array.isArray(e)?t.length===e.length&&t.every((t,n)=>t===e[n]):1===t.length&&t[0]===e}function S(t,e){if(t.startsWith("/"))return t;if(!t)return e;const n=e.split("/"),r=t.split("/");let o,i,c=n.length-1;for(o=0;o<r.length;o++)if(i=r[o],1!==c&&"."!==i){if(".."!==i)break;c--}return n.slice(0,c).join("/")+"/"+r.slice(o-(o===r.length?1:0)).join("/")}var k,C;(function(t){t["pop"]="pop",t["push"]="push"})(k||(k={})),function(t){t["back"]="back",t["forward"]="forward",t["unknown"]=""}(C||(C={}));function E(t){if(!t)if(l){const e=document.querySelector("base");t=e&&e.getAttribute("href")||"/",t=t.replace(/^\w+:\/\/[^\/]+/,"")}else t="/";return"/"!==t[0]&&"#"!==t[0]&&(t="/"+t),b(t)}const A=/^[^#]+#/;function P(t,e){return t.replace(A,"#")+e}function M(t,e){const n=document.documentElement.getBoundingClientRect(),r=t.getBoundingClientRect();return{behavior:e.behavior,left:r.left-n.left-(e.left||0),top:r.top-n.top-(e.top||0)}}const T=()=>({left:window.pageXOffset,top:window.pageYOffset});function L(t){let e;if("el"in t){let n=t.el;const r="string"===typeof n&&n.startsWith("#");0;const o="string"===typeof n?r?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!o)return;e=M(o,t)}else e=t;"scrollBehavior"in document.documentElement.style?window.scrollTo(e):window.scrollTo(null!=e.left?e.left:window.pageXOffset,null!=e.top?e.top:window.pageYOffset)}function R(t,e){const n=history.state?history.state.position-e:-1;return n+t}const F=new Map;function I(t,e){F.set(t,e)}function $(t){const e=F.get(t);return F.delete(t),e}let N=()=>location.protocol+"//"+location.host;function B(t,e){const{pathname:n,search:r,hash:o}=e,i=t.indexOf("#");if(i>-1){let t=o.slice(1);return"/"!==t[0]&&(t="/"+t),y(t,"")}const c=y(n,t);return c+r+o}function U(t,e,n,r){let o=[],i=[],c=null;const s=({state:i})=>{const s=B(t,location),a=n.value,u=e.value;let l=0;if(i){if(n.value=s,e.value=i,c&&c===a)return void(c=null);l=u?i.position-u.position:0}else r(s);o.forEach(t=>{t(n.value,a,{delta:l,type:k.pop,direction:l?l>0?C.forward:C.back:C.unknown})})};function a(){c=n.value}function u(t){o.push(t);const e=()=>{const e=o.indexOf(t);e>-1&&o.splice(e,1)};return i.push(e),e}function l(){const{history:t}=window;t.state&&t.replaceState(p({},t.state,{scroll:T()}),"")}function f(){for(const t of i)t();i=[],window.removeEventListener("popstate",s),window.removeEventListener("beforeunload",l)}return window.addEventListener("popstate",s),window.addEventListener("beforeunload",l),{pauseListeners:a,listen:u,destroy:f}}function V(t,e,n,r=!1,o=!1){return{back:t,current:e,forward:n,replaced:r,position:window.history.length,scroll:o?T():null}}function G(t){const{history:e,location:n}=window;let r={value:B(t,n)},o={value:e.state};function i(r,i,c){const s=t.indexOf("#"),a=s>-1?t.slice(s)+r:N()+t+r;try{e[c?"replaceState":"pushState"](i,"",a),o.value=i}catch(u){console.error(u),n[c?"replace":"assign"](a)}}function c(t,n){const c=p({},e.state,V(o.value.back,t,o.value.forward,!0),n,{position:o.value.position});i(t,c,!0),r.value=t}function s(t,n){const c=p({},o.value,e.state,{forward:t,scroll:T()});i(c.current,c,!0);const s=p({},V(r.value,t,null),{position:c.position+1},n);i(t,s,!1),r.value=t}return o.value||i(r.value,{back:null,current:r.value,forward:null,position:e.length-1,replaced:!0,scroll:null},!0),{location:r,state:o,push:s,replace:c}}function D(t){t=E(t);const e=G(t),n=U(t,e.state,e.location,e.replace);function r(t,e=!0){e||n.pauseListeners(),history.go(t)}const o=p({location:"",base:t,go:r,createHref:P.bind(null,t)},e,n);return Object.defineProperty(o,"location",{get:()=>e.location.value}),Object.defineProperty(o,"state",{get:()=>e.state.value}),o}function W(t){return t=location.host?t||location.pathname:"",t.indexOf("#")<0&&(t+="#"),D(t)}function q(t){return"string"===typeof t||t&&"object"===typeof t}function z(t){return"string"===typeof t||"symbol"===typeof t}const H={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},K=i("nf");var J;(function(t){t[t["aborted"]=4]="aborted",t[t["cancelled"]=8]="cancelled",t[t["duplicated"]=16]="duplicated"})(J||(J={}));function Y(t,e){return p(new Error,{type:t,[K]:!0},e)}function Q(t,e){return t instanceof Error&&K in t&&(null==e||!!(t.type&e))}const X="[^/]+?",Z={sensitive:!1,strict:!1,start:!0,end:!0},tt=/[.+*?^${}()[\]/\\]/g;function et(t,e){const n=p({},Z,e);let r=[],o=n.start?"^":"";const i=[];for(const l of t){const t=l.length?[]:[90];n.strict&&!l.length&&(o+="/");for(let e=0;e<l.length;e++){const r=l[e];let c=40+(n.sensitive?.25:0);if(0===r.type)e||(o+="/"),o+=r.value.replace(tt,"\\$&"),c+=40;else if(1===r.type){const{value:t,repeatable:n,optional:s,regexp:a}=r;i.push({name:t,repeatable:n,optional:s});const l=a||X;if(l!==X){c+=10;try{new RegExp(`(${l})`)}catch(u){throw new Error(`Invalid custom RegExp for param "${t}" (${l}): `+u.message)}}let f=n?`((?:${l})(?:/(?:${l}))*)`:`(${l})`;e||(f=s?`(?:/${f})`:"/"+f),s&&(f+="?"),o+=f,c+=20,s&&(c+=-8),n&&(c+=-20),".*"===l&&(c+=-50)}t.push(c)}r.push(t)}if(n.strict&&n.end){const t=r.length-1;r[t][r[t].length-1]+=.7000000000000001}n.strict||(o+="/?"),n.end?o+="$":n.strict&&(o+="(?:/|$)");const c=new RegExp(o,n.sensitive?"":"i");function s(t){const e=t.match(c),n={};if(!e)return null;for(let r=1;r<e.length;r++){const t=e[r]||"",o=i[r-1];n[o.name]=t&&o.repeatable?t.split("/"):t}return n}function a(e){let n="",r=!1;for(const o of t){r&&n.endsWith("/")||(n+="/"),r=!1;for(const t of o)if(0===t.type)n+=t.value;else if(1===t.type){const{value:o,repeatable:i,optional:c}=t,s=o in e?e[o]:"";if(Array.isArray(s)&&!i)throw new Error(`Provided param "${o}" is an array but it is not repeatable (* or + modifiers)`);const a=Array.isArray(s)?s.join("/"):s;if(!a){if(!c)throw new Error(`Missing required param "${o}"`);n.endsWith("/")?n=n.slice(0,-1):r=!0}n+=a}}return n}return{re:c,score:r,keys:i,parse:s,stringify:a}}function nt(t,e){let n=0;while(n<t.length&&n<e.length){const r=e[n]-t[n];if(r)return r;n++}return t.length<e.length?1===t.length&&80===t[0]?-1:1:t.length>e.length?1===e.length&&80===e[0]?1:-1:0}function rt(t,e){let n=0;const r=t.score,o=e.score;while(n<r.length&&n<o.length){const t=nt(r[n],o[n]);if(t)return t;n++}return o.length-r.length}const ot={type:0,value:""},it=/[a-zA-Z0-9_]/;function ct(t){if(!t)return[[]];if("/"===t)return[[ot]];if(!t.startsWith("/"))throw new Error(`Invalid path "${t}"`);function e(t){throw new Error(`ERR (${n})/"${u}": ${t}`)}let n=0,r=n;const o=[];let i;function c(){i&&o.push(i),i=[]}let s,a=0,u="",l="";function f(){u&&(0===n?i.push({type:0,value:u}):1===n||2===n||3===n?(i.length>1&&("*"===s||"+"===s)&&e(`A repeatable param (${u}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:u,regexp:l,repeatable:"*"===s||"+"===s,optional:"*"===s||"?"===s})):e("Invalid state to consume buffer"),u="")}function p(){u+=s}while(a<t.length)if(s=t[a++],"\\"!==s||2===n)switch(n){case 0:"/"===s?(u&&f(),c()):":"===s?(f(),n=1):p();break;case 4:p(),n=r;break;case 1:"("===s?(n=2,l=""):it.test(s)?p():(f(),n=0,"*"!==s&&"?"!==s&&"+"!==s&&a--);break;case 2:")"===s?"\\"==l[l.length-1]?l=l.slice(0,-1)+s:n=3:l+=s;break;case 3:f(),n=0,"*"!==s&&"?"!==s&&"+"!==s&&a--;break;default:e("Unknown state");break}else r=n,n=4;return 2===n&&e(`Unfinished custom RegExp for param "${u}"`),f(),c(),o}function st(t,e,n){const r=et(ct(t.path),n);const o=p(r,{record:t,parent:e,children:[],alias:[]});return e&&!o.record.aliasOf===!e.record.aliasOf&&e.children.push(o),o}function at(t,e){const n=[],r=new Map;function o(t){return r.get(t)}function i(t,n,r){let o=!r,s=lt(t);s.aliasOf=r&&r.record;const u=ht(e,t),l=[s];if("alias"in t){const e="string"===typeof t.alias?[t.alias]:t.alias;for(const t of e)l.push(p({},s,{components:r?r.record.components:s.components,path:t,aliasOf:r?r.record:s}))}let f,d;for(const e of l){let{path:l}=e;if(n&&"/"!==l[0]){let t=n.record.path,r="/"===t[t.length-1]?"":"/";e.path=n.record.path+(l&&r+l)}if(f=st(e,n,u),r?r.alias.push(f):(d=d||f,d!==f&&d.alias.push(f),o&&t.name&&!pt(f)&&c(t.name)),"children"in s){let t=s.children;for(let e=0;e<t.length;e++)i(t[e],f,r&&r.children[e])}r=r||f,a(f)}return d?()=>{c(d)}:h}function c(t){if(z(t)){const e=r.get(t);e&&(r.delete(t),n.splice(n.indexOf(e),1),e.children.forEach(c),e.alias.forEach(c))}else{let e=n.indexOf(t);e>-1&&(n.splice(e,1),t.record.name&&r.delete(t.record.name),t.children.forEach(c),t.alias.forEach(c))}}function s(){return n}function a(t){let e=0;while(e<n.length&&rt(t,n[e])>=0)e++;n.splice(e,0,t),t.record.name&&!pt(t)&&r.set(t.record.name,t)}function u(t,e){let o,i,c,s={};if("name"in t&&t.name){if(o=r.get(t.name),!o)throw Y(1,{location:t});c=o.record.name,s=p(ut(e.params,o.keys.filter(t=>!t.optional).map(t=>t.name)),t.params),i=o.stringify(s)}else if("path"in t)i=t.path,o=n.find(t=>t.re.test(i)),o&&(s=o.parse(i),c=o.record.name);else{if(o=e.name?r.get(e.name):n.find(t=>t.re.test(e.path)),!o)throw Y(1,{location:t,currentLocation:e});c=o.record.name,s=p({},e.params,t.params),i=o.stringify(s)}const a=[];let u=o;while(u)a.unshift(u.record),u=u.parent;return{name:c,path:i,params:s,matched:a,meta:dt(a)}}return e=ht({strict:!1,end:!0,sensitive:!1},e),t.forEach(t=>i(t)),{addRoute:i,resolve:u,removeRoute:c,getRoutes:s,getRecordMatcher:o}}function ut(t,e){let n={};for(let r of e)r in t&&(n[r]=t[r]);return n}function lt(t){return{path:t.path,redirect:t.redirect,name:t.name,meta:t.meta||{},aliasOf:void 0,beforeEnter:t.beforeEnter,props:ft(t),children:t.children||[],instances:{},leaveGuards:[],updateGuards:[],enterCallbacks:{},components:"components"in t?t.components||{}:{default:t.component}}}function ft(t){const e={},n=t.props||!1;if("component"in t)e.default=n;else for(let r in t.components)e[r]="boolean"===typeof n?n:n[r];return e}function pt(t){while(t){if(t.record.aliasOf)return!0;t=t.parent}return!1}function dt(t){return t.reduce((t,e)=>p(t,e.meta),{})}function ht(t,e){let n={};for(let r in t)n[r]=r in e?e[r]:t[r];return n}const vt=/#/g,bt=/&/g,mt=/\//g,gt=/=/g,yt=/\?/g,Ot=/%5B/g,jt=/%5D/g,wt=/%5E/g,_t=/%60/g,xt=/%7B/g,St=/%7C/g,kt=/%7D/g;function Ct(t){return encodeURI(""+t).replace(St,"|").replace(Ot,"[").replace(jt,"]")}function Et(t){return Ct(t).replace(xt,"{").replace(kt,"}").replace(wt,"^")}function At(t){return Ct(t).replace(vt,"%23").replace(bt,"%26").replace(_t,"`").replace(xt,"{").replace(kt,"}").replace(wt,"^")}function Pt(t){return At(t).replace(gt,"%3D")}function Mt(t){return Ct(t).replace(vt,"%23").replace(yt,"%3F")}function Tt(t){return Mt(t).replace(mt,"%2F")}function Lt(t){try{return decodeURIComponent(""+t)}catch(e){}return""+t}function Rt(t){const e={};if(""===t||"?"===t)return e;const n="?"===t[0],r=(n?t.slice(1):t).split("&");for(let o=0;o<r.length;++o){const t=r[o];let n=t.indexOf("="),i=Lt(n<0?t:t.slice(0,n)),c=n<0?null:Lt(t.slice(n+1));if(i in e){let t=e[i];Array.isArray(t)||(t=e[i]=[t]),t.push(c)}else e[i]=c}return e}function Ft(t){let e="";for(let n in t){e.length&&(e+="&");const r=t[n];if(n=Pt(n),null==r){void 0!==r&&(e+=n);continue}let o=Array.isArray(r)?r.map(t=>t&&At(t)):[r&&At(r)];for(let t=0;t<o.length;t++)e+=(t?"&":"")+n,null!=o[t]&&(e+="="+o[t])}return e}function It(t){const e={};for(let n in t){let r=t[n];void 0!==r&&(e[n]=Array.isArray(r)?r.map(t=>null==t?null:""+t):null==r?r:""+r)}return e}function $t(){let t=[];function e(e){return t.push(e),()=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)}}function n(){t=[]}return{add:e,list:()=>t,reset:n}}function Nt(t,e,n,r,o){const i=r&&(r.enterCallbacks[o]=r.enterCallbacks[o]||[]);return()=>new Promise((c,s)=>{const a=t=>{!1===t?s(Y(4,{from:n,to:e})):t instanceof Error?s(t):q(t)?s(Y(2,{from:e,to:t})):(i&&r.enterCallbacks[o]===i&&"function"===typeof t&&i.push(t),c())},u=t.call(r&&r.instances[o],e,n,a);let l=Promise.resolve(u);t.length<3&&(l=l.then(a)),l.catch(t=>s(t))})}function Bt(t,e,n,r){const o=[];for(const i of t)for(const t in i.components){let c=i.components[t];if("beforeRouteEnter"===e||i.instances[t])if(Ut(c)){let s=c.__vccOpts||c;const a=s[e];a&&o.push(Nt(a,n,r,i,t))}else{let s=c();s=s.catch(console.error),o.push(()=>s.then(o=>{if(!o)return Promise.reject(new Error(`Couldn't resolve component "${t}" at "${i.path}"`));const c=f(o)?o.default:o;i.components[t]=c;const s=c[e];return s&&Nt(s,n,r,i,t)()}))}}return o}function Ut(t){return"object"===typeof t||"displayName"in t||"props"in t||"__vccOpts"in t}function Vt(t){const e=Object(r["l"])(a),n=Object(r["l"])(u),o=Object(r["b"])(()=>e.resolve(Object(r["A"])(t.to))),i=Object(r["b"])(()=>{let{matched:t}=o.value,{length:e}=t;const r=t[e-1];let i=n.matched;if(!r||!i.length)return-1;let c=i.findIndex(j.bind(null,r));if(c>-1)return c;let s=zt(t[e-2]);return e>1&&zt(r)===s&&i[i.length-1].path!==s?i.findIndex(j.bind(null,t[e-2])):c}),c=Object(r["b"])(()=>i.value>-1&&qt(n.params,o.value.params)),s=Object(r["b"])(()=>i.value>-1&&i.value===n.matched.length-1&&w(n.params,o.value.params));function l(n={}){return Wt(n)?e[Object(r["A"])(t.replace)?"replace":"push"](Object(r["A"])(t.to)):Promise.resolve()}return{route:o,href:Object(r["b"])(()=>o.value.href),isActive:c,isExactActive:s,navigate:l}}const Gt=Object(r["i"])({name:"RouterLink",props:{to:{type:[String,Object],required:!0},activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},setup(t,{slots:e,attrs:n}){const o=Object(r["u"])(Vt(t)),{options:i}=Object(r["l"])(a),c=Object(r["b"])(()=>({[Ht(t.activeClass,i.linkActiveClass,"router-link-active")]:o.isActive,[Ht(t.exactActiveClass,i.linkExactActiveClass,"router-link-exact-active")]:o.isExactActive}));return()=>{const i=e.default&&e.default(o);return t.custom?i:Object(r["k"])("a",p({"aria-current":o.isExactActive?t.ariaCurrentValue:null,onClick:o.navigate,href:o.href},n,{class:c.value}),i)}}}),Dt=Gt;function Wt(t){if(!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)&&!t.defaultPrevented&&(void 0===t.button||0===t.button)){if(t.currentTarget&&t.currentTarget.getAttribute){const e=t.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return t.preventDefault&&t.preventDefault(),!0}}function qt(t,e){for(let n in e){let r=e[n],o=t[n];if("string"===typeof r){if(r!==o)return!1}else if(!Array.isArray(o)||o.length!==r.length||r.some((t,e)=>t!==o[e]))return!1}return!0}function zt(t){return t?t.aliasOf?t.aliasOf.path:t.path:""}const Ht=(t,e,n)=>null!=t?t:null!=e?e:n,Kt=Object(r["i"])({name:"RouterView",props:{name:{type:String,default:"default"},route:Object},setup(t,{attrs:e,slots:n}){const o=Object(r["l"])(u),i=Object(r["l"])(s,0),a=Object(r["b"])(()=>(t.route||o).matched[i]);Object(r["s"])(s,i+1),Object(r["s"])(c,a);const l=Object(r["v"])();return Object(r["C"])(()=>[l.value,a.value,t.name],([t,e,n],[r,o,i])=>{e&&(e.instances[n]=t,o&&t===r&&(e.leaveGuards=o.leaveGuards,e.updateGuards=o.updateGuards)),!t||!e||o&&j(e,o)&&r||(e.enterCallbacks[n]||[]).forEach(e=>e(t))},{flush:"post"}),()=>{const i=t.route||o,c=a.value,s=c&&c.components[t.name],u=t.name;if(!s)return n.default?n.default({Component:s,route:i}):null;const f=c.props[t.name],d=f?!0===f?i.params:"function"===typeof f?f(i):f:null,h=t=>{t.component.isUnmounted&&(c.instances[u]=null)},v=Object(r["k"])(s,p({},d,e,{onVnodeUnmounted:h,ref:l}));return n.default?n.default({Component:v,route:i}):v}}}),Jt=Kt;function Yt(t){const e=at(t.routes,t);let n=t.parseQuery||Rt,o=t.stringifyQuery||Ft,{scrollBehavior:i}=t,c=t.history;const s=$t(),f=$t(),v=$t(),b=Object(r["y"])(H);let y=H;l&&i&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const j=d.bind(null,t=>""+t),w=d.bind(null,Tt),_=d.bind(null,Lt);function x(t,n){let r,o;return z(t)?(r=e.getRecordMatcher(t),o=n):o=t,e.addRoute(o,r)}function S(t){let n=e.getRecordMatcher(t);n&&e.removeRoute(n)}function k(){return e.getRoutes().map(t=>t.record)}function C(t){return!!e.getRecordMatcher(t)}function E(t,r){if(r=p({},r||b.value),"string"===typeof t){let o=m(n,t,r.path),i=e.resolve({path:o.path},r),s=c.createHref(o.fullPath);return p(o,i,{params:_(i.params),hash:Lt(o.hash),redirectedFrom:void 0,href:s})}let i;"path"in t?i=p({},t,{path:m(n,t.path,r.path).path}):(i=p({},t,{params:w(t.params)}),r.params=w(r.params));let s=e.resolve(i,r);const a=t.hash||"";s.params=j(_(s.params));const u=g(o,p({},t,{hash:Et(a),path:s.path}));let l=c.createHref(u);return p({fullPath:u,hash:a,query:o===Ft?It(t.query):t.query},s,{redirectedFrom:void 0,href:l})}function A(t){return"string"===typeof t?{path:t}:p({},t)}function P(t,e){if(y!==t)return Y(8,{from:e,to:t})}function M(t){return N(t)}function F(t){return M(p(A(t),{replace:!0}))}function N(t,e){const n=y=E(t),r=b.value,i=t.state,c=t.force,s=!0===t.replace,a=n.matched[n.matched.length-1];if(a&&a.redirect){const{redirect:t}=a;let r=A("function"===typeof t?t(n):t);return N(p({query:n.query,hash:n.hash,params:n.params},r,{state:i,force:c,replace:s}),e||n)}const u=n;let l;return u.redirectedFrom=e,!c&&O(o,r,n)&&(l=Y(16,{to:u,from:r}),et(r,r,!0,!1)),(l?Promise.resolve(l):U(u,r)).catch(t=>Q(t,14)?t:X(t)).then(t=>{if(t){if(Q(t,2))return N(p(A(t.to),{state:i,force:c,replace:s}),e||u)}else t=G(u,r,!0,s,i);return V(u,r,t),t})}function B(t,e){const n=P(t,e);return n?Promise.reject(n):Promise.resolve()}function U(t,e){let n;const[r,o,i]=Xt(t,e);n=Bt(r.reverse(),"beforeRouteLeave",t,e);for(const s of r)for(const r of s.leaveGuards)n.push(Nt(r,t,e));const c=B.bind(null,t,e);return n.push(c),Qt(n).then(()=>{n=[];for(const r of s.list())n.push(Nt(r,t,e));return n.push(c),Qt(n)}).then(()=>{n=Bt(o,"beforeRouteUpdate",t,e);for(const r of o)for(const o of r.updateGuards)n.push(Nt(o,t,e));return n.push(c),Qt(n)}).then(()=>{n=[];for(const r of t.matched)if(r.beforeEnter&&e.matched.indexOf(r)<0)if(Array.isArray(r.beforeEnter))for(const o of r.beforeEnter)n.push(Nt(o,t,e));else n.push(Nt(r.beforeEnter,t,e));return n.push(c),Qt(n)}).then(()=>(t.matched.forEach(t=>t.enterCallbacks={}),n=Bt(i,"beforeRouteEnter",t,e),n.push(c),Qt(n))).then(()=>{n=[];for(const r of f.list())n.push(Nt(r,t,e));return n.push(c),Qt(n)}).catch(t=>Q(t,8)?t:Promise.reject(t))}function V(t,e,n){for(const r of v.list())r(t,e,n)}function G(t,e,n,r,o){const i=P(t,e);if(i)return i;const s=e===H,a=l?history.state:{};n&&(r||s?c.replace(t.fullPath,p({scroll:s&&a&&a.scroll},o)):c.push(t.fullPath,o)),b.value=t,et(t,e,n,s),tt()}let D;function W(){D=c.listen((t,e,n)=>{const r=E(t);y=r;const o=b.value;l&&I(R(o.fullPath,n.delta),T()),U(r,o).catch(t=>Q(t,12)?t:Q(t,2)?(n.delta&&c.go(-n.delta,!1),N(t.to,r).catch(h),Promise.reject()):(n.delta&&c.go(-n.delta,!1),X(t))).then(t=>{t=t||G(r,o,!1),t&&n.delta&&c.go(-n.delta,!1),V(r,o,t)}).catch(h)})}let q,K=$t(),J=$t();function X(t){return tt(t),J.list().forEach(e=>e(t)),Promise.reject(t)}function Z(){return q&&b.value!==H?Promise.resolve():new Promise((t,e)=>{K.add([t,e])})}function tt(t){q||(q=!0,W(),K.list().forEach(([e,n])=>t?n(t):e()),K.reset())}function et(t,e,n,o){if(!l||!i)return Promise.resolve();let c=!n&&$(R(t.fullPath,0))||(o||!n)&&history.state&&history.state.scroll||null;return Object(r["m"])().then(()=>i(t,e,c)).then(t=>t&&L(t)).catch(X)}const nt=t=>c.go(t);let rt;const ot=new Set,it={currentRoute:b,addRoute:x,removeRoute:S,hasRoute:C,getRoutes:k,resolve:E,options:t,push:M,replace:F,go:nt,back:()=>nt(-1),forward:()=>nt(1),beforeEach:s.add,beforeResolve:f.add,afterEach:v.add,onError:J.add,isReady:Z,install(t){const e=this;t.component("RouterLink",Dt),t.component("RouterView",Jt),t.config.globalProperties.$router=e,Object.defineProperty(t.config.globalProperties,"$route",{get:()=>Object(r["A"])(b)}),l&&!rt&&b.value===H&&(rt=!0,M(c.location).catch(t=>{0}));const n={};for(let i in H)n[i]=Object(r["b"])(()=>b.value[i]);t.provide(a,e),t.provide(u,Object(r["u"])(n));let o=t.unmount;ot.add(t),t.unmount=function(){ot.delete(t),ot.size<1&&(D(),b.value=H,rt=!1,q=!1),o.call(this,arguments)}}};return it}function Qt(t){return t.reduce((t,e)=>t.then(()=>e()),Promise.resolve())}function Xt(t,e){const n=[],r=[],o=[],i=Math.max(e.matched.length,t.matched.length);for(let c=0;c<i;c++){const i=e.matched[c];i&&(t.matched.indexOf(i)<0?n.push(i):r.push(i));const s=t.matched[c];s&&e.matched.indexOf(s)<0&&o.push(s)}return[n,r,o]}},"6eeb":function(t,e,n){var r=n("da84"),o=n("9112"),i=n("5135"),c=n("ce4e"),s=n("8925"),a=n("69f3"),u=a.get,l=a.enforce,f=String(String).split("String");(t.exports=function(t,e,n,s){var a=!!s&&!!s.unsafe,u=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),l(n).source=f.join("string"==typeof e?e:"")),t!==r?(a?!p&&t[e]&&(u=!0):delete t[e],u?t[e]=n:o(t,e,n)):u?t[e]=n:c(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},7418:function(t,e){e.f=Object.getOwnPropertySymbols},"746f":function(t,e,n){var r=n("428f"),o=n("5135"),i=n("e538"),c=n("9bf2").f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||c(e,t,{value:i.f(t)})}},7839:function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},"7a23":function(t,e,n){"use strict";n.d(e,"u",(function(){return lt})),n.d(e,"v",(function(){return Ot})),n.d(e,"y",(function(){return jt})),n.d(e,"A",(function(){return xt})),n.d(e,"z",(function(){return r["J"]})),n.d(e,"a",(function(){return zn})),n.d(e,"b",(function(){return Kr})),n.d(e,"d",(function(){return er})),n.d(e,"e",(function(){return pr})),n.d(e,"f",(function(){return fr})),n.d(e,"g",(function(){return lr})),n.d(e,"h",(function(){return sr})),n.d(e,"i",(function(){return Jr})),n.d(e,"j",(function(){return $r})),n.d(e,"k",(function(){return Yr})),n.d(e,"l",(function(){return gr})),n.d(e,"m",(function(){return zt})),n.d(e,"n",(function(){return pn})),n.d(e,"o",(function(){return dn})),n.d(e,"p",(function(){return De})),n.d(e,"q",(function(){return Xn})),n.d(e,"r",(function(){return Se})),n.d(e,"s",(function(){return mr})),n.d(e,"t",(function(){return xe})),n.d(e,"w",(function(){return Qr})),n.d(e,"x",(function(){return Gn})),n.d(e,"C",(function(){return Ke})),n.d(e,"D",(function(){return je})),n.d(e,"E",(function(){return Sn})),n.d(e,"F",(function(){return ke})),n.d(e,"c",(function(){return Zo})),n.d(e,"B",(function(){return Jo}));var r=n("9ff4");const o=new WeakMap,i=[];let c;const s=Symbol(""),a=Symbol("");function u(t){return t&&!0===t._isEffect}function l(t,e=r["b"]){u(t)&&(t=t.raw);const n=d(t,e);return e.lazy||n(),n}function f(t){t.active&&(h(t),t.options.onStop&&t.options.onStop(),t.active=!1)}let p=0;function d(t,e){const n=function(){if(!n.active)return e.scheduler?void 0:t();if(!i.includes(n)){h(n);try{return g(),i.push(n),c=n,t()}finally{i.pop(),y(),c=i[i.length-1]}}};return n.id=p++,n.allowRecurse=!!e.allowRecurse,n._isEffect=!0,n.active=!0,n.raw=t,n.deps=[],n.options=e,n}function h(t){const{deps:e}=t;if(e.length){for(let n=0;n<e.length;n++)e[n].delete(t);e.length=0}}let v=!0;const b=[];function m(){b.push(v),v=!1}function g(){b.push(v),v=!0}function y(){const t=b.pop();v=void 0===t||t}function O(t,e,n){if(!v||void 0===c)return;let r=o.get(t);r||o.set(t,r=new Map);let i=r.get(n);i||r.set(n,i=new Set),i.has(c)||(i.add(c),c.deps.push(i))}function j(t,e,n,i,u,l){const f=o.get(t);if(!f)return;const p=new Set,d=t=>{t&&t.forEach(t=>{(t!==c||t.allowRecurse)&&p.add(t)})};if("clear"===e)f.forEach(d);else if("length"===n&&Object(r["n"])(t))f.forEach((t,e)=>{("length"===e||e>=i)&&d(t)});else switch(void 0!==n&&d(f.get(n)),e){case"add":Object(r["n"])(t)?Object(r["r"])(n)&&d(f.get("length")):(d(f.get(s)),Object(r["s"])(t)&&d(f.get(a)));break;case"delete":Object(r["n"])(t)||(d(f.get(s)),Object(r["s"])(t)&&d(f.get(a)));break;case"set":Object(r["s"])(t)&&d(f.get(s));break}const h=t=>{t.options.scheduler?t.options.scheduler(t):t()};p.forEach(h)}const w=new Set(Object.getOwnPropertyNames(Symbol).map(t=>Symbol[t]).filter(r["C"])),_=E(),x=E(!1,!0),S=E(!0),k=E(!0,!0),C={};function E(t=!1,e=!1){return function(n,o,i){if("__v_isReactive"===o)return!t;if("__v_isReadonly"===o)return t;if("__v_raw"===o&&i===(t?st:ct).get(n))return n;const c=Object(r["n"])(n);if(c&&Object(r["k"])(C,o))return Reflect.get(C,o,i);const s=Reflect.get(n,o,i);if(Object(r["C"])(o)?w.has(o):"__proto__"===o||"__v_isRef"===o)return s;if(t||O(n,"get",o),e)return s;if(yt(s)){const t=!c||!Object(r["r"])(o);return t?s.value:s}return Object(r["u"])(s)?t?pt(s):lt(s):s}}["includes","indexOf","lastIndexOf"].forEach(t=>{const e=Array.prototype[t];C[t]=function(...t){const n=mt(this);for(let e=0,o=this.length;e<o;e++)O(n,"get",e+"");const r=e.apply(n,t);return-1===r||!1===r?e.apply(n,t.map(mt)):r}}),["push","pop","shift","unshift","splice"].forEach(t=>{const e=Array.prototype[t];C[t]=function(...t){m();const n=e.apply(this,t);return y(),n}});const A=M(),P=M(!0);function M(t=!1){return function(e,n,o,i){const c=e[n];if(!t&&(o=mt(o),!Object(r["n"])(e)&&yt(c)&&!yt(o)))return c.value=o,!0;const s=Object(r["n"])(e)&&Object(r["r"])(n)?Number(n)<e.length:Object(r["k"])(e,n),a=Reflect.set(e,n,o,i);return e===mt(i)&&(s?Object(r["j"])(o,c)&&j(e,"set",n,o,c):j(e,"add",n,o)),a}}function T(t,e){const n=Object(r["k"])(t,e),o=t[e],i=Reflect.deleteProperty(t,e);return i&&n&&j(t,"delete",e,void 0,o),i}function L(t,e){const n=Reflect.has(t,e);return Object(r["C"])(e)&&w.has(e)||O(t,"has",e),n}function R(t){return O(t,"iterate",Object(r["n"])(t)?"length":s),Reflect.ownKeys(t)}const F={get:_,set:A,deleteProperty:T,has:L,ownKeys:R},I={get:S,set(t,e){return!0},deleteProperty(t,e){return!0}},$=Object(r["h"])({},F,{get:x,set:P}),N=(Object(r["h"])({},I,{get:k}),t=>Object(r["u"])(t)?lt(t):t),B=t=>Object(r["u"])(t)?pt(t):t,U=t=>t,V=t=>Reflect.getPrototypeOf(t);function G(t,e,n=!1,r=!1){t=t["__v_raw"];const o=mt(t),i=mt(e);e!==i&&!n&&O(o,"get",e),!n&&O(o,"get",i);const{has:c}=V(o),s=n?B:r?U:N;return c.call(o,e)?s(t.get(e)):c.call(o,i)?s(t.get(i)):void 0}function D(t,e=!1){const n=this["__v_raw"],r=mt(n),o=mt(t);return t!==o&&!e&&O(r,"has",t),!e&&O(r,"has",o),t===o?n.has(t):n.has(t)||n.has(o)}function W(t,e=!1){return t=t["__v_raw"],!e&&O(mt(t),"iterate",s),Reflect.get(t,"size",t)}function q(t){t=mt(t);const e=mt(this),n=V(e),r=n.has.call(e,t),o=e.add(t);return r||j(e,"add",t,t),o}function z(t,e){e=mt(e);const n=mt(this),{has:o,get:i}=V(n);let c=o.call(n,t);c||(t=mt(t),c=o.call(n,t));const s=i.call(n,t),a=n.set(t,e);return c?Object(r["j"])(e,s)&&j(n,"set",t,e,s):j(n,"add",t,e),a}function H(t){const e=mt(this),{has:n,get:r}=V(e);let o=n.call(e,t);o||(t=mt(t),o=n.call(e,t));const i=r?r.call(e,t):void 0,c=e.delete(t);return o&&j(e,"delete",t,void 0,i),c}function K(){const t=mt(this),e=0!==t.size,n=void 0,r=t.clear();return e&&j(t,"clear",void 0,void 0,n),r}function J(t,e){return function(n,r){const o=this,i=o["__v_raw"],c=mt(i),a=t?B:e?U:N;return!t&&O(c,"iterate",s),i.forEach((t,e)=>n.call(r,a(t),a(e),o))}}function Y(t,e,n){return function(...o){const i=this["__v_raw"],c=mt(i),u=Object(r["s"])(c),l="entries"===t||t===Symbol.iterator&&u,f="keys"===t&&u,p=i[t](...o),d=e?B:n?U:N;return!e&&O(c,"iterate",f?a:s),{next(){const{value:t,done:e}=p.next();return e?{value:t,done:e}:{value:l?[d(t[0]),d(t[1])]:d(t),done:e}},[Symbol.iterator](){return this}}}}function Q(t){return function(...e){return"delete"!==t&&this}}const X={get(t){return G(this,t)},get size(){return W(this)},has:D,add:q,set:z,delete:H,clear:K,forEach:J(!1,!1)},Z={get(t){return G(this,t,!1,!0)},get size(){return W(this)},has:D,add:q,set:z,delete:H,clear:K,forEach:J(!1,!0)},tt={get(t){return G(this,t,!0)},get size(){return W(this,!0)},has(t){return D.call(this,t,!0)},add:Q("add"),set:Q("set"),delete:Q("delete"),clear:Q("clear"),forEach:J(!0,!1)},et=["keys","values","entries",Symbol.iterator];function nt(t,e){const n=e?Z:t?tt:X;return(e,o,i)=>"__v_isReactive"===o?!t:"__v_isReadonly"===o?t:"__v_raw"===o?e:Reflect.get(Object(r["k"])(n,o)&&o in e?n:e,o,i)}et.forEach(t=>{X[t]=Y(t,!1,!1),tt[t]=Y(t,!0,!1),Z[t]=Y(t,!1,!0)});const rt={get:nt(!1,!1)},ot={get:nt(!1,!0)},it={get:nt(!0,!1)};const ct=new WeakMap,st=new WeakMap;function at(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function ut(t){return t["__v_skip"]||!Object.isExtensible(t)?0:at(Object(r["M"])(t))}function lt(t){return t&&t["__v_isReadonly"]?t:dt(t,!1,F,rt)}function ft(t){return dt(t,!1,$,ot)}function pt(t){return dt(t,!0,I,it)}function dt(t,e,n,o){if(!Object(r["u"])(t))return t;if(t["__v_raw"]&&(!e||!t["__v_isReactive"]))return t;const i=e?st:ct,c=i.get(t);if(c)return c;const s=ut(t);if(0===s)return t;const a=new Proxy(t,2===s?o:n);return i.set(t,a),a}function ht(t){return vt(t)?ht(t["__v_raw"]):!(!t||!t["__v_isReactive"])}function vt(t){return!(!t||!t["__v_isReadonly"])}function bt(t){return ht(t)||vt(t)}function mt(t){return t&&mt(t["__v_raw"])||t}const gt=t=>Object(r["u"])(t)?lt(t):t;function yt(t){return Boolean(t&&!0===t.__v_isRef)}function Ot(t){return _t(t)}function jt(t){return _t(t,!0)}class wt{constructor(t,e=!1){this._rawValue=t,this._shallow=e,this.__v_isRef=!0,this._value=e?t:gt(t)}get value(){return O(mt(this),"get","value"),this._value}set value(t){Object(r["j"])(mt(t),this._rawValue)&&(this._rawValue=t,this._value=this._shallow?t:gt(t),j(mt(this),"set","value",t))}}function _t(t,e=!1){return yt(t)?t:new wt(t,e)}function xt(t){return yt(t)?t.value:t}const St={get:(t,e,n)=>xt(Reflect.get(t,e,n)),set:(t,e,n,r)=>{const o=t[e];return yt(o)&&!yt(n)?(o.value=n,!0):Reflect.set(t,e,n,r)}};function kt(t){return ht(t)?t:new Proxy(t,St)}class Ct{constructor(t,e,n){this._setter=e,this._dirty=!0,this.__v_isRef=!0,this.effect=l(t,{lazy:!0,scheduler:()=>{this._dirty||(this._dirty=!0,j(mt(this),"set","value"))}}),this["__v_isReadonly"]=n}get value(){return this._dirty&&(this._value=this.effect(),this._dirty=!1),O(mt(this),"get","value"),this._value}set value(t){this._setter(t)}}function Et(t){let e,n;return Object(r["o"])(t)?(e=t,n=r["d"]):(e=t.get,n=t.set),new Ct(e,n,Object(r["o"])(t)||!t.set)}function At(t,e,n,r){let o;try{o=r?t(...r):t()}catch(i){Mt(i,e,n)}return o}function Pt(t,e,n,o){if(Object(r["o"])(t)){const i=At(t,e,n,o);return i&&Object(r["w"])(i)&&i.catch(t=>{Mt(t,e,n)}),i}const i=[];for(let r=0;r<t.length;r++)i.push(Pt(t[r],e,n,o));return i}function Mt(t,e,n,r=!0){const o=e?e.vnode:null;if(e){let r=e.parent;const o=e.proxy,i=n;while(r){const e=r.ec;if(e)for(let n=0;n<e.length;n++)if(!1===e[n](t,o,i))return;r=r.parent}const c=e.appContext.config.errorHandler;if(c)return void At(c,null,10,[t,o,i])}Tt(t,n,o,r)}function Tt(t,e,n,r=!0){console.error(t)}let Lt=!1,Rt=!1;const Ft=[];let It=0;const $t=[];let Nt=null,Bt=0;const Ut=[];let Vt=null,Gt=0;const Dt=Promise.resolve();let Wt=null,qt=null;function zt(t){const e=Wt||Dt;return t?e.then(this?t.bind(this):t):e}function Ht(t){Ft.length&&Ft.includes(t,Lt&&t.allowRecurse?It+1:It)||t===qt||(Ft.push(t),Kt())}function Kt(){Lt||Rt||(Rt=!0,Wt=Dt.then(ne))}function Jt(t){const e=Ft.indexOf(t);e>-1&&(Ft[e]=null)}function Yt(t,e,n,o){Object(r["n"])(t)?n.push(...t):e&&e.includes(t,t.allowRecurse?o+1:o)||n.push(t),Kt()}function Qt(t){Yt(t,Nt,$t,Bt)}function Xt(t){Yt(t,Vt,Ut,Gt)}function Zt(t,e=null){if($t.length){for(qt=e,Nt=[...new Set($t)],$t.length=0,Bt=0;Bt<Nt.length;Bt++)Nt[Bt]();Nt=null,Bt=0,qt=null,Zt(t,e)}}function te(t){if(Ut.length){const t=[...new Set(Ut)];if(Ut.length=0,Vt)return void Vt.push(...t);for(Vt=t,Vt.sort((t,e)=>ee(t)-ee(e)),Gt=0;Gt<Vt.length;Gt++)Vt[Gt]();Vt=null,Gt=0}}const ee=t=>null==t.id?1/0:t.id;function ne(t){Rt=!1,Lt=!0,Zt(t),Ft.sort((t,e)=>ee(t)-ee(e));try{for(It=0;It<Ft.length;It++){const t=Ft[It];t&&At(t,null,14)}}finally{It=0,Ft.length=0,te(t),Lt=!1,Wt=null,(Ft.length||Ut.length)&&ne(t)}}new Set;new Map;function re(t,e,...n){const o=t.vnode.props||r["b"];let i=n;const c=e.startsWith("update:"),s=c&&e.slice(7);if(s&&s in o){const t=("modelValue"===s?"model":s)+"Modifiers",{number:e,trim:c}=o[t]||r["b"];c?i=n.map(t=>t.trim()):e&&(i=n.map(r["L"]))}let a=Object(r["K"])(Object(r["e"])(e)),u=o[a];!u&&c&&(a=Object(r["K"])(Object(r["l"])(e)),u=o[a]),u&&Pt(u,t,6,i);const l=o[a+"Once"];if(l){if(t.emitted){if(t.emitted[a])return}else(t.emitted={})[a]=!0;Pt(l,t,6,i)}}function oe(t,e,n=!1){if(!e.deopt&&void 0!==t.__emits)return t.__emits;const o=t.emits;let i={},c=!1;if(!Object(r["o"])(t)){const o=t=>{c=!0,Object(r["h"])(i,oe(t,e,!0))};!n&&e.mixins.length&&e.mixins.forEach(o),t.extends&&o(t.extends),t.mixins&&t.mixins.forEach(o)}return o||c?(Object(r["n"])(o)?o.forEach(t=>i[t]=null):Object(r["h"])(i,o),t.__emits=i):t.__emits=null}function ie(t,e){return!(!t||!Object(r["v"])(e))&&(e=e.replace(/Once$/,""),Object(r["k"])(t,e[2].toLowerCase()+e.slice(3))||Object(r["k"])(t,e.slice(2)))}let ce=null;function se(t){ce=t}function ae(t){const{type:e,vnode:n,proxy:o,withProxy:i,props:c,propsOptions:[s],slots:a,attrs:u,emit:l,render:f,renderCache:p,data:d,setupState:h,ctx:v}=t;let b;ce=t;try{let t;if(4&n.shapeFlag){const e=i||o;b=dr(f.call(e,e,p,c,h,d,v)),t=u}else{const n=e;0,b=dr(n.length>1?n(c,{attrs:u,slots:a,emit:l}):n(c,null)),t=e.props?u:le(u)}let m=b;if(!1!==e.inheritAttrs&&t){const e=Object.keys(t),{shapeFlag:n}=m;e.length&&(1&n||6&n)&&(s&&e.some(r["t"])&&(t=fe(t,s)),m=ur(m,t))}n.dirs&&(m.dirs=m.dirs?m.dirs.concat(n.dirs):n.dirs),n.transition&&(m.transition=n.transition),b=m}catch(m){Mt(m,t,1),b=sr(Kn)}return ce=null,b}function ue(t){const e=t.filter(t=>!(nr(t)&&t.type===Kn&&"v-if"!==t.children));return 1===e.length&&nr(e[0])?e[0]:null}const le=t=>{let e;for(const n in t)("class"===n||"style"===n||Object(r["v"])(n))&&((e||(e={}))[n]=t[n]);return e},fe=(t,e)=>{const n={};for(const o in t)Object(r["t"])(o)&&o.slice(9)in e||(n[o]=t[o]);return n};function pe(t,e,n){const{props:r,children:o,component:i}=t,{props:c,children:s,patchFlag:a}=e,u=i.emitsOptions;if(e.dirs||e.transition)return!0;if(!(n&&a>0))return!(!o&&!s||s&&s.$stable)||r!==c&&(r?!c||de(r,c,u):!!c);if(1024&a)return!0;if(16&a)return r?de(r,c,u):!!c;if(8&a){const t=e.dynamicProps;for(let e=0;e<t.length;e++){const n=t[e];if(c[n]!==r[n]&&!ie(u,n))return!0}}return!1}function de(t,e,n){const r=Object.keys(e);if(r.length!==Object.keys(t).length)return!0;for(let o=0;o<r.length;o++){const i=r[o];if(e[i]!==t[i]&&!ie(n,i))return!0}return!1}function he({vnode:t,parent:e},n){while(e&&e.subTree===t)(t=e.vnode).el=n,e=e.parent}const ve=t=>t.__isSuspense;function be(t){const{shapeFlag:e,children:n}=t;let r,o;return 32&e?(r=me(n.default),o=me(n.fallback)):(r=me(n),o=dr(null)),{content:r,fallback:o}}function me(t){if(Object(r["o"])(t)&&(t=t()),Object(r["n"])(t)){const e=ue(t);0,t=e}return dr(t)}function ge(t,e){e&&e.pendingBranch?Object(r["n"])(t)?e.effects.push(...t):e.effects.push(t):Xt(t)}let ye=0;const Oe=t=>ye+=t;function je(t,e=ce){if(!e)return t;const n=(...n)=>{ye||Xn(!0);const r=ce;se(e);const o=t(...n);return se(r),ye||Zn(),o};return n._c=!0,n}let we=null;const _e=[];function xe(t){_e.push(we=t)}function Se(){_e.pop(),we=_e[_e.length-1]||null}function ke(t){return e=>je((function(){xe(t);const n=e.apply(this,arguments);return Se(),n}))}function Ce(t,e,n,o=!1){const i={},c={};Object(r["g"])(c,or,1),Ae(t,e,i,c),n?t.props=o?i:ft(i):t.type.props?t.props=i:t.props=c,t.attrs=c}function Ee(t,e,n,o){const{props:i,attrs:c,vnode:{patchFlag:s}}=t,a=mt(i),[u]=t.propsOptions;if(!(o||s>0)||16&s){let o;Ae(t,e,i,c);for(const c in a)e&&(Object(r["k"])(e,c)||(o=Object(r["l"])(c))!==c&&Object(r["k"])(e,o))||(u?!n||void 0===n[c]&&void 0===n[o]||(i[c]=Pe(u,e||r["b"],c,void 0,t)):delete i[c]);if(c!==a)for(const t in c)e&&Object(r["k"])(e,t)||delete c[t]}else if(8&s){const n=t.vnode.dynamicProps;for(let o=0;o<n.length;o++){const s=n[o],l=e[s];if(u)if(Object(r["k"])(c,s))c[s]=l;else{const e=Object(r["e"])(s);i[e]=Pe(u,a,e,l,t)}else c[s]=l}}j(t,"set","$attrs")}function Ae(t,e,n,o){const[i,c]=t.propsOptions;if(e)for(const s in e){const c=e[s];if(Object(r["x"])(s))continue;let a;i&&Object(r["k"])(i,a=Object(r["e"])(s))?n[a]=c:ie(t.emitsOptions,s)||(o[s]=c)}if(c){const e=mt(n);for(let r=0;r<c.length;r++){const o=c[r];n[o]=Pe(i,e,o,e[o],t)}}}function Pe(t,e,n,o,i){const c=t[n];if(null!=c){const t=Object(r["k"])(c,"default");if(t&&void 0===o){const t=c.default;c.type!==Function&&Object(r["o"])(t)?(Nr(i),o=t(e),Nr(null)):o=t}c[0]&&(Object(r["k"])(e,n)||t?!c[1]||""!==o&&o!==Object(r["l"])(n)||(o=!0):o=!1)}return o}function Me(t,e,n=!1){if(!e.deopt&&t.__props)return t.__props;const o=t.props,i={},c=[];let s=!1;if(!Object(r["o"])(t)){const o=t=>{s=!0;const[n,o]=Me(t,e,!0);Object(r["h"])(i,n),o&&c.push(...o)};!n&&e.mixins.length&&e.mixins.forEach(o),t.extends&&o(t.extends),t.mixins&&t.mixins.forEach(o)}if(!o&&!s)return t.__props=r["a"];if(Object(r["n"])(o))for(let a=0;a<o.length;a++){0;const t=Object(r["e"])(o[a]);Te(t)&&(i[t]=r["b"])}else if(o){0;for(const t in o){const e=Object(r["e"])(t);if(Te(e)){const n=o[t],s=i[e]=Object(r["n"])(n)||Object(r["o"])(n)?{type:n}:n;if(s){const t=Fe(Boolean,s.type),n=Fe(String,s.type);s[0]=t>-1,s[1]=n<0||t<n,(t>-1||Object(r["k"])(s,"default"))&&c.push(e)}}}}return t.__props=[i,c]}function Te(t){return"$"!==t[0]}function Le(t){const e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Re(t,e){return Le(t)===Le(e)}function Fe(t,e){if(Object(r["n"])(e)){for(let n=0,r=e.length;n<r;n++)if(Re(e[n],t))return n}else if(Object(r["o"])(e))return Re(e,t)?0:-1;return-1}function Ie(t,e,n=Ir,r=!1){if(n){const o=n[t]||(n[t]=[]),i=e.__weh||(e.__weh=(...r)=>{if(n.isUnmounted)return;m(),Nr(n);const o=Pt(e,n,t,r);return Nr(null),y(),o});return r?o.unshift(i):o.push(i),i}}const $e=t=>(e,n=Ir)=>!Ur&&Ie(t,e,n),Ne=$e("bm"),Be=$e("m"),Ue=$e("bu"),Ve=$e("u"),Ge=$e("bum"),De=$e("um"),We=$e("rtg"),qe=$e("rtc"),ze=(t,e=Ir)=>{Ie("ec",t,e)};const He={};function Ke(t,e,n){return Je(t,e,n)}function Je(t,e,{immediate:n,deep:o,flush:i,onTrack:c,onTrigger:s}=r["b"],a=Ir){let u,p,d=!1;if(yt(t)?(u=()=>t.value,d=!!t._shallow):ht(t)?(u=()=>t,o=!0):u=Object(r["n"])(t)?()=>t.map(t=>yt(t)?t.value:ht(t)?Qe(t):Object(r["o"])(t)?At(t,a,2):void 0):Object(r["o"])(t)?e?()=>At(t,a,2):()=>{if(!a||!a.isUnmounted)return p&&p(),At(t,a,3,[h])}:r["d"],e&&o){const t=u;u=()=>Qe(t())}const h=t=>{p=g.options.onStop=()=>{At(t,a,4)}};let v=Object(r["n"])(t)?[]:He;const b=()=>{if(g.active)if(e){const t=g();(o||d||Object(r["j"])(t,v))&&(p&&p(),Pt(e,a,3,[t,v===He?void 0:v,h]),v=t)}else g()};let m;b.allowRecurse=!!e,m="sync"===i?b:"post"===i?()=>Tn(b,a&&a.suspense):()=>{!a||a.isMounted?Qt(b):b()};const g=l(u,{lazy:!0,onTrack:c,onTrigger:s,scheduler:m});return zr(g),e?n?b():v=g():"post"===i?Tn(g,a&&a.suspense):g(),()=>{f(g),a&&Object(r["I"])(a.effects,g)}}function Ye(t,e,n){const o=this.proxy,i=Object(r["B"])(t)?()=>o[t]:t.bind(o);return Je(i,e.bind(o),n,this)}function Qe(t,e=new Set){if(!Object(r["u"])(t)||e.has(t))return t;if(e.add(t),yt(t))Qe(t.value,e);else if(Object(r["n"])(t))for(let n=0;n<t.length;n++)Qe(t[n],e);else if(Object(r["z"])(t)||Object(r["s"])(t))t.forEach(t=>{Qe(t,e)});else for(const n in t)Qe(t[n],e);return t}function Xe(){const t={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Be(()=>{t.isMounted=!0}),Ge(()=>{t.isUnmounting=!0}),t}const Ze=[Function,Array],tn={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ze,onEnter:Ze,onAfterEnter:Ze,onEnterCancelled:Ze,onBeforeLeave:Ze,onLeave:Ze,onAfterLeave:Ze,onLeaveCancelled:Ze,onBeforeAppear:Ze,onAppear:Ze,onAfterAppear:Ze,onAppearCancelled:Ze},setup(t,{slots:e}){const n=$r(),r=Xe();let o;return()=>{const i=e.default&&an(e.default(),!0);if(!i||!i.length)return;const c=mt(t),{mode:s}=c;const a=i[0];if(r.isLeaving)return on(a);const u=cn(a);if(!u)return on(a);const l=rn(u,c,r,n);sn(u,l);const f=n.subTree,p=f&&cn(f);let d=!1;const{getTransitionKey:h}=u.type;if(h){const t=h();void 0===o?o=t:t!==o&&(o=t,d=!0)}if(p&&p.type!==Kn&&(!rr(u,p)||d)){const t=rn(p,c,r,n);if(sn(p,t),"out-in"===s)return r.isLeaving=!0,t.afterLeave=()=>{r.isLeaving=!1,n.update()},on(a);"in-out"===s&&(t.delayLeave=(t,e,n)=>{const o=nn(r,p);o[String(p.key)]=p,t._leaveCb=()=>{e(),t._leaveCb=void 0,delete l.delayedLeave},l.delayedLeave=n})}return a}}},en=tn;function nn(t,e){const{leavingVNodes:n}=t;let r=n.get(e.type);return r||(r=Object.create(null),n.set(e.type,r)),r}function rn(t,e,n,r){const{appear:o,mode:i,persisted:c=!1,onBeforeEnter:s,onEnter:a,onAfterEnter:u,onEnterCancelled:l,onBeforeLeave:f,onLeave:p,onAfterLeave:d,onLeaveCancelled:h,onBeforeAppear:v,onAppear:b,onAfterAppear:m,onAppearCancelled:g}=e,y=String(t.key),O=nn(n,t),j=(t,e)=>{t&&Pt(t,r,9,e)},w={mode:i,persisted:c,beforeEnter(e){let r=s;if(!n.isMounted){if(!o)return;r=v||s}e._leaveCb&&e._leaveCb(!0);const i=O[y];i&&rr(t,i)&&i.el._leaveCb&&i.el._leaveCb(),j(r,[e])},enter(t){let e=a,r=u,i=l;if(!n.isMounted){if(!o)return;e=b||a,r=m||u,i=g||l}let c=!1;const s=t._enterCb=e=>{c||(c=!0,j(e?i:r,[t]),w.delayedLeave&&w.delayedLeave(),t._enterCb=void 0)};e?(e(t,s),e.length<=1&&s()):s()},leave(e,r){const o=String(t.key);if(e._enterCb&&e._enterCb(!0),n.isUnmounting)return r();j(f,[e]);let i=!1;const c=e._leaveCb=n=>{i||(i=!0,r(),j(n?h:d,[e]),e._leaveCb=void 0,O[o]===t&&delete O[o])};O[o]=t,p?(p(e,c),p.length<=1&&c()):c()},clone(t){return rn(t,e,n,r)}};return w}function on(t){if(un(t))return t=ur(t),t.children=null,t}function cn(t){return un(t)?t.children?t.children[0]:void 0:t}function sn(t,e){6&t.shapeFlag&&t.component?sn(t.component.subTree,e):128&t.shapeFlag?(t.ssContent.transition=e.clone(t.ssContent),t.ssFallback.transition=e.clone(t.ssFallback)):t.transition=e}function an(t,e=!1){let n=[],r=0;for(let o=0;o<t.length;o++){const i=t[o];i.type===zn?(128&i.patchFlag&&r++,n=n.concat(an(i.children,e))):(e||i.type!==Kn)&&n.push(i)}if(r>1)for(let o=0;o<n.length;o++)n[o].patchFlag=-2;return n}const un=t=>t.type.__isKeepAlive;RegExp,RegExp;function ln(t){return t.displayName||t.name}function fn(t,e){return Object(r["n"])(t)?t.some(t=>fn(t,e)):Object(r["B"])(t)?t.split(",").indexOf(e)>-1:!!t.test&&t.test(e)}function pn(t,e){hn(t,"a",e)}function dn(t,e){hn(t,"da",e)}function hn(t,e,n=Ir){const r=t.__wdc||(t.__wdc=()=>{let e=n;while(e){if(e.isDeactivated)return;e=e.parent}t()});if(Ie(e,r,n),n){let t=n.parent;while(t&&t.parent)un(t.parent.vnode)&&vn(r,e,n,t),t=t.parent}}function vn(t,e,n,o){const i=Ie(e,t,o,!0);De(()=>{Object(r["I"])(o[e],i)},n)}function bn(t){let e=t.shapeFlag;256&e&&(e-=256),512&e&&(e-=512),t.shapeFlag=e}function mn(t){return 128&t.shapeFlag?t.ssContent:t}const gn=t=>"_"===t[0]||"$stable"===t,yn=t=>Object(r["n"])(t)?t.map(dr):[dr(t)],On=(t,e,n)=>je(t=>yn(e(t)),n),jn=(t,e)=>{const n=t._ctx;for(const o in t){if(gn(o))continue;const i=t[o];if(Object(r["o"])(i))e[o]=On(o,i,n);else if(null!=i){0;const t=yn(i);e[o]=()=>t}}},wn=(t,e)=>{const n=yn(e);t.slots.default=()=>n},_n=(t,e)=>{if(32&t.vnode.shapeFlag){const n=e._;n?(t.slots=e,Object(r["g"])(e,"_",n)):jn(e,t.slots={})}else t.slots={},e&&wn(t,e);Object(r["g"])(t.slots,or,1)},xn=(t,e)=>{const{vnode:n,slots:o}=t;let i=!0,c=r["b"];if(32&n.shapeFlag){const t=e._;t?1===t?i=!1:Object(r["h"])(o,e):(i=!e.$stable,jn(e,o)),c=e}else e&&(wn(t,e),c={default:1});if(i)for(const r in o)gn(r)||r in c||delete o[r]};function Sn(t,e){const n=ce;if(null===n)return t;const o=n.proxy,i=t.dirs||(t.dirs=[]);for(let c=0;c<e.length;c++){let[t,n,s,a=r["b"]]=e[c];Object(r["o"])(t)&&(t={mounted:t,updated:t}),i.push({dir:t,instance:o,value:n,oldValue:void 0,arg:s,modifiers:a})}return t}function kn(t,e,n,r){const o=t.dirs,i=e&&e.dirs;for(let c=0;c<o.length;c++){const s=o[c];i&&(s.oldValue=i[c].value);const a=s.dir[r];a&&Pt(a,n,8,[t.el,s,t,e])}}function Cn(){return{app:null,config:{isNativeTag:r["c"],performance:!1,globalProperties:{},optionMergeStrategies:{},isCustomElement:r["c"],errorHandler:void 0,warnHandler:void 0},mixins:[],components:{},directives:{},provides:Object.create(null)}}let En=0;function An(t,e){return function(n,o=null){null==o||Object(r["u"])(o)||(o=null);const i=Cn(),c=new Set;let s=!1;const a=i.app={_uid:En++,_component:n,_props:o,_container:null,_context:i,version:Xr,get config(){return i.config},set config(t){0},use(t,...e){return c.has(t)||(t&&Object(r["o"])(t.install)?(c.add(t),t.install(a,...e)):Object(r["o"])(t)&&(c.add(t),t(a,...e))),a},mixin(t){return i.mixins.includes(t)||(i.mixins.push(t),(t.props||t.emits)&&(i.deopt=!0)),a},component(t,e){return e?(i.components[t]=e,a):i.components[t]},directive(t,e){return e?(i.directives[t]=e,a):i.directives[t]},mount(r,c){if(!s){const u=sr(n,o);return u.appContext=i,c&&e?e(u,r):t(u,r),s=!0,a._container=r,r.__vue_app__=a,u.component.proxy}},unmount(){s&&t(null,a._container)},provide(t,e){return i.provides[t]=e,a}};return a}}function Pn(){}const Mn={scheduler:Ht,allowRecurse:!0};const Tn=ge,Ln=(t,e,n,o,i)=>{if(Object(r["n"])(t))return void t.forEach((t,c)=>Ln(t,e&&(Object(r["n"])(e)?e[c]:e),n,o,i));let c;c=i?4&i.shapeFlag?i.component.proxy:i.el:null;const{i:s,r:a}=t;const u=e&&e.r,l=s.refs===r["b"]?s.refs={}:s.refs,f=s.setupState;if(null!=u&&u!==a&&(Object(r["B"])(u)?(l[u]=null,Object(r["k"])(f,u)&&(f[u]=null)):yt(u)&&(u.value=null)),Object(r["B"])(a)){const t=()=>{l[a]=c,Object(r["k"])(f,a)&&(f[a]=c)};c?(t.id=-1,Tn(t,o)):t()}else if(yt(a)){const t=()=>{a.value=c};c?(t.id=-1,Tn(t,o)):t()}else Object(r["o"])(a)&&At(a,n,12,[c,l])};function Rn(t){return Fn(t)}function Fn(t,e){Pn();const{insert:n,remove:o,patchProp:i,forcePatchProp:c,createElement:s,createText:a,createComment:u,setText:p,setElementText:d,parentNode:h,nextSibling:v,setScopeId:b=r["d"],cloneNode:m,insertStaticContent:g}=t,y=(t,e,n,r=null,o=null,i=null,c=!1,s=!1)=>{t&&!rr(t,e)&&(r=q(t),U(t,o,i,!0),t=null),-2===e.patchFlag&&(s=!1,e.dynamicChildren=null);const{type:a,ref:u,shapeFlag:l}=e;switch(a){case Hn:O(t,e,n,r);break;case Kn:j(t,e,n,r);break;case Jn:null==t&&w(e,n,r,c);break;case zn:P(t,e,n,r,o,i,c,s);break;default:1&l?_(t,e,n,r,o,i,c,s):6&l?M(t,e,n,r,o,i,c,s):(64&l||128&l)&&a.process(t,e,n,r,o,i,c,s,H)}null!=u&&o&&Ln(u,t&&t.ref,o,i,e)},O=(t,e,r,o)=>{if(null==t)n(e.el=a(e.children),r,o);else{const n=e.el=t.el;e.children!==t.children&&p(n,e.children)}},j=(t,e,r,o)=>{null==t?n(e.el=u(e.children||""),r,o):e.el=t.el},w=(t,e,n,r)=>{[t.el,t.anchor]=g(t.children,e,n,r)},_=(t,e,n,r,o,i,c,s)=>{c=c||"svg"===e.type,null==t?x(e,n,r,o,i,c,s):C(t,e,o,i,c,s)},x=(t,e,o,c,a,u,l)=>{let f,p;const{type:h,props:v,shapeFlag:b,transition:g,scopeId:y,patchFlag:O,dirs:j}=t;if(t.el&&void 0!==m&&-1===O)f=t.el=m(t.el);else{if(f=t.el=s(t.type,u,v&&v.is),8&b?d(f,t.children):16&b&&k(t.children,f,null,c,a,u&&"foreignObject"!==h,l||!!t.dynamicChildren),j&&kn(t,null,c,"created"),v){for(const e in v)Object(r["x"])(e)||i(f,e,null,v[e],u,t.children,c,a,W);(p=v.onVnodeBeforeMount)&&In(p,c,t)}S(f,y,t,c)}j&&kn(t,null,c,"beforeMount");const w=(!a||a&&!a.pendingBranch)&&g&&!g.persisted;w&&g.beforeEnter(f),n(f,e,o),((p=v&&v.onVnodeMounted)||w||j)&&Tn(()=>{p&&In(p,c,t),w&&g.enter(f),j&&kn(t,null,c,"mounted")},a)},S=(t,e,n,r)=>{if(e&&b(t,e),r){const o=r.type.__scopeId;o&&o!==e&&b(t,o+"-s");let i=r.subTree;0,n===i&&S(t,r.vnode.scopeId,r.vnode,r.parent)}},k=(t,e,n,r,o,i,c,s=0)=>{for(let a=s;a<t.length;a++){const s=t[a]=c?hr(t[a]):dr(t[a]);y(null,s,e,n,r,o,i,c)}},C=(t,e,n,o,s,a)=>{const u=e.el=t.el;let{patchFlag:l,dynamicChildren:f,dirs:p}=e;l|=16&t.patchFlag;const h=t.props||r["b"],v=e.props||r["b"];let b;if((b=v.onVnodeBeforeUpdate)&&In(b,n,e,t),p&&kn(e,t,n,"beforeUpdate"),l>0){if(16&l)A(u,e,h,v,n,o,s);else if(2&l&&h.class!==v.class&&i(u,"class",null,v.class,s),4&l&&i(u,"style",h.style,v.style,s),8&l){const r=e.dynamicProps;for(let e=0;e<r.length;e++){const a=r[e],l=h[a],f=v[a];(f!==l||c&&c(u,a))&&i(u,a,l,f,s,t.children,n,o,W)}}1&l&&t.children!==e.children&&d(u,e.children)}else a||null!=f||A(u,e,h,v,n,o,s);const m=s&&"foreignObject"!==e.type;f?E(t.dynamicChildren,f,u,n,o,m):a||I(t,e,u,null,n,o,m),((b=v.onVnodeUpdated)||p)&&Tn(()=>{b&&In(b,n,e,t),p&&kn(e,t,n,"updated")},o)},E=(t,e,n,r,o,i)=>{for(let c=0;c<e.length;c++){const s=t[c],a=e[c],u=s.type===zn||!rr(s,a)||6&s.shapeFlag||64&s.shapeFlag?h(s.el):n;y(s,a,u,null,r,o,i,!0)}},A=(t,e,n,o,s,a,u)=>{if(n!==o){for(const l in o){if(Object(r["x"])(l))continue;const f=o[l],p=n[l];(f!==p||c&&c(t,l))&&i(t,l,p,f,u,e.children,s,a,W)}if(n!==r["b"])for(const c in n)Object(r["x"])(c)||c in o||i(t,c,n[c],null,u,e.children,s,a,W)}},P=(t,e,r,o,i,c,s,u)=>{const l=e.el=t?t.el:a(""),f=e.anchor=t?t.anchor:a("");let{patchFlag:p,dynamicChildren:d}=e;p>0&&(u=!0),null==t?(n(l,r,o),n(f,r,o),k(e.children,r,f,i,c,s,u)):p>0&&64&p&&d?(E(t.dynamicChildren,d,r,i,c,s),(null!=e.key||i&&e===i.subTree)&&$n(t,e,!0)):I(t,e,r,f,i,c,s,u)},M=(t,e,n,r,o,i,c,s)=>{null==t?512&e.shapeFlag?o.ctx.activate(e,n,r,c,s):T(e,n,r,o,i,c,s):L(t,e,s)},T=(t,e,n,r,o,i,c)=>{const s=t.component=Fr(t,r,o);if(un(t)&&(s.ctx.renderer=H),Vr(s),s.asyncDep){if(o&&o.registerDep(s,R),!t.el){const t=s.subTree=sr(Kn);j(null,t,e,n)}}else R(s,t,e,n,o,i,c)},L=(t,e,n)=>{const r=e.component=t.component;if(pe(t,e,n)){if(r.asyncDep&&!r.asyncResolved)return void F(r,e,n);r.next=e,Jt(r.update),r.update()}else e.component=t.component,e.el=t.el,r.vnode=e},R=(t,e,n,o,i,c,s)=>{t.update=l((function(){if(t.isMounted){let e,{next:n,bu:o,u:a,parent:u,vnode:l}=t,f=n;0,n?(n.el=l.el,F(t,n,s)):n=l,o&&Object(r["m"])(o),(e=n.props&&n.props.onVnodeBeforeUpdate)&&In(e,u,n,l);const p=ae(t);0;const d=t.subTree;t.subTree=p,y(d,p,h(d.el),q(d),t,i,c),n.el=p.el,null===f&&he(t,p.el),a&&Tn(a,i),(e=n.props&&n.props.onVnodeUpdated)&&Tn(()=>{In(e,u,n,l)},i)}else{let s;const{el:a,props:u}=e,{bm:l,m:f,parent:p}=t;l&&Object(r["m"])(l),(s=u&&u.onVnodeBeforeMount)&&In(s,p,e);const d=t.subTree=ae(t);0,a&&J?J(e.el,d,t,i):(y(null,d,n,o,t,i,c),e.el=d.el),f&&Tn(f,i),(s=u&&u.onVnodeMounted)&&Tn(()=>{In(s,p,e)},i);const{a:h}=t;h&&256&e.shapeFlag&&Tn(h,i),t.isMounted=!0}}),Mn)},F=(t,e,n)=>{e.component=t;const r=t.vnode.props;t.vnode=e,t.next=null,Ee(t,e.props,r,n),xn(t,e.children),Zt(void 0,t.update)},I=(t,e,n,r,o,i,c,s=!1)=>{const a=t&&t.children,u=t?t.shapeFlag:0,l=e.children,{patchFlag:f,shapeFlag:p}=e;if(f>0){if(128&f)return void N(a,l,n,r,o,i,c,s);if(256&f)return void $(a,l,n,r,o,i,c,s)}8&p?(16&u&&W(a,o,i),l!==a&&d(n,l)):16&u?16&p?N(a,l,n,r,o,i,c,s):W(a,o,i,!0):(8&u&&d(n,""),16&p&&k(l,n,r,o,i,c,s))},$=(t,e,n,o,i,c,s,a)=>{t=t||r["a"],e=e||r["a"];const u=t.length,l=e.length,f=Math.min(u,l);let p;for(p=0;p<f;p++){const r=e[p]=a?hr(e[p]):dr(e[p]);y(t[p],r,n,null,i,c,s,a)}u>l?W(t,i,c,!0,!1,f):k(e,n,o,i,c,s,a,f)},N=(t,e,n,o,i,c,s,a)=>{let u=0;const l=e.length;let f=t.length-1,p=l-1;while(u<=f&&u<=p){const r=t[u],o=e[u]=a?hr(e[u]):dr(e[u]);if(!rr(r,o))break;y(r,o,n,null,i,c,s,a),u++}while(u<=f&&u<=p){const r=t[f],o=e[p]=a?hr(e[p]):dr(e[p]);if(!rr(r,o))break;y(r,o,n,null,i,c,s,a),f--,p--}if(u>f){if(u<=p){const t=p+1,r=t<l?e[t].el:o;while(u<=p)y(null,e[u]=a?hr(e[u]):dr(e[u]),n,r,i,c,s),u++}}else if(u>p)while(u<=f)U(t[u],i,c,!0),u++;else{const d=u,h=u,v=new Map;for(u=h;u<=p;u++){const t=e[u]=a?hr(e[u]):dr(e[u]);null!=t.key&&v.set(t.key,u)}let b,m=0;const g=p-h+1;let O=!1,j=0;const w=new Array(g);for(u=0;u<g;u++)w[u]=0;for(u=d;u<=f;u++){const r=t[u];if(m>=g){U(r,i,c,!0);continue}let o;if(null!=r.key)o=v.get(r.key);else for(b=h;b<=p;b++)if(0===w[b-h]&&rr(r,e[b])){o=b;break}void 0===o?U(r,i,c,!0):(w[o-h]=u+1,o>=j?j=o:O=!0,y(r,e[o],n,null,i,c,s,a),m++)}const _=O?Nn(w):r["a"];for(b=_.length-1,u=g-1;u>=0;u--){const t=h+u,r=e[t],a=t+1<l?e[t+1].el:o;0===w[u]?y(null,r,n,a,i,c,s):O&&(b<0||u!==_[b]?B(r,n,a,2):b--)}}},B=(t,e,r,o,i=null)=>{const{el:c,type:s,transition:a,children:u,shapeFlag:l}=t;if(6&l)return void B(t.component.subTree,e,r,o);if(128&l)return void t.suspense.move(e,r,o);if(64&l)return void s.move(t,e,r,H);if(s===zn){n(c,e,r);for(let t=0;t<u.length;t++)B(u[t],e,r,o);return void n(t.anchor,e,r)}const f=2!==o&&1&l&&a;if(f)if(0===o)a.beforeEnter(c),n(c,e,r),Tn(()=>a.enter(c),i);else{const{leave:t,delayLeave:o,afterLeave:i}=a,s=()=>n(c,e,r),u=()=>{t(c,()=>{s(),i&&i()})};o?o(c,s,u):u()}else n(c,e,r)},U=(t,e,n,r=!1,o=!1)=>{const{type:i,props:c,ref:s,children:a,dynamicChildren:u,shapeFlag:l,patchFlag:f,dirs:p}=t;if(null!=s&&e&&Ln(s,null,e,n,null),256&l)return void e.ctx.deactivate(t);const d=1&l&&p;let h;if((h=c&&c.onVnodeBeforeUnmount)&&In(h,e,t),6&l)D(t.component,n,r);else{if(128&l)return void t.suspense.unmount(n,r);d&&kn(t,null,e,"beforeUnmount"),u&&(i!==zn||f>0&&64&f)?W(u,e,n,!1,!0):(i===zn&&(128&f||256&f)||!o&&16&l)&&W(a,e,n),64&l&&(r||!Un(t.props))&&t.type.remove(t,H),r&&V(t)}((h=c&&c.onVnodeUnmounted)||d)&&Tn(()=>{h&&In(h,e,t),d&&kn(t,null,e,"unmounted")},n)},V=t=>{const{type:e,el:n,anchor:r,transition:i}=t;if(e===zn)return void G(n,r);const c=()=>{o(n),i&&!i.persisted&&i.afterLeave&&i.afterLeave()};if(1&t.shapeFlag&&i&&!i.persisted){const{leave:e,delayLeave:r}=i,o=()=>e(n,c);r?r(t.el,c,o):o()}else c()},G=(t,e)=>{let n;while(t!==e)n=v(t),o(t),t=n;o(e)},D=(t,e,n)=>{const{bum:o,effects:i,update:c,subTree:s,um:a}=t;if(o&&Object(r["m"])(o),i)for(let r=0;r<i.length;r++)f(i[r]);c&&(f(c),U(s,t,e,n)),a&&Tn(a,e),Tn(()=>{t.isUnmounted=!0},e),e&&e.pendingBranch&&!e.isUnmounted&&t.asyncDep&&!t.asyncResolved&&t.suspenseId===e.pendingId&&(e.deps--,0===e.deps&&e.resolve())},W=(t,e,n,r=!1,o=!1,i=0)=>{for(let c=i;c<t.length;c++)U(t[c],e,n,r,o)},q=t=>6&t.shapeFlag?q(t.component.subTree):128&t.shapeFlag?t.suspense.next():v(t.anchor||t.el),z=(t,e)=>{null==t?e._vnode&&U(e._vnode,null,null,!0):y(e._vnode||null,t,e),te(),e._vnode=t},H={p:y,um:U,m:B,r:V,mt:T,mc:k,pc:I,pbc:E,n:q,o:t};let K,J;return e&&([K,J]=e(H)),{render:z,hydrate:K,createApp:An(z,K)}}function In(t,e,n,r=null){Pt(t,e,7,[n,r])}function $n(t,e,n=!1){const o=t.children,i=e.children;if(Object(r["n"])(o)&&Object(r["n"])(i))for(let r=0;r<o.length;r++){const t=o[r];let e=i[r];1&e.shapeFlag&&!e.dynamicChildren&&((e.patchFlag<=0||32===e.patchFlag)&&(e=i[r]=hr(i[r]),e.el=t.el),n||$n(t,e))}}function Nn(t){const e=t.slice(),n=[0];let r,o,i,c,s;const a=t.length;for(r=0;r<a;r++){const a=t[r];if(0!==a){if(o=n[n.length-1],t[o]<a){e[r]=o,n.push(r);continue}i=0,c=n.length-1;while(i<c)s=(i+c)/2|0,t[n[s]]<a?i=s+1:c=s;a<t[n[i]]&&(i>0&&(e[r]=n[i-1]),n[i]=r)}}i=n.length,c=n[i-1];while(i-- >0)n[i]=c,c=e[c];return n}const Bn=t=>t.__isTeleport,Un=t=>t&&(t.disabled||""===t.disabled);const Vn="components";function Gn(t){return Wn(Vn,t)||t}const Dn=Symbol();function Wn(t,e,n=!0){const o=ce||Ir;if(o){const n=o.type;if(t===Vn){const t=n.displayName||n.name;if(t&&(t===e||t===Object(r["e"])(e)||t===Object(r["f"])(Object(r["e"])(e))))return n}const i=qn(o[t]||n[t],e)||qn(o.appContext[t],e);return i}}function qn(t,e){return t&&(t[e]||t[Object(r["e"])(e)]||t[Object(r["f"])(Object(r["e"])(e))])}const zn=Symbol(void 0),Hn=Symbol(void 0),Kn=Symbol(void 0),Jn=Symbol(void 0),Yn=[];let Qn=null;function Xn(t=!1){Yn.push(Qn=t?null:[])}function Zn(){Yn.pop(),Qn=Yn[Yn.length-1]||null}let tr=1;function er(t,e,n,o,i){const c=sr(t,e,n,o,i,!0);return c.dynamicChildren=Qn||r["a"],Zn(),tr>0&&Qn&&Qn.push(c),c}function nr(t){return!!t&&!0===t.__v_isVNode}function rr(t,e){return t.type===e.type&&t.key===e.key}const or="__vInternal",ir=({key:t})=>null!=t?t:null,cr=({ref:t})=>null!=t?Object(r["n"])(t)?t:{i:ce,r:t}:null,sr=ar;function ar(t,e=null,n=null,o=0,i=null,c=!1){if(t&&t!==Dn||(t=Kn),nr(t)){const r=ur(t,e,!0);return n&&vr(r,n),r}if(Hr(t)&&(t=t.__vccOpts),e){(bt(e)||or in e)&&(e=Object(r["h"])({},e));let{class:t,style:n}=e;t&&!Object(r["B"])(t)&&(e.class=Object(r["G"])(t)),Object(r["u"])(n)&&(bt(n)&&!Object(r["n"])(n)&&(n=Object(r["h"])({},n)),e.style=Object(r["H"])(n))}const s=Object(r["B"])(t)?1:ve(t)?128:Bn(t)?64:Object(r["u"])(t)?4:Object(r["o"])(t)?2:0;const a={__v_isVNode:!0,["__v_skip"]:!0,type:t,props:e,key:e&&ir(e),ref:e&&cr(e),scopeId:we,children:null,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:o,dynamicProps:i,dynamicChildren:null,appContext:null};if(vr(a,n),128&s){const{content:t,fallback:e}=be(a);a.ssContent=t,a.ssFallback=e}return tr>0&&!c&&Qn&&(o>0||6&s)&&32!==o&&Qn.push(a),a}function ur(t,e,n=!1){const{props:o,ref:i,patchFlag:c}=t,s=e?br(o||{},e):o;return{__v_isVNode:!0,["__v_skip"]:!0,type:t.type,props:s,key:s&&ir(s),ref:e&&e.ref?n&&i?Object(r["n"])(i)?i.concat(cr(e)):[i,cr(e)]:cr(e):i,scopeId:t.scopeId,children:t.children,target:t.target,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==zn?-1===c?16:16|c:c,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:t.transition,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&ur(t.ssContent),ssFallback:t.ssFallback&&ur(t.ssFallback),el:t.el,anchor:t.anchor}}function lr(t=" ",e=0){return sr(Hn,null,t,e)}function fr(t,e){const n=sr(Jn,null,t);return n.staticCount=e,n}function pr(t="",e=!1){return e?(Xn(),er(Kn,null,t)):sr(Kn,null,t)}function dr(t){return null==t||"boolean"===typeof t?sr(Kn):Object(r["n"])(t)?sr(zn,null,t):"object"===typeof t?null===t.el?t:ur(t):sr(Hn,null,String(t))}function hr(t){return null===t.el?t:ur(t)}function vr(t,e){let n=0;const{shapeFlag:o}=t;if(null==e)e=null;else if(Object(r["n"])(e))n=16;else if("object"===typeof e){if(1&o||64&o){const n=e.default;return void(n&&(n._c&&Oe(1),vr(t,n()),n._c&&Oe(-1)))}{n=32;const r=e._;r||or in e?3===r&&ce&&(1024&ce.vnode.patchFlag?(e._=2,t.patchFlag|=1024):e._=1):e._ctx=ce}}else Object(r["o"])(e)?(e={default:e,_ctx:ce},n=32):(e=String(e),64&o?(n=16,e=[lr(e)]):n=8);t.children=e,t.shapeFlag|=n}function br(...t){const e=Object(r["h"])({},t[0]);for(let n=1;n<t.length;n++){const o=t[n];for(const t in o)if("class"===t)e.class!==o.class&&(e.class=Object(r["G"])([e.class,o.class]));else if("style"===t)e.style=Object(r["H"])([e.style,o.style]);else if(Object(r["v"])(t)){const n=e[t],r=o[t];n!==r&&(e[t]=n?[].concat(n,o[t]):r)}else""!==t&&(e[t]=o[t])}return e}function mr(t,e){if(Ir){let n=Ir.provides;const r=Ir.parent&&Ir.parent.provides;r===n&&(n=Ir.provides=Object.create(r)),n[t]=e}else 0}function gr(t,e,n=!1){const o=Ir||ce;if(o){const i=null==o.parent?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides;if(i&&t in i)return i[t];if(arguments.length>1)return n&&Object(r["o"])(e)?e():e}else 0}let yr=!1;function Or(t,e,n=[],o=[],i=[],c=!1){const{mixins:s,extends:a,data:u,computed:l,methods:f,watch:p,provide:d,inject:h,components:v,directives:b,beforeMount:m,mounted:g,beforeUpdate:y,updated:O,activated:j,deactivated:w,beforeDestroy:_,beforeUnmount:x,destroyed:S,unmounted:k,render:C,renderTracked:E,renderTriggered:A,errorCaptured:P}=e,M=t.proxy,T=t.ctx,L=t.appContext.mixins;c&&C&&t.render===r["d"]&&(t.render=C),c||(yr=!0,jr("beforeCreate","bc",e,t,L),yr=!1,xr(t,L,n,o,i)),a&&Or(t,a,n,o,i,!0),s&&xr(t,s,n,o,i);if(h)if(Object(r["n"])(h))for(let r=0;r<h.length;r++){const t=h[r];T[t]=gr(t)}else for(const R in h){const t=h[R];Object(r["u"])(t)?T[R]=gr(t.from||R,t.default,!0):T[R]=gr(t)}if(f)for(const R in f){const t=f[R];Object(r["o"])(t)&&(T[R]=t.bind(M))}if(c?u&&n.push(u):(n.length&&n.forEach(e=>Sr(t,e,M)),u&&Sr(t,u,M)),l)for(const R in l){const t=l[R],e=Object(r["o"])(t)?t.bind(M,M):Object(r["o"])(t.get)?t.get.bind(M,M):r["d"];0;const n=!Object(r["o"])(t)&&Object(r["o"])(t.set)?t.set.bind(M):r["d"],o=Kr({get:e,set:n});Object.defineProperty(T,R,{enumerable:!0,configurable:!0,get:()=>o.value,set:t=>o.value=t})}p&&o.push(p),!c&&o.length&&o.forEach(t=>{for(const e in t)kr(t[e],T,M,e)}),d&&i.push(d),!c&&i.length&&i.forEach(t=>{const e=Object(r["o"])(t)?t.call(M):t;for(const n in e)mr(n,e[n])}),c&&(v&&Object(r["h"])(t.components||(t.components=Object(r["h"])({},t.type.components)),v),b&&Object(r["h"])(t.directives||(t.directives=Object(r["h"])({},t.type.directives)),b)),c||jr("created","c",e,t,L),m&&Ne(m.bind(M)),g&&Be(g.bind(M)),y&&Ue(y.bind(M)),O&&Ve(O.bind(M)),j&&pn(j.bind(M)),w&&dn(w.bind(M)),P&&ze(P.bind(M)),E&&qe(E.bind(M)),A&&We(A.bind(M)),x&&Ge(x.bind(M)),k&&De(k.bind(M))}function jr(t,e,n,r,o){_r(t,e,o,r);const{extends:i,mixins:c}=n;i&&wr(t,e,i,r),c&&_r(t,e,c,r);const s=n[t];s&&Pt(s.bind(r.proxy),r,e)}function wr(t,e,n,r){n.extends&&wr(t,e,n.extends,r);const o=n[t];o&&Pt(o.bind(r.proxy),r,e)}function _r(t,e,n,r){for(let o=0;o<n.length;o++){const i=n[o].mixins;i&&_r(t,e,i,r);const c=n[o][t];c&&Pt(c.bind(r.proxy),r,e)}}function xr(t,e,n,r,o){for(let i=0;i<e.length;i++)Or(t,e[i],n,r,o,!0)}function Sr(t,e,n){const o=e.call(n,n);Object(r["u"])(o)&&(t.data===r["b"]?t.data=lt(o):Object(r["h"])(t.data,o))}function kr(t,e,n,o){const i=o.includes(".")?Cr(n,o):()=>n[o];if(Object(r["B"])(t)){const n=e[t];Object(r["o"])(n)&&Ke(i,n)}else if(Object(r["o"])(t))Ke(i,t.bind(n));else if(Object(r["u"])(t))if(Object(r["n"])(t))t.forEach(t=>kr(t,e,n,o));else{const o=Object(r["o"])(t.handler)?t.handler.bind(n):e[t.handler];Object(r["o"])(o)&&Ke(i,o,t)}else 0}function Cr(t,e){const n=e.split(".");return()=>{let e=t;for(let t=0;t<n.length&&e;t++)e=e[n[t]];return e}}function Er(t){const e=t.type,{__merged:n,mixins:r,extends:o}=e;if(n)return n;const i=t.appContext.mixins;if(!i.length&&!r&&!o)return e;const c={};return i.forEach(e=>Ar(c,e,t)),Ar(c,e,t),e.__merged=c}function Ar(t,e,n){const o=n.appContext.config.optionMergeStrategies,{mixins:i,extends:c}=e;c&&Ar(t,c,n),i&&i.forEach(e=>Ar(t,e,n));for(const s in e)o&&Object(r["k"])(o,s)?t[s]=o[s](t[s],e[s],n.proxy,s):t[s]=e[s]}const Pr=Object(r["h"])(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>t.parent&&t.parent.proxy,$root:t=>t.root&&t.root.proxy,$emit:t=>t.emit,$options:t=>Er(t),$forceUpdate:t=>()=>Ht(t.update),$nextTick:t=>zt.bind(t.proxy),$watch:t=>Ye.bind(t)}),Mr={get({_:t},e){const{ctx:n,setupState:o,data:i,props:c,accessCache:s,type:a,appContext:u}=t;if("__v_skip"===e)return!0;let l;if("$"!==e[0]){const a=s[e];if(void 0!==a)switch(a){case 0:return o[e];case 1:return i[e];case 3:return n[e];case 2:return c[e]}else{if(o!==r["b"]&&Object(r["k"])(o,e))return s[e]=0,o[e];if(i!==r["b"]&&Object(r["k"])(i,e))return s[e]=1,i[e];if((l=t.propsOptions[0])&&Object(r["k"])(l,e))return s[e]=2,c[e];if(n!==r["b"]&&Object(r["k"])(n,e))return s[e]=3,n[e];yr||(s[e]=4)}}const f=Pr[e];let p,d;return f?("$attrs"===e&&O(t,"get",e),f(t)):(p=a.__cssModules)&&(p=p[e])?p:n!==r["b"]&&Object(r["k"])(n,e)?(s[e]=3,n[e]):(d=u.config.globalProperties,Object(r["k"])(d,e)?d[e]:void 0)},set({_:t},e,n){const{data:o,setupState:i,ctx:c}=t;if(i!==r["b"]&&Object(r["k"])(i,e))i[e]=n;else if(o!==r["b"]&&Object(r["k"])(o,e))o[e]=n;else if(e in t.props)return!1;return("$"!==e[0]||!(e.slice(1)in t))&&(c[e]=n,!0)},has({_:{data:t,setupState:e,accessCache:n,ctx:o,appContext:i,propsOptions:c}},s){let a;return void 0!==n[s]||t!==r["b"]&&Object(r["k"])(t,s)||e!==r["b"]&&Object(r["k"])(e,s)||(a=c[0])&&Object(r["k"])(a,s)||Object(r["k"])(o,s)||Object(r["k"])(Pr,s)||Object(r["k"])(i.config.globalProperties,s)}};const Tr=Object(r["h"])({},Mr,{get(t,e){if(e!==Symbol.unscopables)return Mr.get(t,e,t)},has(t,e){const n="_"!==e[0]&&!Object(r["p"])(e);return n}});const Lr=Cn();let Rr=0;function Fr(t,e,n){const o=t.type,i=(e?e.appContext:t.appContext)||Lr,c={uid:Rr++,vnode:t,type:o,parent:e,appContext:i,root:null,next:null,subTree:null,update:null,render:null,proxy:null,withProxy:null,effects:null,provides:e?e.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Me(o,i),emitsOptions:oe(o,i),emit:null,emitted:null,ctx:r["b"],data:r["b"],props:r["b"],attrs:r["b"],slots:r["b"],refs:r["b"],setupState:r["b"],setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null};return c.ctx={_:c},c.root=e?e.root:c,c.emit=re.bind(null,c),c}let Ir=null;const $r=()=>Ir||ce,Nr=t=>{Ir=t};let Br,Ur=!1;function Vr(t,e=!1){Ur=e;const{props:n,children:r,shapeFlag:o}=t.vnode,i=4&o;Ce(t,n,i,e),_n(t,r);const c=i?Gr(t,e):void 0;return Ur=!1,c}function Gr(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=new Proxy(t.ctx,Mr);const{setup:o}=n;if(o){const n=t.setupContext=o.length>1?qr(t):null;Ir=t,m();const i=At(o,t,0,[t.props,n]);if(y(),Ir=null,Object(r["w"])(i)){if(e)return i.then(e=>{Dr(t,e)});t.asyncDep=i}else Dr(t,i)}else Wr(t)}function Dr(t,e,n){Object(r["o"])(e)?t.render=e:Object(r["u"])(e)&&(t.setupState=kt(e)),Wr(t)}function Wr(t,e){const n=t.type;t.render||(Br&&n.template&&!n.render&&(n.render=Br(n.template,{isCustomElement:t.appContext.config.isCustomElement,delimiters:n.delimiters})),t.render=n.render||r["d"],t.render._rc&&(t.withProxy=new Proxy(t.ctx,Tr))),Ir=t,Or(t,n),Ir=null}function qr(t){return{attrs:t.attrs,slots:t.slots,emit:t.emit}}function zr(t){Ir&&(Ir.effects||(Ir.effects=[])).push(t)}function Hr(t){return Object(r["o"])(t)&&"__vccOpts"in t}function Kr(t){const e=Et(t);return zr(e.effect),e}function Jr(t){return Object(r["o"])(t)?{setup:t,name:t.name}:t}function Yr(t,e,n){const o=arguments.length;return 2===o?Object(r["u"])(e)&&!Object(r["n"])(e)?nr(e)?sr(t,null,[e]):sr(t,e):sr(t,null,e):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&nr(n)&&(n=[n]),sr(t,e,n))}Symbol("");function Qr(t,e){let n;if(Object(r["n"])(t)||Object(r["B"])(t)){n=new Array(t.length);for(let r=0,o=t.length;r<o;r++)n[r]=e(t[r],r)}else if("number"===typeof t){0,n=new Array(t);for(let r=0;r<t;r++)n[r]=e(r+1,r)}else if(Object(r["u"])(t))if(t[Symbol.iterator])n=Array.from(t,e);else{const r=Object.keys(t);n=new Array(r.length);for(let o=0,i=r.length;o<i;o++){const i=r[o];n[o]=e(t[i],i,o)}}else n=[];return n}const Xr="3.0.2",Zr="http://www.w3.org/2000/svg",to="undefined"!==typeof document?document:null;let eo,no;const ro={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n)=>e?to.createElementNS(Zr,t):to.createElement(t,n?{is:n}:void 0),createText:t=>to.createTextNode(t),createComment:t=>to.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>to.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},cloneNode(t){return t.cloneNode(!0)},insertStaticContent(t,e,n,r){const o=r?no||(no=to.createElementNS(Zr,"svg")):eo||(eo=to.createElement("div"));o.innerHTML=t;const i=o.firstChild;let c=i,s=c;while(c)s=c,ro.insert(c,e,n),c=o.firstChild;return[i,s]}};function oo(t,e,n){if(null==e&&(e=""),n)t.setAttribute("class",e);else{const n=t._vtc;n&&(e=(e?[e,...n]:[...n]).join(" ")),t.className=e}}function io(t,e,n){const o=t.style;if(n)if(Object(r["B"])(n))e!==n&&(o.cssText=n);else{for(const t in n)so(o,t,n[t]);if(e&&!Object(r["B"])(e))for(const t in e)null==n[t]&&so(o,t,"")}else t.removeAttribute("style")}const co=/\s*!important$/;function so(t,e,n){if(Object(r["n"])(n))n.forEach(n=>so(t,e,n));else if(e.startsWith("--"))t.setProperty(e,n);else{const o=lo(t,e);co.test(n)?t.setProperty(Object(r["l"])(o),n.replace(co,""),"important"):t[o]=n}}const ao=["Webkit","Moz","ms"],uo={};function lo(t,e){const n=uo[e];if(n)return n;let o=Object(r["e"])(e);if("filter"!==o&&o in t)return uo[e]=o;o=Object(r["f"])(o);for(let r=0;r<ao.length;r++){const n=ao[r]+o;if(n in t)return uo[e]=n}return e}const fo="http://www.w3.org/1999/xlink";function po(t,e,n,o){if(o&&e.startsWith("xlink:"))null==n?t.removeAttributeNS(fo,e.slice(6,e.length)):t.setAttributeNS(fo,e,n);else{const o=Object(r["A"])(e);null==n||o&&!1===n?t.removeAttribute(e):t.setAttribute(e,o?"":n)}}function ho(t,e,n,r,o,i,c){if("innerHTML"===e||"textContent"===e)return r&&c(r,o,i),void(t[e]=null==n?"":n);if("value"!==e||"PROGRESS"===t.tagName)if(""===n&&"boolean"===typeof t[e])t[e]=!0;else if(null==n&&"string"===typeof t[e])t[e]="",t.removeAttribute(e);else try{t[e]=n}catch(s){0}else{t._value=n;const e=null==n?"":n;t.value!==e&&(t.value=e)}}let vo=Date.now;"undefined"!==typeof document&&vo()>document.createEvent("Event").timeStamp&&(vo=()=>performance.now());let bo=0;const mo=Promise.resolve(),go=()=>{bo=0},yo=()=>bo||(mo.then(go),bo=vo());function Oo(t,e,n,r){t.addEventListener(e,n,r)}function jo(t,e,n,r){t.removeEventListener(e,n,r)}function wo(t,e,n,r,o=null){const i=t._vei||(t._vei={}),c=i[e];if(r&&c)c.value=r;else{const[n,s]=xo(e);if(r){const c=i[e]=So(r,o);Oo(t,n,c,s)}else c&&(jo(t,n,c,s),i[e]=void 0)}}const _o=/(?:Once|Passive|Capture)$/;function xo(t){let e;if(_o.test(t)){let n;e={};while(n=t.match(_o))t=t.slice(0,t.length-n[0].length),e[n[0].toLowerCase()]=!0}return[t.slice(2).toLowerCase(),e]}function So(t,e){const n=t=>{const r=t.timeStamp||vo();r>=n.attached-1&&Pt(ko(t,n.value),e,5,[t])};return n.value=t,n.attached=yo(),n}function ko(t,e){if(Object(r["n"])(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map(t=>e=>!e._stopped&&t(e))}return e}const Co=/^on[a-z]/,Eo=(t,e)=>"value"===e,Ao=(t,e,n,o,i=!1,c,s,a,u)=>{switch(e){case"class":oo(t,o,i);break;case"style":io(t,n,o);break;default:Object(r["v"])(e)?Object(r["t"])(e)||wo(t,e,n,o,s):Po(t,e,o,i)?ho(t,e,o,c,s,a,u):("true-value"===e?t._trueValue=o:"false-value"===e&&(t._falseValue=o),po(t,e,o,i));break}};function Po(t,e,n,o){return o?"innerHTML"===e||!!(e in t&&Co.test(e)&&Object(r["o"])(n)):"spellcheck"!==e&&"draggable"!==e&&(("form"!==e||"string"!==typeof n)&&(("list"!==e||"INPUT"!==t.tagName)&&((!Co.test(e)||!Object(r["B"])(n))&&e in t)))}const Mo="transition",To="animation",Lo=(t,{slots:e})=>Yr(en,Fo(t),e);Lo.displayName="Transition";const Ro={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};Lo.props=Object(r["h"])({},en.props,Ro);function Fo(t){let{name:e="v",type:n,css:o=!0,duration:i,enterFromClass:c=e+"-enter-from",enterActiveClass:s=e+"-enter-active",enterToClass:a=e+"-enter-to",appearFromClass:u=c,appearActiveClass:l=s,appearToClass:f=a,leaveFromClass:p=e+"-leave-from",leaveActiveClass:d=e+"-leave-active",leaveToClass:h=e+"-leave-to"}=t;const v={};for(const r in t)r in Ro||(v[r]=t[r]);if(!o)return v;const b=Io(i),m=b&&b[0],g=b&&b[1],{onBeforeEnter:y,onEnter:O,onEnterCancelled:j,onLeave:w,onLeaveCancelled:_,onBeforeAppear:x=y,onAppear:S=O,onAppearCancelled:k=j}=v,C=(t,e,n)=>{Bo(t,e?f:a),Bo(t,e?l:s),n&&n()},E=(t,e)=>{Bo(t,h),Bo(t,d),e&&e()},A=t=>(e,r)=>{const o=t?S:O,i=()=>C(e,t,r);o&&o(e,i),Uo(()=>{Bo(e,t?u:c),No(e,t?f:a),o&&o.length>1||(m?setTimeout(i,m):Vo(e,n,i))})};return Object(r["h"])(v,{onBeforeEnter(t){y&&y(t),No(t,s),No(t,c)},onBeforeAppear(t){x&&x(t),No(t,l),No(t,u)},onEnter:A(!1),onAppear:A(!0),onLeave(t,e){const r=()=>E(t,e);No(t,d),No(t,p),Uo(()=>{Bo(t,p),No(t,h),w&&w.length>1||(g?setTimeout(r,g):Vo(t,n,r))}),w&&w(t,r)},onEnterCancelled(t){C(t,!1),j&&j(t)},onAppearCancelled(t){C(t,!0),k&&k(t)},onLeaveCancelled(t){E(t),_&&_(t)}})}function Io(t){if(null==t)return null;if(Object(r["u"])(t))return[$o(t.enter),$o(t.leave)];{const e=$o(t);return[e,e]}}function $o(t){const e=Object(r["L"])(t);return e}function No(t,e){e.split(/\s+/).forEach(e=>e&&t.classList.add(e)),(t._vtc||(t._vtc=new Set)).add(e)}function Bo(t,e){e.split(/\s+/).forEach(e=>e&&t.classList.remove(e));const{_vtc:n}=t;n&&(n.delete(e),n.size||(t._vtc=void 0))}function Uo(t){requestAnimationFrame(()=>{requestAnimationFrame(t)})}function Vo(t,e,n){const{type:r,timeout:o,propCount:i}=Go(t,e);if(!r)return n();const c=r+"end";let s=0;const a=()=>{t.removeEventListener(c,u),n()},u=e=>{e.target===t&&++s>=i&&a()};setTimeout(()=>{s<i&&a()},o+1),t.addEventListener(c,u)}function Go(t,e){const n=window.getComputedStyle(t),r=t=>(n[t]||"").split(", "),o=r(Mo+"Delay"),i=r(Mo+"Duration"),c=Do(o,i),s=r(To+"Delay"),a=r(To+"Duration"),u=Do(s,a);let l=null,f=0,p=0;e===Mo?c>0&&(l=Mo,f=c,p=i.length):e===To?u>0&&(l=To,f=u,p=a.length):(f=Math.max(c,u),l=f>0?c>u?Mo:To:null,p=l?l===Mo?i.length:a.length:0);const d=l===Mo&&/\b(transform|all)(,|$)/.test(n[Mo+"Property"]);return{type:l,timeout:f,propCount:p,hasTransform:d}}function Do(t,e){while(t.length<e.length)t=t.concat(t);return Math.max(...e.map((e,n)=>Wo(e)+Wo(t[n])))}function Wo(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}new WeakMap,new WeakMap;const qo=t=>{const e=t.props["onUpdate:modelValue"];return Object(r["n"])(e)?t=>Object(r["m"])(e,t):e};function zo(t){t.target.composing=!0}function Ho(t){const e=t.target;e.composing&&(e.composing=!1,Ko(e,"input"))}function Ko(t,e){const n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}const Jo={created(t,{modifiers:{lazy:e,trim:n,number:o}},i){t._assign=qo(i);const c=o||"number"===t.type;Oo(t,e?"change":"input",e=>{if(e.target.composing)return;let o=t.value;n?o=o.trim():c&&(o=Object(r["L"])(o)),t._assign(o)}),n&&Oo(t,"change",()=>{t.value=t.value.trim()}),e||(Oo(t,"compositionstart",zo),Oo(t,"compositionend",Ho),Oo(t,"change",Ho))},mounted(t,{value:e}){t.value=null==e?"":e},beforeUpdate(t,{value:e,modifiers:{trim:n,number:o}},i){if(t._assign=qo(i),t.composing)return;if(document.activeElement===t){if(n&&t.value.trim()===e)return;if((o||"number"===t.type)&&Object(r["L"])(t.value)===e)return}const c=null==e?"":e;t.value!==c&&(t.value=c)}};const Yo=Object(r["h"])({patchProp:Ao,forcePatchProp:Eo},ro);let Qo;function Xo(){return Qo||(Qo=Rn(Yo))}const Zo=(...t)=>{const e=Xo().createApp(...t);const{mount:n}=e;return e.mount=t=>{const o=ti(t);if(!o)return;const i=e._component;Object(r["o"])(i)||i.render||i.template||(i.template=o.innerHTML),o.innerHTML="";const c=n(o);return o.removeAttribute("v-cloak"),o.setAttribute("data-v-app",""),c},e};function ti(t){if(Object(r["B"])(t)){const e=document.querySelector(t);return e}return t}},"7b0b":function(t,e,n){var r=n("1d80");t.exports=function(t){return Object(r(t))}},"7c73":function(t,e,n){var r,o=n("825a"),i=n("37e8"),c=n("7839"),s=n("d012"),a=n("1be4"),u=n("cc12"),l=n("f772"),f=">",p="<",d="prototype",h="script",v=l("IE_PROTO"),b=function(){},m=function(t){return p+h+f+t+p+"/"+h+f},g=function(t){t.write(m("")),t.close();var e=t.parentWindow.Object;return t=null,e},y=function(){var t,e=u("iframe"),n="java"+h+":";return e.style.display="none",a.appendChild(e),e.src=String(n),t=e.contentWindow.document,t.open(),t.write(m("document.F=Object")),t.close(),t.F},O=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}O=r?g(r):y();var t=c.length;while(t--)delete O[d][c[t]];return O()};s[v]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(b[d]=o(t),n=new b,b[d]=null,n[v]=t):n=O(),void 0===e?n:i(n,e)}},"7dd0":function(t,e,n){"use strict";var r=n("23e7"),o=n("9ed3"),i=n("e163"),c=n("d2bb"),s=n("d44e"),a=n("9112"),u=n("6eeb"),l=n("b622"),f=n("c430"),p=n("3f8c"),d=n("ae93"),h=d.IteratorPrototype,v=d.BUGGY_SAFARI_ITERATORS,b=l("iterator"),m="keys",g="values",y="entries",O=function(){return this};t.exports=function(t,e,n,l,d,j,w){o(n,e,l);var _,x,S,k=function(t){if(t===d&&M)return M;if(!v&&t in A)return A[t];switch(t){case m:return function(){return new n(this,t)};case g:return function(){return new n(this,t)};case y:return function(){return new n(this,t)}}return function(){return new n(this)}},C=e+" Iterator",E=!1,A=t.prototype,P=A[b]||A["@@iterator"]||d&&A[d],M=!v&&P||k(d),T="Array"==e&&A.entries||P;if(T&&(_=i(T.call(new t)),h!==Object.prototype&&_.next&&(f||i(_)===h||(c?c(_,h):"function"!=typeof _[b]&&a(_,b,O)),s(_,C,!0,!0),f&&(p[C]=O))),d==g&&P&&P.name!==g&&(E=!0,M=function(){return P.call(this)}),f&&!w||A[b]===M||a(A,b,M),p[e]=M,d)if(x={values:k(g),keys:j?M:k(m),entries:k(y)},w)for(S in x)(v||E||!(S in A))&&u(A,S,x[S]);else r({target:e,proto:!0,forced:v||E},x);return x}},"7f9a":function(t,e,n){var r=n("da84"),o=n("8925"),i=r.WeakMap;t.exports="function"===typeof i&&/native code/.test(o(i))},"825a":function(t,e,n){var r=n("861d");t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},"83ab":function(t,e,n){var r=n("d039");t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},8418:function(t,e,n){"use strict";var r=n("c04e"),o=n("9bf2"),i=n("5c6c");t.exports=function(t,e,n){var c=r(e);c in t?o.f(t,c,i(0,n)):t[c]=n}},"861d":function(t,e){t.exports=function(t){return"object"===typeof t?null!==t:"function"===typeof t}},8925:function(t,e,n){var r=n("c6cd"),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},"90e3":function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},9112:function(t,e,n){var r=n("83ab"),o=n("9bf2"),i=n("5c6c");t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},9483:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r,o=function(){return Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/))};function i(t,e){void 0===e&&(e={});var n=e.registrationOptions;void 0===n&&(n={}),delete e.registrationOptions;var i=function(t){var n=[],r=arguments.length-1;while(r-- >0)n[r]=arguments[r+1];e&&e[t]&&e[t].apply(e,n)};"serviceWorker"in navigator&&r.then((function(){o()?(a(t,i,n),navigator.serviceWorker.ready.then((function(t){i("ready",t)}))):(s(t,i,n),navigator.serviceWorker.ready.then((function(t){i("ready",t)})))}))}function c(t,e){navigator.onLine||t("offline"),t("error",e)}function s(t,e,n){navigator.serviceWorker.register(t,n).then((function(t){e("registered",t),t.waiting?e("updated",t):t.onupdatefound=function(){e("updatefound",t);var n=t.installing;n.onstatechange=function(){"installed"===n.state&&(navigator.serviceWorker.controller?e("updated",t):e("cached",t))}}})).catch((function(t){return c(e,t)}))}function a(t,e,n){fetch(t).then((function(r){404===r.status?(e("error",new Error("Service worker not found at "+t)),u()):-1===r.headers.get("content-type").indexOf("javascript")?(e("error",new Error("Expected "+t+" to have javascript content-type, but received "+r.headers.get("content-type"))),u()):s(t,e,n)})).catch((function(t){return c(e,t)}))}function u(){"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(t){t.unregister()}))}"undefined"!==typeof window&&(r="undefined"!==typeof Promise?new Promise((function(t){return window.addEventListener("load",t)})):{then:function(t){return window.addEventListener("load",t)}})},"94ca":function(t,e,n){var r=n("d039"),o=/#|\.prototype\./,i=function(t,e){var n=s[c(t)];return n==u||n!=a&&("function"==typeof e?r(e):!!e)},c=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},s=i.data={},a=i.NATIVE="N",u=i.POLYFILL="P";t.exports=i},"9bdd":function(t,e,n){var r=n("825a");t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(c){var i=t["return"];throw void 0!==i&&r(i.call(t)),c}}},"9bf2":function(t,e,n){var r=n("83ab"),o=n("0cfb"),i=n("825a"),c=n("c04e"),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(i(t),e=c(e,!0),i(n),o)try{return s(t,e,n)}catch(r){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},"9ed3":function(t,e,n){"use strict";var r=n("ae93").IteratorPrototype,o=n("7c73"),i=n("5c6c"),c=n("d44e"),s=n("3f8c"),a=function(){return this};t.exports=function(t,e,n){var u=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),c(t,u,!1,!0),s[u]=a,t}},"9ff4":function(t,e,n){"use strict";(function(t){function r(t,e){const n=Object.create(null),r=t.split(",");for(let o=0;o<r.length;o++)n[r[o]]=!0;return e?t=>!!n[t.toLowerCase()]:t=>!!n[t]}n.d(e,"a",(function(){return _})),n.d(e,"b",(function(){return w})),n.d(e,"c",(function(){return S})),n.d(e,"d",(function(){return x})),n.d(e,"e",(function(){return Y})),n.d(e,"f",(function(){return Z})),n.d(e,"g",(function(){return rt})),n.d(e,"h",(function(){return A})),n.d(e,"i",(function(){return ct})),n.d(e,"j",(function(){return et})),n.d(e,"k",(function(){return T})),n.d(e,"l",(function(){return X})),n.d(e,"m",(function(){return nt})),n.d(e,"n",(function(){return L})),n.d(e,"o",(function(){return $})),n.d(e,"p",(function(){return i})),n.d(e,"q",(function(){return v})),n.d(e,"r",(function(){return z})),n.d(e,"s",(function(){return R})),n.d(e,"t",(function(){return E})),n.d(e,"u",(function(){return U})),n.d(e,"v",(function(){return C})),n.d(e,"w",(function(){return V})),n.d(e,"x",(function(){return H})),n.d(e,"y",(function(){return b})),n.d(e,"z",(function(){return F})),n.d(e,"A",(function(){return s})),n.d(e,"B",(function(){return N})),n.d(e,"C",(function(){return B})),n.d(e,"D",(function(){return g})),n.d(e,"E",(function(){return y})),n.d(e,"F",(function(){return r})),n.d(e,"G",(function(){return p})),n.d(e,"H",(function(){return a})),n.d(e,"I",(function(){return P})),n.d(e,"J",(function(){return O})),n.d(e,"K",(function(){return tt})),n.d(e,"L",(function(){return ot})),n.d(e,"M",(function(){return W}));const o="Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl",i=r(o);const c="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",s=r(c);function a(t){if(L(t)){const e={};for(let n=0;n<t.length;n++){const r=t[n],o=a(N(r)?f(r):r);if(o)for(const t in o)e[t]=o[t]}return e}if(U(t))return t}const u=/;(?![^(]*\))/g,l=/:(.+)/;function f(t){const e={};return t.split(u).forEach(t=>{if(t){const n=t.split(l);n.length>1&&(e[n[0].trim()]=n[1].trim())}}),e}function p(t){let e="";if(N(t))e=t;else if(L(t))for(let n=0;n<t.length;n++)e+=p(t[n])+" ";else if(U(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const d="html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot",h="svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view",v=r(d),b=r(h);function m(t,e){if(t.length!==e.length)return!1;let n=!0;for(let r=0;n&&r<t.length;r++)n=g(t[r],e[r]);return n}function g(t,e){if(t===e)return!0;let n=I(t),r=I(e);if(n||r)return!(!n||!r)&&t.getTime()===e.getTime();if(n=L(t),r=L(e),n||r)return!(!n||!r)&&m(t,e);if(n=U(t),r=U(e),n||r){if(!n||!r)return!1;const o=Object.keys(t).length,i=Object.keys(e).length;if(o!==i)return!1;for(const n in t){const r=t.hasOwnProperty(n),o=e.hasOwnProperty(n);if(r&&!o||!r&&o||!g(t[n],e[n]))return!1}}return String(t)===String(e)}function y(t,e){return t.findIndex(t=>g(t,e))}const O=t=>null==t?"":U(t)?JSON.stringify(t,j,2):String(t),j=(t,e)=>R(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((t,[e,n])=>(t[e+" =>"]=n,t),{})}:F(e)?{[`Set(${e.size})`]:[...e.values()]}:!U(e)||L(e)||q(e)?e:String(e),w={},_=[],x=()=>{},S=()=>!1,k=/^on[^a-z]/,C=t=>k.test(t),E=t=>t.startsWith("onUpdate:"),A=Object.assign,P=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},M=Object.prototype.hasOwnProperty,T=(t,e)=>M.call(t,e),L=Array.isArray,R=t=>"[object Map]"===D(t),F=t=>"[object Set]"===D(t),I=t=>t instanceof Date,$=t=>"function"===typeof t,N=t=>"string"===typeof t,B=t=>"symbol"===typeof t,U=t=>null!==t&&"object"===typeof t,V=t=>U(t)&&$(t.then)&&$(t.catch),G=Object.prototype.toString,D=t=>G.call(t),W=t=>D(t).slice(8,-1),q=t=>"[object Object]"===D(t),z=t=>N(t)&&"NaN"!==t&&"-"!==t[0]&&""+parseInt(t,10)===t,H=r(",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),K=t=>{const e=Object.create(null);return n=>{const r=e[n];return r||(e[n]=t(n))}},J=/-(\w)/g,Y=K(t=>t.replace(J,(t,e)=>e?e.toUpperCase():"")),Q=/\B([A-Z])/g,X=K(t=>t.replace(Q,"-$1").toLowerCase()),Z=K(t=>t.charAt(0).toUpperCase()+t.slice(1)),tt=K(t=>t?"on"+Z(t):""),et=(t,e)=>t!==e&&(t===t||e===e),nt=(t,e)=>{for(let n=0;n<t.length;n++)t[n](e)},rt=(t,e,n)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:n})},ot=t=>{const e=parseFloat(t);return isNaN(e)?t:e};let it;const ct=()=>it||(it="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof self?self:"undefined"!==typeof window?window:"undefined"!==typeof t?t:{})}).call(this,n("c8ba"))},a4d3:function(t,e,n){"use strict";var r=n("23e7"),o=n("da84"),i=n("d066"),c=n("c430"),s=n("83ab"),a=n("4930"),u=n("fdbf"),l=n("d039"),f=n("5135"),p=n("e8b5"),d=n("861d"),h=n("825a"),v=n("7b0b"),b=n("fc6a"),m=n("c04e"),g=n("5c6c"),y=n("7c73"),O=n("df75"),j=n("241c"),w=n("057f"),_=n("7418"),x=n("06cf"),S=n("9bf2"),k=n("d1e7"),C=n("9112"),E=n("6eeb"),A=n("5692"),P=n("f772"),M=n("d012"),T=n("90e3"),L=n("b622"),R=n("e538"),F=n("746f"),I=n("d44e"),$=n("69f3"),N=n("b727").forEach,B=P("hidden"),U="Symbol",V="prototype",G=L("toPrimitive"),D=$.set,W=$.getterFor(U),q=Object[V],z=o.Symbol,H=i("JSON","stringify"),K=x.f,J=S.f,Y=w.f,Q=k.f,X=A("symbols"),Z=A("op-symbols"),tt=A("string-to-symbol-registry"),et=A("symbol-to-string-registry"),nt=A("wks"),rt=o.QObject,ot=!rt||!rt[V]||!rt[V].findChild,it=s&&l((function(){return 7!=y(J({},"a",{get:function(){return J(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=K(q,e);r&&delete q[e],J(t,e,n),r&&t!==q&&J(q,e,r)}:J,ct=function(t,e){var n=X[t]=y(z[V]);return D(n,{type:U,tag:t,description:e}),s||(n.description=e),n},st=u?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof z},at=function(t,e,n){t===q&&at(Z,e,n),h(t);var r=m(e,!0);return h(n),f(X,r)?(n.enumerable?(f(t,B)&&t[B][r]&&(t[B][r]=!1),n=y(n,{enumerable:g(0,!1)})):(f(t,B)||J(t,B,g(1,{})),t[B][r]=!0),it(t,r,n)):J(t,r,n)},ut=function(t,e){h(t);var n=b(e),r=O(n).concat(ht(n));return N(r,(function(e){s&&!ft.call(n,e)||at(t,e,n[e])})),t},lt=function(t,e){return void 0===e?y(t):ut(y(t),e)},ft=function(t){var e=m(t,!0),n=Q.call(this,e);return!(this===q&&f(X,e)&&!f(Z,e))&&(!(n||!f(this,e)||!f(X,e)||f(this,B)&&this[B][e])||n)},pt=function(t,e){var n=b(t),r=m(e,!0);if(n!==q||!f(X,r)||f(Z,r)){var o=K(n,r);return!o||!f(X,r)||f(n,B)&&n[B][r]||(o.enumerable=!0),o}},dt=function(t){var e=Y(b(t)),n=[];return N(e,(function(t){f(X,t)||f(M,t)||n.push(t)})),n},ht=function(t){var e=t===q,n=Y(e?Z:b(t)),r=[];return N(n,(function(t){!f(X,t)||e&&!f(q,t)||r.push(X[t])})),r};if(a||(z=function(){if(this instanceof z)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=T(t),n=function(t){this===q&&n.call(Z,t),f(this,B)&&f(this[B],e)&&(this[B][e]=!1),it(this,e,g(1,t))};return s&&ot&&it(q,e,{configurable:!0,set:n}),ct(e,t)},E(z[V],"toString",(function(){return W(this).tag})),E(z,"withoutSetter",(function(t){return ct(T(t),t)})),k.f=ft,S.f=at,x.f=pt,j.f=w.f=dt,_.f=ht,R.f=function(t){return ct(L(t),t)},s&&(J(z[V],"description",{configurable:!0,get:function(){return W(this).description}}),c||E(q,"propertyIsEnumerable",ft,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!a,sham:!a},{Symbol:z}),N(O(nt),(function(t){F(t)})),r({target:U,stat:!0,forced:!a},{for:function(t){var e=String(t);if(f(tt,e))return tt[e];var n=z(e);return tt[e]=n,et[n]=e,n},keyFor:function(t){if(!st(t))throw TypeError(t+" is not a symbol");if(f(et,t))return et[t]},useSetter:function(){ot=!0},useSimple:function(){ot=!1}}),r({target:"Object",stat:!0,forced:!a,sham:!s},{create:lt,defineProperty:at,defineProperties:ut,getOwnPropertyDescriptor:pt}),r({target:"Object",stat:!0,forced:!a},{getOwnPropertyNames:dt,getOwnPropertySymbols:ht}),r({target:"Object",stat:!0,forced:l((function(){_.f(1)}))},{getOwnPropertySymbols:function(t){return _.f(v(t))}}),H){var vt=!a||l((function(){var t=z();return"[null]"!=H([t])||"{}"!=H({a:t})||"{}"!=H(Object(t))}));r({target:"JSON",stat:!0,forced:vt},{stringify:function(t,e,n){var r,o=[t],i=1;while(arguments.length>i)o.push(arguments[i++]);if(r=e,(d(e)||void 0!==t)&&!st(t))return p(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!st(e))return e}),o[1]=e,H.apply(null,o)}})}z[V][G]||C(z[V],G,z[V].valueOf),I(z,U),M[B]=!0},a630:function(t,e,n){var r=n("23e7"),o=n("4df4"),i=n("1c7e"),c=!i((function(t){Array.from(t)}));r({target:"Array",stat:!0,forced:c},{from:o})},a691:function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},a79d:function(t,e,n){"use strict";var r=n("23e7"),o=n("c430"),i=n("fea9"),c=n("d039"),s=n("d066"),a=n("4840"),u=n("cdf9"),l=n("6eeb"),f=!!i&&c((function(){i.prototype["finally"].call({then:function(){}},(function(){}))}));r({target:"Promise",proto:!0,real:!0,forced:f},{finally:function(t){var e=a(this,s("Promise")),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),o||"function"!=typeof i||i.prototype["finally"]||l(i.prototype,"finally",s("Promise").prototype["finally"])},ad6d:function(t,e,n){"use strict";var r=n("825a");t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},ae40:function(t,e,n){var r=n("83ab"),o=n("d039"),i=n("5135"),c=Object.defineProperty,s={},a=function(t){throw t};t.exports=function(t,e){if(i(s,t))return s[t];e||(e={});var n=[][t],u=!!i(e,"ACCESSORS")&&e.ACCESSORS,l=i(e,0)?e[0]:a,f=i(e,1)?e[1]:void 0;return s[t]=!!n&&!o((function(){if(u&&!r)return!0;var t={length:-1};u?c(t,1,{enumerable:!0,get:a}):t[1]=1,n.call(t,l,f)}))}},ae93:function(t,e,n){"use strict";var r,o,i,c=n("e163"),s=n("9112"),a=n("5135"),u=n("b622"),l=n("c430"),f=u("iterator"),p=!1,d=function(){return this};[].keys&&(i=[].keys(),"next"in i?(o=c(c(i)),o!==Object.prototype&&(r=o)):p=!0),void 0==r&&(r={}),l||a(r,f)||s(r,f,d),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},b041:function(t,e,n){"use strict";var r=n("00ee"),o=n("f5df");t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},b0c0:function(t,e,n){var r=n("83ab"),o=n("9bf2").f,i=Function.prototype,c=i.toString,s=/^\s*function ([^ (]*)/,a="name";r&&!(a in i)&&o(i,a,{configurable:!0,get:function(){try{return c.call(this).match(s)[1]}catch(t){return""}}})},b575:function(t,e,n){var r,o,i,c,s,a,u,l,f=n("da84"),p=n("06cf").f,d=n("c6b6"),h=n("2cf4").set,v=n("1cdc"),b=f.MutationObserver||f.WebKitMutationObserver,m=f.process,g=f.Promise,y="process"==d(m),O=p(f,"queueMicrotask"),j=O&&O.value;j||(r=function(){var t,e;y&&(t=m.domain)&&t.exit();while(o){e=o.fn,o=o.next;try{e()}catch(n){throw o?c():i=void 0,n}}i=void 0,t&&t.enter()},y?c=function(){m.nextTick(r)}:b&&!v?(s=!0,a=document.createTextNode(""),new b(r).observe(a,{characterData:!0}),c=function(){a.data=s=!s}):g&&g.resolve?(u=g.resolve(void 0),l=u.then,c=function(){l.call(u,r)}):c=function(){h.call(f,r)}),t.exports=j||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,c()),i=e}},b622:function(t,e,n){var r=n("da84"),o=n("5692"),i=n("5135"),c=n("90e3"),s=n("4930"),a=n("fdbf"),u=o("wks"),l=r.Symbol,f=a?l:l&&l.withoutSetter||c;t.exports=function(t){return i(u,t)||(s&&i(l,t)?u[t]=l[t]:u[t]=f("Symbol."+t)),u[t]}},b727:function(t,e,n){var r=n("0366"),o=n("44ad"),i=n("7b0b"),c=n("50c4"),s=n("65f0"),a=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,l=4==t,f=6==t,p=5==t||f;return function(d,h,v,b){for(var m,g,y=i(d),O=o(y),j=r(h,v,3),w=c(O.length),_=0,x=b||s,S=e?x(d,w):n?x(d,0):void 0;w>_;_++)if((p||_ in O)&&(m=O[_],g=j(m,_,y),t))if(e)S[_]=g;else if(g)switch(t){case 3:return!0;case 5:return m;case 6:return _;case 2:a.call(S,m)}else if(l)return!1;return f?-1:u||l?l:S}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},b85c:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));n("a4d3"),n("e01a"),n("d28b"),n("d3b7"),n("3ca3"),n("ddb0"),n("a630"),n("fb6a"),n("b0c0"),n("25f0");function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function o(t,e){if(t){if("string"===typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}function i(t,e){var n;if("undefined"===typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=o(t))||e&&t&&"number"===typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,s=!0,a=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return s=t.done,t},e:function(t){a=!0,c=t},f:function(){try{s||null==n["return"]||n["return"]()}finally{if(a)throw c}}}}},c04e:function(t,e,n){var r=n("861d");t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},c430:function(t,e){t.exports=!1},c6b6:function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},c6cd:function(t,e,n){var r=n("da84"),o=n("ce4e"),i="__core-js_shared__",c=r[i]||o(i,{});t.exports=c},c8ba:function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}t.exports=n},ca84:function(t,e,n){var r=n("5135"),o=n("fc6a"),i=n("4d64").indexOf,c=n("d012");t.exports=function(t,e){var n,s=o(t),a=0,u=[];for(n in s)!r(c,n)&&r(s,n)&&u.push(n);while(e.length>a)r(s,n=e[a++])&&(~i(u,n)||u.push(n));return u}},cc12:function(t,e,n){var r=n("da84"),o=n("861d"),i=r.document,c=o(i)&&o(i.createElement);t.exports=function(t){return c?i.createElement(t):{}}},cca6:function(t,e,n){var r=n("23e7"),o=n("60da");r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},cdf9:function(t,e,n){var r=n("825a"),o=n("861d"),i=n("f069");t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t),c=n.resolve;return c(e),n.promise}},ce4e:function(t,e,n){var r=n("da84"),o=n("9112");t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},d012:function(t,e){t.exports={}},d039:function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},d066:function(t,e,n){var r=n("428f"),o=n("da84"),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},d1e7:function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},d28b:function(t,e,n){var r=n("746f");r("iterator")},d2bb:function(t,e,n){var r=n("825a"),o=n("3bbe");t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set,t.call(n,[]),e=n instanceof Array}catch(i){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},d3b7:function(t,e,n){var r=n("00ee"),o=n("6eeb"),i=n("b041");r||o(Object.prototype,"toString",i,{unsafe:!0})},d44e:function(t,e,n){var r=n("9bf2").f,o=n("5135"),i=n("b622"),c=i("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,c)&&r(t,c,{configurable:!0,value:e})}},da84:function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n("c8ba"))},ddb0:function(t,e,n){var r=n("da84"),o=n("fdbc"),i=n("e260"),c=n("9112"),s=n("b622"),a=s("iterator"),u=s("toStringTag"),l=i.values;for(var f in o){var p=r[f],d=p&&p.prototype;if(d){if(d[a]!==l)try{c(d,a,l)}catch(v){d[a]=l}if(d[u]||c(d,u,f),o[f])for(var h in i)if(d[h]!==i[h])try{c(d,h,i[h])}catch(v){d[h]=i[h]}}}},df75:function(t,e,n){var r=n("ca84"),o=n("7839");t.exports=Object.keys||function(t){return r(t,o)}},e01a:function(t,e,n){"use strict";var r=n("23e7"),o=n("83ab"),i=n("da84"),c=n("5135"),s=n("861d"),a=n("9bf2").f,u=n("e893"),l=i.Symbol;if(o&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var f={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new l(t):void 0===t?l():l(t);return""===t&&(f[e]=!0),e};u(p,l);var d=p.prototype=l.prototype;d.constructor=p;var h=d.toString,v="Symbol(test)"==String(l("test")),b=/^Symbol\((.*)\)[^)]+$/;a(d,"description",{configurable:!0,get:function(){var t=s(this)?this.valueOf():this,e=h.call(t);if(c(f,t))return"";var n=v?e.slice(7,-1):e.replace(b,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:p})}},e163:function(t,e,n){var r=n("5135"),o=n("7b0b"),i=n("f772"),c=n("e177"),s=i("IE_PROTO"),a=Object.prototype;t.exports=c?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},e177:function(t,e,n){var r=n("d039");t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},e260:function(t,e,n){"use strict";var r=n("fc6a"),o=n("44d2"),i=n("3f8c"),c=n("69f3"),s=n("7dd0"),a="Array Iterator",u=c.set,l=c.getterFor(a);t.exports=s(Array,"Array",(function(t,e){u(this,{type:a,target:r(t),index:0,kind:e})}),(function(){var t=l(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},e2cc:function(t,e,n){var r=n("6eeb");t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},e538:function(t,e,n){var r=n("b622");e.f=r},e667:function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(e){return{error:!0,value:e}}}},e6cf:function(t,e,n){"use strict";var r,o,i,c,s=n("23e7"),a=n("c430"),u=n("da84"),l=n("d066"),f=n("fea9"),p=n("6eeb"),d=n("e2cc"),h=n("d44e"),v=n("2626"),b=n("861d"),m=n("1c0b"),g=n("19aa"),y=n("c6b6"),O=n("8925"),j=n("2266"),w=n("1c7e"),_=n("4840"),x=n("2cf4").set,S=n("b575"),k=n("cdf9"),C=n("44de"),E=n("f069"),A=n("e667"),P=n("69f3"),M=n("94ca"),T=n("b622"),L=n("2d00"),R=T("species"),F="Promise",I=P.get,$=P.set,N=P.getterFor(F),B=f,U=u.TypeError,V=u.document,G=u.process,D=l("fetch"),W=E.f,q=W,z="process"==y(G),H=!!(V&&V.createEvent&&u.dispatchEvent),K="unhandledrejection",J="rejectionhandled",Y=0,Q=1,X=2,Z=1,tt=2,et=M(F,(function(){var t=O(B)!==String(B);if(!t){if(66===L)return!0;if(!z&&"function"!=typeof PromiseRejectionEvent)return!0}if(a&&!B.prototype["finally"])return!0;if(L>=51&&/native code/.test(B))return!1;var e=B.resolve(1),n=function(t){t((function(){}),(function(){}))},r=e.constructor={};return r[R]=n,!(e.then((function(){}))instanceof n)})),nt=et||!w((function(t){B.all(t)["catch"]((function(){}))})),rt=function(t){var e;return!(!b(t)||"function"!=typeof(e=t.then))&&e},ot=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;S((function(){var o=e.value,i=e.state==Q,c=0;while(r.length>c){var s,a,u,l=r[c++],f=i?l.ok:l.fail,p=l.resolve,d=l.reject,h=l.domain;try{f?(i||(e.rejection===tt&&at(t,e),e.rejection=Z),!0===f?s=o:(h&&h.enter(),s=f(o),h&&(h.exit(),u=!0)),s===l.promise?d(U("Promise-chain cycle")):(a=rt(s))?a.call(s,p,d):p(s)):d(o)}catch(v){h&&!u&&h.exit(),d(v)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&ct(t,e)}))}},it=function(t,e,n){var r,o;H?(r=V.createEvent("Event"),r.promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},(o=u["on"+t])?o(r):t===K&&C("Unhandled promise rejection",n)},ct=function(t,e){x.call(u,(function(){var n,r=e.value,o=st(e);if(o&&(n=A((function(){z?G.emit("unhandledRejection",r,t):it(K,t,r)})),e.rejection=z||st(e)?tt:Z,n.error))throw n.value}))},st=function(t){return t.rejection!==Z&&!t.parent},at=function(t,e){x.call(u,(function(){z?G.emit("rejectionHandled",t):it(J,t,e.value)}))},ut=function(t,e,n,r){return function(o){t(e,n,o,r)}},lt=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=X,ot(t,e,!0))},ft=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw U("Promise can't be resolved itself");var o=rt(n);o?S((function(){var r={done:!1};try{o.call(n,ut(ft,t,r,e),ut(lt,t,r,e))}catch(i){lt(t,r,i,e)}})):(e.value=n,e.state=Q,ot(t,e,!1))}catch(i){lt(t,{done:!1},i,e)}}};et&&(B=function(t){g(this,B,F),m(t),r.call(this);var e=I(this);try{t(ut(ft,this,e),ut(lt,this,e))}catch(n){lt(this,e,n)}},r=function(t){$(this,{type:F,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:Y,value:void 0})},r.prototype=d(B.prototype,{then:function(t,e){var n=N(this),r=W(_(this,B));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=z?G.domain:void 0,n.parent=!0,n.reactions.push(r),n.state!=Y&&ot(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=I(t);this.promise=t,this.resolve=ut(ft,t,e),this.reject=ut(lt,t,e)},E.f=W=function(t){return t===B||t===i?new o(t):q(t)},a||"function"!=typeof f||(c=f.prototype.then,p(f.prototype,"then",(function(t,e){var n=this;return new B((function(t,e){c.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof D&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return k(B,D.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:et},{Promise:B}),h(B,F,!1,!0),v(F),i=l(F),s({target:F,stat:!0,forced:et},{reject:function(t){var e=W(this);return e.reject.call(void 0,t),e.promise}}),s({target:F,stat:!0,forced:a||et},{resolve:function(t){return k(a&&this===i?B:this,t)}}),s({target:F,stat:!0,forced:nt},{all:function(t){var e=this,n=W(e),r=n.resolve,o=n.reject,i=A((function(){var n=m(e.resolve),i=[],c=0,s=1;j(t,(function(t){var a=c++,u=!1;i.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,i[a]=t,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=W(e),r=n.reject,o=A((function(){var o=m(e.resolve);j(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},e893:function(t,e,n){var r=n("5135"),o=n("56ef"),i=n("06cf"),c=n("9bf2");t.exports=function(t,e){for(var n=o(e),s=c.f,a=i.f,u=0;u<n.length;u++){var l=n[u];r(t,l)||s(t,l,a(e,l))}}},e8b5:function(t,e,n){var r=n("c6b6");t.exports=Array.isArray||function(t){return"Array"==r(t)}},e95a:function(t,e,n){var r=n("b622"),o=n("3f8c"),i=r("iterator"),c=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||c[i]===t)}},f069:function(t,e,n){"use strict";var r=n("1c0b"),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},f5df:function(t,e,n){var r=n("00ee"),o=n("c6b6"),i=n("b622"),c=i("toStringTag"),s="Arguments"==o(function(){return arguments}()),a=function(t,e){try{return t[e]}catch(n){}};t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=a(e=Object(t),c))?n:s?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},f772:function(t,e,n){var r=n("5692"),o=n("90e3"),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},fb6a:function(t,e,n){"use strict";var r=n("23e7"),o=n("861d"),i=n("e8b5"),c=n("23cb"),s=n("50c4"),a=n("fc6a"),u=n("8418"),l=n("b622"),f=n("1dde"),p=n("ae40"),d=f("slice"),h=p("slice",{ACCESSORS:!0,0:0,1:2}),v=l("species"),b=[].slice,m=Math.max;r({target:"Array",proto:!0,forced:!d||!h},{slice:function(t,e){var n,r,l,f=a(this),p=s(f.length),d=c(t,p),h=c(void 0===e?p:e,p);if(i(f)&&(n=f.constructor,"function"!=typeof n||n!==Array&&!i(n.prototype)?o(n)&&(n=n[v],null===n&&(n=void 0)):n=void 0,n===Array||void 0===n))return b.call(f,d,h);for(r=new(void 0===n?Array:n)(m(h-d,0)),l=0;d<h;d++,l++)d in f&&u(r,l,f[d]);return r.length=l,r}})},fc6a:function(t,e,n){var r=n("44ad"),o=n("1d80");t.exports=function(t){return r(o(t))}},fdbc:function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},fdbf:function(t,e,n){var r=n("4930");t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},fea9:function(t,e,n){var r=n("da84");t.exports=r.Promise}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVleC1wZXJzaXN0ZWRzdGF0ZS9kaXN0L3Z1ZXgtcGVyc2lzdGVkc3RhdGUuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVleC9kaXN0L3Z1ZXguZXNtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1yb3V0ZXIvZGlzdC92dWUtcm91dGVyLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3JlYWN0aXZpdHkvZGlzdC9yZWFjdGl2aXR5LmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3J1bnRpbWUtY29yZS9kaXN0L3J1bnRpbWUtY29yZS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWRvbS9kaXN0L3J1bnRpbWUtZG9tLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdpc3Rlci1zZXJ2aWNlLXdvcmtlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3NoYXJlZC9kaXN0L3NoYXJlZC5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiXSwibmFtZXMiOlsid2VsbEtub3duU3ltYm9sIiwiVE9fU1RSSU5HX1RBRyIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiU3RyaW5nIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiY2FsbCIsImEiLCJiIiwiYyIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9JbmRleGVkT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsImYiLCJ0b1N0cmluZyIsIndpbmRvd05hbWVzIiwid2luZG93IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaXQiLCJlcnJvciIsInNsaWNlIiwiREVTQ1JJUFRPUlMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInRvUHJpbWl0aXZlIiwiaGFzIiwiSUU4X0RPTV9ERUZJTkUiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPIiwiUCIsImZhaWxzIiwiY3JlYXRlRWxlbWVudCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiciIsInQiLCJwcm90b3R5cGUiLCIkJHR5cGVvZiIsImUiLCJTeW1ib2wiLCJmb3IiLCJjbG9uZSIsImlzTWVyZ2VhYmxlT2JqZWN0IiwidSIsIkFycmF5IiwiaXNBcnJheSIsIm4iLCJjb25jYXQiLCJtYXAiLCJvIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaSIsImFycmF5TWVyZ2UiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImZvckVhY2giLCJoYXNPd25Qcm9wZXJ0eSIsImN1c3RvbU1lcmdlIiwiYWxsIiwiRXJyb3IiLCJyZWR1Y2UiLCJzdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwia2V5IiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJzcGxpdCIsInBvcCIsInN1YnNjcmliZSIsImFzc2VydFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwicyIsImdldFN0YXRlIiwiZmV0Y2hCZWZvcmVVc2UiLCJyZXBsYWNlU3RhdGUiLCJvdmVyd3JpdGUiLCJzdGF0ZSIsImFycmF5TWVyZ2VyIiwicmVoeWRyYXRlZCIsInN1YnNjcmliZXIiLCJzZXRTdGF0ZSIsInJlZHVjZXIiLCJwYXRocyIsIkNvbnN0cnVjdG9yIiwibmFtZSIsIlR5cGVFcnJvciIsImdldEJ1aWx0SW4iLCJJVEVSQVRPUiIsIlNBRkVfQ0xPU0lORyIsImNhbGxlZCIsIml0ZXJhdG9yV2l0aFJldHVybiIsIm5leHQiLCJkb25lIiwidGhpcyIsImZyb20iLCJleGVjIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJvYmplY3QiLCJ1c2VyQWdlbnQiLCJWOF9WRVJTSU9OIiwiU1BFQ0lFUyIsIk1FVEhPRF9OQU1FIiwiYXJyYXkiLCJjb25zdHJ1Y3RvciIsImZvbyIsIkJvb2xlYW4iLCJhbk9iamVjdCIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsInRvTGVuZ3RoIiwiYmluZCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsIlJlc3VsdCIsInN0b3BwZWQiLCJyZXN1bHQiLCJpdGVyYXRlIiwiaXRlcmFibGUiLCJBU19FTlRSSUVTIiwiSVNfSVRFUkFUT1IiLCJpdGVyYXRvciIsIml0ZXJGbiIsImluZGV4Iiwic3RlcCIsImJvdW5kRnVuY3Rpb24iLCJ2YWx1ZSIsInN0b3AiLCJ0b0ludGVnZXIiLCJtYXgiLCJNYXRoIiwibWluIiwiaW50ZWdlciIsImdsb2JhbCIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInNvdXJjZSIsIkZPUkNFRCIsInRhcmdldCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0IiwiZm9yY2VkIiwic2hhbSIsImludGVybmFsT2JqZWN0S2V5cyIsImVudW1CdWdLZXlzIiwiaGlkZGVuS2V5cyIsImZsYWdzIiwiVE9fU1RSSU5HIiwiUmVnRXhwUHJvdG90eXBlIiwiUmVnRXhwIiwibmF0aXZlVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwiUiIsInAiLCJyZiIsInVuc2FmZSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiQ09OU1RSVUNUT1JfTkFNRSIsImNvbmZpZ3VyYWJsZSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJjbGFzc29mIiwiaHRtbCIsIklTX0lPUyIsImxvY2F0aW9uIiwic2V0Iiwic2V0SW1tZWRpYXRlIiwiY2xlYXIiLCJjbGVhckltbWVkaWF0ZSIsInByb2Nlc3MiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwiT05SRUFEWVNUQVRFQ0hBTkdFIiwicnVuIiwiaWQiLCJydW5uZXIiLCJsaXN0ZW5lciIsImV2ZW50IiwiZGF0YSIsInBvc3QiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwiaG9zdCIsImFyZ3MiLCJwdXNoIiwiRnVuY3Rpb24iLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWF0Y2giLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJ2OCIsIkl0ZXJhdG9ycyIsIm9iamVjdEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiUHJvcGVydGllcyIsImlzT2JqZWN0IiwiY2hhckF0IiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImRlZmluZUl0ZXJhdG9yIiwiU1RSSU5HX0lURVJBVE9SIiwic2V0SW50ZXJuYWxTdGF0ZSIsImdldEludGVybmFsU3RhdGUiLCJnZXR0ZXJGb3IiLCJpdGVyYXRlZCIsInR5cGUiLCJzdHJpbmciLCJwb2ludCIsImNyZWF0ZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJjb25zb2xlIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiUyIsIkMiLCJ0b0Fic29sdXRlSW5kZXgiLCJjcmVhdGVNZXRob2QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJ0b09iamVjdCIsImNyZWF0ZVByb3BlcnR5IiwiYXJyYXlMaWtlIiwiYXJndW1lbnRzTGVuZ3RoIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlcmF0b3JNZXRob2QiLCJhcmd1bWVudCIsInN0b3JlS2V5IiwiZGV2dG9vbEhvb2siLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZGV2dG9vbFBsdWdpbiIsInN0b3JlIiwiX2RldnRvb2xIb29rIiwiZW1pdCIsIm9uIiwidGFyZ2V0U3RhdGUiLCJtdXRhdGlvbiIsInByZXBlbmQiLCJzdWJzY3JpYmVBY3Rpb24iLCJhY3Rpb24iLCJmb3JFYWNoVmFsdWUiLCJvYmoiLCJpc1Byb21pc2UiLCJ2YWwiLCJ0aGVuIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwibXNnIiwicGFydGlhbCIsImFyZyIsIk1vZHVsZSIsInJhd01vZHVsZSIsInJ1bnRpbWUiLCJfY2hpbGRyZW4iLCJfcmF3TW9kdWxlIiwicmF3U3RhdGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJuYW1lc3BhY2VkIiwiYWRkQ2hpbGQiLCJnZXRDaGlsZCIsImhhc0NoaWxkIiwidXBkYXRlIiwiYWN0aW9ucyIsIm11dGF0aW9ucyIsImdldHRlcnMiLCJmb3JFYWNoQ2hpbGQiLCJmb3JFYWNoR2V0dGVyIiwiZm9yRWFjaEFjdGlvbiIsImZvckVhY2hNdXRhdGlvbiIsIk1vZHVsZUNvbGxlY3Rpb24iLCJyYXdSb290TW9kdWxlIiwicmVnaXN0ZXIiLCJwYXRoIiwidGFyZ2V0TW9kdWxlIiwibmV3TW9kdWxlIiwiYXNzZXJ0UmF3TW9kdWxlIiwibW9kdWxlcyIsIndhcm4iLCJyb290IiwiZ2V0TmFtZXNwYWNlIiwibmFtZXNwYWNlIiwidGhpcyQxIiwicGFyZW50IiwicmF3Q2hpbGRNb2R1bGUiLCJ1bnJlZ2lzdGVyIiwiY2hpbGQiLCJpc1JlZ2lzdGVyZWQiLCJmdW5jdGlvbkFzc2VydCIsImV4cGVjdGVkIiwib2JqZWN0QXNzZXJ0IiwiaGFuZGxlciIsImFzc2VydFR5cGVzIiwiYXNzZXJ0T3B0aW9ucyIsIm1ha2VBc3NlcnRpb25NZXNzYWdlIiwiYnVmIiwiam9pbiIsImNyZWF0ZVN0b3JlIiwiU3RvcmUiLCJQcm9taXNlIiwicGx1Z2lucyIsInN0cmljdCIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGUiLCJyZWYiLCJkaXNwYXRjaCIsImNvbW1pdCIsInBheWxvYWQiLCJpbnN0YWxsTW9kdWxlIiwicmVzZXRTdG9yZVN0YXRlIiwicGx1Z2luIiwidXNlRGV2dG9vbHMiLCJkZXZ0b29scyIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwiZ2VuZXJpY1N1YnNjcmliZSIsInN1YnMiLCJ1bnNoaWZ0Iiwic3BsaWNlIiwicmVzZXRTdG9yZSIsImhvdCIsIm9sZFN0YXRlIiwiX3N0YXRlIiwid3JhcHBlZEdldHRlcnMiLCJjb21wdXRlZE9iaiIsImNvbXB1dGVkQ2FjaGUiLCJlbnVtZXJhYmxlIiwiZW5hYmxlU3RyaWN0TW9kZSIsIl93aXRoQ29tbWl0Iiwicm9vdFN0YXRlIiwiaXNSb290IiwicGFyZW50U3RhdGUiLCJnZXROZXN0ZWRTdGF0ZSIsIm1vZHVsZU5hbWUiLCJsb2NhbCIsImNvbnRleHQiLCJtYWtlTG9jYWxDb250ZXh0IiwibmFtZXNwYWNlZFR5cGUiLCJyZWdpc3Rlck11dGF0aW9uIiwicmVnaXN0ZXJBY3Rpb24iLCJnZXR0ZXIiLCJyZWdpc3RlckdldHRlciIsIm5vTmFtZXNwYWNlIiwiX3R5cGUiLCJfcGF5bG9hZCIsIl9vcHRpb25zIiwidW5pZnlPYmplY3RTdHlsZSIsIm1ha2VMb2NhbEdldHRlcnMiLCJnZXR0ZXJzUHJveHkiLCJzcGxpdFBvcyIsImxvY2FsVHlwZSIsImVudHJ5IiwicmVzIiwicm9vdEdldHRlcnMiLCJyZXNvbHZlIiwiY2F0Y2giLCJlcnIiLCJyYXdHZXR0ZXIiLCJkZWVwIiwiZmx1c2giLCJpbnN0YWxsIiwiYXBwIiwiaW5qZWN0S2V5IiwicHJvdmlkZSIsImNvbmZpZyIsImdsb2JhbFByb3BlcnRpZXMiLCIkc3RvcmUiLCJ2Iiwic3ViIiwic2lsZW50IiwiYmVmb3JlIiwicmVqZWN0IiwiYWZ0ZXIiLCJ3YXRjaCIsImNiIiwiYXNzaWduIiwicmVnaXN0ZXJNb2R1bGUiLCJwcmVzZXJ2ZVN0YXRlIiwidW5yZWdpc3Rlck1vZHVsZSIsImhhc01vZHVsZSIsImhvdFVwZGF0ZSIsIm5ld09wdGlvbnMiLCJjb21taXR0aW5nIiwibm9ybWFsaXplTmFtZXNwYWNlIiwic3RhdGVzIiwiaXNWYWxpZE1hcCIsIm5vcm1hbGl6ZU1hcCIsImdldE1vZHVsZUJ5TmFtZXNwYWNlIiwidnVleCIsImxlbiIsImhlbHBlciIsIklTX1BVUkUiLCJtb2RlIiwiY29weXJpZ2h0IiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsImJpdG1hcCIsIndyaXRhYmxlIiwiSW5kZXhlZE9iamVjdCIsIm5hdGl2ZUFzc2lnbiIsIkEiLCJCIiwic3ltYm9sIiwiYWxwaGFiZXQiLCJjaHIiLCJUIiwiaiIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJDT05WRVJUX1RPX1NUUklORyIsInBvcyIsImZpcnN0Iiwic2Vjb25kIiwicG9zaXRpb24iLCJzaXplIiwiY2hhckNvZGVBdCIsImNvZGVBdCIsIm9yaWdpbmFsQXJyYXkiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJXZWFrTWFwIiwiZW5mb3JjZSIsIlRZUEUiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsIlNUQVRFIiwiaGFzU3ltYm9sIiwidG9TdHJpbmdUYWciLCJQb2x5U3ltYm9sIiwibWF0Y2hlZFJvdXRlS2V5Iiwidmlld0RlcHRoS2V5Iiwicm91dGVyS2V5Iiwicm91dGVMb2NhdGlvbktleSIsImlzQnJvd3NlciIsImlzRVNNb2R1bGUiLCJfX2VzTW9kdWxlIiwiYXBwbHlUb1BhcmFtcyIsInBhcmFtcyIsIm5ld1BhcmFtcyIsIm5vb3AiLCJUUkFJTElOR19TTEFTSF9SRSIsInJlbW92ZVRyYWlsaW5nU2xhc2giLCJyZXBsYWNlIiwicGFyc2VVUkwiLCJwYXJzZVF1ZXJ5IiwiY3VycmVudExvY2F0aW9uIiwicXVlcnkiLCJzZWFyY2hTdHJpbmciLCJoYXNoIiwic2VhcmNoUG9zIiwiaGFzaFBvcyIsInJlc29sdmVSZWxhdGl2ZVBhdGgiLCJmdWxsUGF0aCIsInN0cmluZ2lmeVVSTCIsInN0cmluZ2lmeVF1ZXJ5Iiwic3RyaXBCYXNlIiwicGF0aG5hbWUiLCJiYXNlIiwidG9Mb3dlckNhc2UiLCJpc1NhbWVSb3V0ZUxvY2F0aW9uIiwiYUxhc3RJbmRleCIsIm1hdGNoZWQiLCJiTGFzdEluZGV4IiwiaXNTYW1lUm91dGVSZWNvcmQiLCJpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zIiwiYWxpYXNPZiIsImlzU2FtZVJvdXRlTG9jYXRpb25QYXJhbXNWYWx1ZSIsImlzRXF1aXZhbGVudEFycmF5IiwiZXZlcnkiLCJ0byIsInN0YXJ0c1dpdGgiLCJmcm9tU2VnbWVudHMiLCJ0b1NlZ21lbnRzIiwidG9Qb3NpdGlvbiIsInNlZ21lbnQiLCJOYXZpZ2F0aW9uVHlwZSIsIk5hdmlnYXRpb25EaXJlY3Rpb24iLCJub3JtYWxpemVCYXNlIiwiYmFzZUVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwiQkVGT1JFX0hBU0hfUkUiLCJjcmVhdGVIcmVmIiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwib2Zmc2V0IiwiZG9jUmVjdCIsImRvY3VtZW50RWxlbWVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsUmVjdCIsImJlaGF2aW9yIiwibGVmdCIsInRvcCIsImNvbXB1dGVTY3JvbGxQb3NpdGlvbiIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb1Bvc2l0aW9uIiwic2Nyb2xsVG9PcHRpb25zIiwicG9zaXRpb25FbCIsImlzSWRTZWxlY3RvciIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJzY3JvbGxUbyIsImdldFNjcm9sbEtleSIsImRlbHRhIiwiaGlzdG9yeSIsInNjcm9sbFBvc2l0aW9ucyIsIk1hcCIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInNjcm9sbFBvc2l0aW9uIiwiZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbiIsInNjcm9sbCIsImRlbGV0ZSIsImNyZWF0ZUJhc2VMb2NhdGlvbiIsImNyZWF0ZUN1cnJlbnRMb2NhdGlvbiIsInNlYXJjaCIsInBhdGhGcm9tSGFzaCIsInVzZUhpc3RvcnlMaXN0ZW5lcnMiLCJoaXN0b3J5U3RhdGUiLCJsaXN0ZW5lcnMiLCJ0ZWFyZG93bnMiLCJwYXVzZVN0YXRlIiwicG9wU3RhdGVIYW5kbGVyIiwiZnJvbVN0YXRlIiwiZGlyZWN0aW9uIiwiZm9yd2FyZCIsImJhY2siLCJ1bmtub3duIiwicGF1c2VMaXN0ZW5lcnMiLCJsaXN0ZW4iLCJjYWxsYmFjayIsInRlYXJkb3duIiwiYmVmb3JlVW5sb2FkTGlzdGVuZXIiLCJkZXN0cm95IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJ1aWxkU3RhdGUiLCJjdXJyZW50IiwicmVwbGFjZWQiLCJjb21wdXRlU2Nyb2xsIiwidXNlSGlzdG9yeVN0YXRlTmF2aWdhdGlvbiIsImNoYW5nZUxvY2F0aW9uIiwiaGFzaEluZGV4IiwidXJsIiwiY3VycmVudFN0YXRlIiwiY3JlYXRlV2ViSGlzdG9yeSIsImhpc3RvcnlOYXZpZ2F0aW9uIiwiaGlzdG9yeUxpc3RlbmVycyIsImdvIiwidHJpZ2dlckxpc3RlbmVycyIsInJvdXRlckhpc3RvcnkiLCJjcmVhdGVXZWJIYXNoSGlzdG9yeSIsImlzUm91dGVMb2NhdGlvbiIsInJvdXRlIiwiaXNSb3V0ZU5hbWUiLCJTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEIiwibWV0YSIsInJlZGlyZWN0ZWRGcm9tIiwiTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2wiLCJOYXZpZ2F0aW9uRmFpbHVyZVR5cGUiLCJjcmVhdGVSb3V0ZXJFcnJvciIsImlzTmF2aWdhdGlvbkZhaWx1cmUiLCJCQVNFX1BBUkFNX1BBVFRFUk4iLCJCQVNFX1BBVEhfUEFSU0VSX09QVElPTlMiLCJzZW5zaXRpdmUiLCJzdGFydCIsImVuZCIsIlJFR0VYX0NIQVJTX1JFIiwidG9rZW5zVG9QYXJzZXIiLCJzZWdtZW50cyIsImV4dHJhT3B0aW9ucyIsInNjb3JlIiwicGF0dGVybiIsInNlZ21lbnRTY29yZXMiLCJ0b2tlbkluZGV4IiwidG9rZW4iLCJzdWJTZWdtZW50U2NvcmUiLCJyZXBlYXRhYmxlIiwib3B0aW9uYWwiLCJyZWdleHAiLCJyZSIsIm1lc3NhZ2UiLCJzdWJQYXR0ZXJuIiwiYXZvaWREdXBsaWNhdGVkU2xhc2giLCJlbmRzV2l0aCIsInBhcmFtIiwidGV4dCIsImNvbXBhcmVTY29yZUFycmF5IiwiZGlmZiIsImNvbXBhcmVQYXRoUGFyc2VyU2NvcmUiLCJhU2NvcmUiLCJiU2NvcmUiLCJjb21wIiwiUk9PVF9UT0tFTiIsIlZBTElEX1BBUkFNX1JFIiwidG9rZW5pemVQYXRoIiwiY3Jhc2giLCJidWZmZXIiLCJwcmV2aW91c1N0YXRlIiwidG9rZW5zIiwiZmluYWxpemVTZWdtZW50IiwiY2hhciIsImN1c3RvbVJlIiwiY29uc3VtZUJ1ZmZlciIsImFkZENoYXJUb0J1ZmZlciIsImNyZWF0ZVJvdXRlUmVjb3JkTWF0Y2hlciIsInJlY29yZCIsInBhcnNlciIsIm1hdGNoZXIiLCJjaGlsZHJlbiIsImFsaWFzIiwiY3JlYXRlUm91dGVyTWF0Y2hlciIsInJvdXRlcyIsImdsb2JhbE9wdGlvbnMiLCJtYXRjaGVycyIsIm1hdGNoZXJNYXAiLCJnZXRSZWNvcmRNYXRjaGVyIiwiYWRkUm91dGUiLCJvcmlnaW5hbFJlY29yZCIsImlzUm9vdEFkZCIsIm1haW5Ob3JtYWxpemVkUmVjb3JkIiwibm9ybWFsaXplUm91dGVSZWNvcmQiLCJtZXJnZU9wdGlvbnMiLCJub3JtYWxpemVkUmVjb3JkcyIsImFsaWFzZXMiLCJjb21wb25lbnRzIiwib3JpZ2luYWxNYXRjaGVyIiwibm9ybWFsaXplZFJlY29yZCIsInBhcmVudFBhdGgiLCJjb25uZWN0aW5nU2xhc2giLCJpc0FsaWFzUmVjb3JkIiwicmVtb3ZlUm91dGUiLCJpbnNlcnRNYXRjaGVyIiwibWF0Y2hlclJlZiIsImdldFJvdXRlcyIsInBhcmFtc0Zyb21Mb2NhdGlvbiIsImsiLCJmaW5kIiwibSIsInBhcmVudE1hdGNoZXIiLCJtZXJnZU1ldGFGaWVsZHMiLCJyZWRpcmVjdCIsImJlZm9yZUVudGVyIiwicHJvcHMiLCJub3JtYWxpemVSZWNvcmRQcm9wcyIsImluc3RhbmNlcyIsImxlYXZlR3VhcmRzIiwidXBkYXRlR3VhcmRzIiwiZW50ZXJDYWxsYmFja3MiLCJkZWZhdWx0IiwiY29tcG9uZW50IiwicHJvcHNPYmplY3QiLCJkZWZhdWx0cyIsInBhcnRpYWxPcHRpb25zIiwiSEFTSF9SRSIsIkFNUEVSU0FORF9SRSIsIlNMQVNIX1JFIiwiRVFVQUxfUkUiLCJJTV9SRSIsIkVOQ19CUkFDS0VUX09QRU5fUkUiLCJFTkNfQlJBQ0tFVF9DTE9TRV9SRSIsIkVOQ19DQVJFVF9SRSIsIkVOQ19CQUNLVElDS19SRSIsIkVOQ19DVVJMWV9PUEVOX1JFIiwiRU5DX1BJUEVfUkUiLCJFTkNfQ1VSTFlfQ0xPU0VfUkUiLCJjb21tb25FbmNvZGUiLCJlbmNvZGVVUkkiLCJlbmNvZGVIYXNoIiwiZW5jb2RlUXVlcnlWYWx1ZSIsImVuY29kZVF1ZXJ5S2V5IiwiZW5jb2RlUGF0aCIsImVuY29kZVBhcmFtIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaGFzTGVhZGluZ0lNIiwic2VhcmNoUGFyYW1zIiwic2VhcmNoUGFyYW0iLCJlcVBvcyIsImN1cnJlbnRWYWx1ZSIsInZhbHVlcyIsIm5vcm1hbGl6ZVF1ZXJ5Iiwibm9ybWFsaXplZFF1ZXJ5IiwidXNlQ2FsbGJhY2tzIiwiaGFuZGxlcnMiLCJhZGQiLCJyZXNldCIsImxpc3QiLCJndWFyZFRvUHJvbWlzZUZuIiwiZ3VhcmQiLCJlbnRlckNhbGxiYWNrQXJyYXkiLCJ2YWxpZCIsImd1YXJkUmV0dXJuIiwiZ3VhcmRDYWxsIiwiZXh0cmFjdENvbXBvbmVudHNHdWFyZHMiLCJndWFyZFR5cGUiLCJndWFyZHMiLCJyYXdDb21wb25lbnQiLCJpc1JvdXRlQ29tcG9uZW50IiwiX192Y2NPcHRzIiwiY29tcG9uZW50UHJvbWlzZSIsInJlc29sdmVkIiwicmVzb2x2ZWRDb21wb25lbnQiLCJ1c2VMaW5rIiwicm91dGVyIiwiY3VycmVudFJvdXRlIiwiYWN0aXZlUmVjb3JkSW5kZXgiLCJyb3V0ZU1hdGNoZWQiLCJjdXJyZW50TWF0Y2hlZCIsImZpbmRJbmRleCIsInBhcmVudFJlY29yZFBhdGgiLCJnZXRPcmlnaW5hbFBhdGgiLCJpc0FjdGl2ZSIsImluY2x1ZGVzUGFyYW1zIiwiaXNFeGFjdEFjdGl2ZSIsIm5hdmlnYXRlIiwiZ3VhcmRFdmVudCIsImhyZWYiLCJSb3V0ZXJMaW5rSW1wbCIsInJlcXVpcmVkIiwiYWN0aXZlQ2xhc3MiLCJleGFjdEFjdGl2ZUNsYXNzIiwiY3VzdG9tIiwiYXJpYUN1cnJlbnRWYWx1ZSIsInNsb3RzIiwiYXR0cnMiLCJsaW5rIiwiZWxDbGFzcyIsImdldExpbmtDbGFzcyIsImxpbmtBY3RpdmVDbGFzcyIsImxpbmtFeGFjdEFjdGl2ZUNsYXNzIiwib25DbGljayIsImNsYXNzIiwiUm91dGVyTGluayIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiY3VycmVudFRhcmdldCIsInByZXZlbnREZWZhdWx0Iiwib3V0ZXIiLCJpbm5lciIsImlubmVyVmFsdWUiLCJvdXRlclZhbHVlIiwic29tZSIsInByb3BDbGFzcyIsImdsb2JhbENsYXNzIiwiZGVmYXVsdENsYXNzIiwiUm91dGVyVmlld0ltcGwiLCJpbmplY3RlZFJvdXRlIiwiZGVwdGgiLCJtYXRjaGVkUm91dGVSZWYiLCJ2aWV3UmVmIiwiaW5zdGFuY2UiLCJvbGRJbnN0YW5jZSIsIm9sZE5hbWUiLCJtYXRjaGVkUm91dGUiLCJWaWV3Q29tcG9uZW50IiwiY3VycmVudE5hbWUiLCJDb21wb25lbnQiLCJyb3V0ZVByb3BzT3B0aW9uIiwicm91dGVQcm9wcyIsIm9uVm5vZGVVbm1vdW50ZWQiLCJ2bm9kZSIsImlzVW5tb3VudGVkIiwiUm91dGVyVmlldyIsImNyZWF0ZVJvdXRlciIsInBhcnNlUXVlcnkkMSIsInN0cmluZ2lmeVF1ZXJ5JDEiLCJzY3JvbGxCZWhhdmlvciIsImJlZm9yZUd1YXJkcyIsImJlZm9yZVJlc29sdmVHdWFyZHMiLCJhZnRlckd1YXJkcyIsInBlbmRpbmdMb2NhdGlvbiIsInNjcm9sbFJlc3RvcmF0aW9uIiwibm9ybWFsaXplUGFyYW1zIiwicGFyYW1WYWx1ZSIsImVuY29kZVBhcmFtcyIsImRlY29kZVBhcmFtcyIsInBhcmVudE9yUm91dGUiLCJyZWNvcmRNYXRjaGVyIiwicm91dGVNYXRjaGVyIiwiaGFzUm91dGUiLCJyYXdMb2NhdGlvbiIsImxvY2F0aW9uTm9ybWFsaXplZCIsIm1hdGNoZXJMb2NhdGlvbiIsImxvY2F0aW9uQXNPYmplY3QiLCJjaGVja0NhbmNlbGVkTmF2aWdhdGlvbiIsInB1c2hXaXRoUmVkaXJlY3QiLCJ0YXJnZXRMb2NhdGlvbiIsImZvcmNlIiwibGFzdE1hdGNoZWQiLCJuZXdUYXJnZXRMb2NhdGlvbiIsInRvTG9jYXRpb24iLCJmYWlsdXJlIiwiaGFuZGxlU2Nyb2xsIiwidHJpZ2dlckVycm9yIiwiZmluYWxpemVOYXZpZ2F0aW9uIiwidHJpZ2dlckFmdGVyRWFjaCIsImNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uQW5kUmVqZWN0IiwibGVhdmluZ1JlY29yZHMiLCJ1cGRhdGluZ1JlY29yZHMiLCJlbnRlcmluZ1JlY29yZHMiLCJleHRyYWN0Q2hhbmdpbmdSZWNvcmRzIiwicmV2ZXJzZSIsImNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrIiwicnVuR3VhcmRRdWV1ZSIsImlzUHVzaCIsImlzRmlyc3ROYXZpZ2F0aW9uIiwibWFya0FzUmVhZHkiLCJyZW1vdmVIaXN0b3J5TGlzdGVuZXIiLCJzZXR1cExpc3RlbmVycyIsIl9mcm9tIiwiaW5mbyIsInJlYWR5IiwicmVhZHlIYW5kbGVycyIsImVycm9ySGFuZGxlcnMiLCJpc1JlYWR5Iiwic3RhcnRlZCIsImluc3RhbGxlZEFwcHMiLCJTZXQiLCJiZWZvcmVFYWNoIiwiYmVmb3JlUmVzb2x2ZSIsImFmdGVyRWFjaCIsIm9uRXJyb3IiLCIkcm91dGVyIiwicmVhY3RpdmVSb3V0ZSIsInVubW91bnRBcHAiLCJ1bm1vdW50IiwicHJvbWlzZSIsInJlY29yZEZyb20iLCJyZWNvcmRUbyIsImluc3BlY3RTb3VyY2UiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwic2ltcGxlIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsIk5BTUUiLCJ0YXJnZXRNYXAiLCJlZmZlY3RTdGFjayIsImFjdGl2ZUVmZmVjdCIsIklURVJBVEVfS0VZIiwiTUFQX0tFWV9JVEVSQVRFX0tFWSIsImlzRWZmZWN0IiwiX2lzRWZmZWN0IiwicmF3IiwiZWZmZWN0IiwiY3JlYXRlUmVhY3RpdmVFZmZlY3QiLCJsYXp5IiwiYWN0aXZlIiwib25TdG9wIiwidWlkIiwic2NoZWR1bGVyIiwiZW5hYmxlVHJhY2tpbmciLCJyZXNldFRyYWNraW5nIiwiYWxsb3dSZWN1cnNlIiwiZGVwcyIsInNob3VsZFRyYWNrIiwidHJhY2tTdGFjayIsInBhdXNlVHJhY2tpbmciLCJsYXN0IiwidHJhY2siLCJkZXBzTWFwIiwiZGVwIiwidHJpZ2dlciIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJvbGRUYXJnZXQiLCJlZmZlY3RzIiwiZWZmZWN0c1RvQWRkIiwiYnVpbHRJblN5bWJvbHMiLCJjcmVhdGVHZXR0ZXIiLCJzaGFsbG93R2V0IiwicmVhZG9ubHlHZXQiLCJzaGFsbG93UmVhZG9ubHlHZXQiLCJhcnJheUluc3RydW1lbnRhdGlvbnMiLCJpc1JlYWRvbmx5Iiwic2hhbGxvdyIsInJlY2VpdmVyIiwicmVhZG9ubHlNYXAiLCJyZWFjdGl2ZU1hcCIsInRhcmdldElzQXJyYXkiLCJSZWZsZWN0IiwiaXNSZWYiLCJzaG91bGRVbndyYXAiLCJyZWFkb25seSIsInJlYWN0aXZlIiwibWV0aG9kIiwiYXJyIiwidG9SYXciLCJsIiwiY3JlYXRlU2V0dGVyIiwic2hhbGxvd1NldCIsImhhZEtleSIsIk51bWJlciIsImRlbGV0ZVByb3BlcnR5Iiwib3duS2V5cyIsIm11dGFibGVIYW5kbGVycyIsInJlYWRvbmx5SGFuZGxlcnMiLCJzaGFsbG93UmVhY3RpdmVIYW5kbGVycyIsInRvUmVhY3RpdmUiLCJ0b1JlYWRvbmx5IiwidG9TaGFsbG93IiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImdldCQxIiwiaXNTaGFsbG93IiwicmF3VGFyZ2V0IiwicmF3S2V5Iiwid3JhcCIsImhhcyQxIiwicHJvdG8iLCJzZXQkMSIsImRlbGV0ZUVudHJ5IiwiaGFkSXRlbXMiLCJjcmVhdGVGb3JFYWNoIiwidGhpc0FyZyIsIm9ic2VydmVkIiwiY3JlYXRlSXRlcmFibGVNZXRob2QiLCJ0YXJnZXRJc01hcCIsImlzUGFpciIsImlzS2V5T25seSIsImlubmVySXRlcmF0b3IiLCJjcmVhdGVSZWFkb25seU1ldGhvZCIsIm11dGFibGVJbnN0cnVtZW50YXRpb25zIiwic2hhbGxvd0luc3RydW1lbnRhdGlvbnMiLCJyZWFkb25seUluc3RydW1lbnRhdGlvbnMiLCJpdGVyYXRvck1ldGhvZHMiLCJjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIiLCJpbnN0cnVtZW50YXRpb25zIiwibXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyIsInNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMiLCJyZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyIsInRhcmdldFR5cGVNYXAiLCJyYXdUeXBlIiwiZ2V0VGFyZ2V0VHlwZSIsImlzRXh0ZW5zaWJsZSIsImNyZWF0ZVJlYWN0aXZlT2JqZWN0Iiwic2hhbGxvd1JlYWN0aXZlIiwiYmFzZUhhbmRsZXJzIiwiY29sbGVjdGlvbkhhbmRsZXJzIiwicHJveHlNYXAiLCJleGlzdGluZ1Byb3h5IiwidGFyZ2V0VHlwZSIsInByb3h5IiwiUHJveHkiLCJpc1JlYWN0aXZlIiwiaXNQcm94eSIsImNvbnZlcnQiLCJfX3ZfaXNSZWYiLCJjcmVhdGVSZWYiLCJzaGFsbG93UmVmIiwiX3Jhd1ZhbHVlIiwiX3NoYWxsb3ciLCJfdmFsdWUiLCJuZXdWYWwiLCJyYXdWYWx1ZSIsInVucmVmIiwic2hhbGxvd1Vud3JhcEhhbmRsZXJzIiwicHJveHlSZWZzIiwib2JqZWN0V2l0aFJlZnMiLCJDb21wdXRlZFJlZkltcGwiLCJfc2V0dGVyIiwiX2RpcnR5IiwiZ2V0dGVyT3JPcHRpb25zIiwic2V0dGVyIiwiY2FsbFdpdGhFcnJvckhhbmRsaW5nIiwiaGFuZGxlRXJyb3IiLCJjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyIsInRocm93SW5EZXYiLCJjb250ZXh0Vk5vZGUiLCJjdXIiLCJleHBvc2VkSW5zdGFuY2UiLCJlcnJvckluZm8iLCJlcnJvckNhcHR1cmVkSG9va3MiLCJlYyIsImFwcEVycm9ySGFuZGxlciIsImFwcENvbnRleHQiLCJlcnJvckhhbmRsZXIiLCJsb2dFcnJvciIsImlzRmx1c2hpbmciLCJpc0ZsdXNoUGVuZGluZyIsImZsdXNoSW5kZXgiLCJwZW5kaW5nUHJlRmx1c2hDYnMiLCJhY3RpdmVQcmVGbHVzaENicyIsInByZUZsdXNoSW5kZXgiLCJwZW5kaW5nUG9zdEZsdXNoQ2JzIiwiYWN0aXZlUG9zdEZsdXNoQ2JzIiwicG9zdEZsdXNoSW5kZXgiLCJyZXNvbHZlZFByb21pc2UiLCJjdXJyZW50Rmx1c2hQcm9taXNlIiwiY3VycmVudFByZUZsdXNoUGFyZW50Sm9iIiwicXVldWVKb2IiLCJqb2IiLCJxdWV1ZUZsdXNoIiwiZmx1c2hKb2JzIiwiaW52YWxpZGF0ZUpvYiIsInF1ZXVlQ2IiLCJhY3RpdmVRdWV1ZSIsInBlbmRpbmdRdWV1ZSIsInF1ZXVlUHJlRmx1c2hDYiIsInF1ZXVlUG9zdEZsdXNoQ2IiLCJmbHVzaFByZUZsdXNoQ2JzIiwic2VlbiIsInBhcmVudEpvYiIsImZsdXNoUG9zdEZsdXNoQ2JzIiwiZGVkdXBlZCIsInNvcnQiLCJnZXRJZCIsIkluZmluaXR5IiwicmF3QXJncyIsImlzTW9kZWxMaXN0ZW5lciIsIm1vZGVsQXJnIiwibW9kaWZpZXJzS2V5IiwibnVtYmVyIiwidHJpbSIsImhhbmRsZXJOYW1lIiwib25jZUhhbmRsZXIiLCJlbWl0dGVkIiwibm9ybWFsaXplRW1pdHNPcHRpb25zIiwiYXNNaXhpbiIsImRlb3B0IiwiX19lbWl0cyIsImVtaXRzIiwibm9ybWFsaXplZCIsImhhc0V4dGVuZHMiLCJleHRlbmRFbWl0cyIsIm1peGlucyIsImV4dGVuZHMiLCJpc0VtaXRMaXN0ZW5lciIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInJlbmRlckNvbXBvbmVudFJvb3QiLCJ3aXRoUHJveHkiLCJwcm9wc09wdGlvbnMiLCJyZW5kZXIiLCJyZW5kZXJDYWNoZSIsInNldHVwU3RhdGUiLCJjdHgiLCJmYWxsdGhyb3VnaEF0dHJzIiwic2hhcGVGbGFnIiwicHJveHlUb1VzZSIsIm5vcm1hbGl6ZVZOb2RlIiwiZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoIiwiaW5oZXJpdEF0dHJzIiwiZmlsdGVyTW9kZWxMaXN0ZW5lcnMiLCJjbG9uZVZOb2RlIiwiZGlycyIsInRyYW5zaXRpb24iLCJjcmVhdGVWTm9kZSIsIkNvbW1lbnQiLCJmaWx0ZXJTaW5nbGVSb290IiwiZmlsdGVyZWQiLCJpc1ZOb2RlIiwic2hvdWxkVXBkYXRlQ29tcG9uZW50IiwicHJldlZOb2RlIiwibmV4dFZOb2RlIiwib3B0aW1pemVkIiwicHJldlByb3BzIiwicHJldkNoaWxkcmVuIiwibmV4dFByb3BzIiwibmV4dENoaWxkcmVuIiwicGF0Y2hGbGFnIiwiZW1pdHNPcHRpb25zIiwiJHN0YWJsZSIsImhhc1Byb3BzQ2hhbmdlZCIsImR5bmFtaWNQcm9wcyIsIm5leHRLZXlzIiwidXBkYXRlSE9DSG9zdEVsIiwic3ViVHJlZSIsImlzU3VzcGVuc2UiLCJfX2lzU3VzcGVuc2UiLCJub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuIiwiY29udGVudCIsImZhbGxiYWNrIiwibm9ybWFsaXplU3VzcGVuc2VTbG90Iiwic2luZ2xlQ2hpbGQiLCJxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSIsInN1c3BlbnNlIiwicGVuZGluZ0JyYW5jaCIsImlzUmVuZGVyaW5nQ29tcGlsZWRTbG90Iiwic2V0Q29tcGlsZWRTbG90UmVuZGVyaW5nIiwid2l0aEN0eCIsInJlbmRlckZuV2l0aENvbnRleHQiLCJvcGVuQmxvY2siLCJvd25lciIsImNsb3NlQmxvY2siLCJfYyIsImN1cnJlbnRTY29wZUlkIiwic2NvcGVJZFN0YWNrIiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwid2l0aFNjb3BlSWQiLCJpbml0UHJvcHMiLCJyYXdQcm9wcyIsImlzU3RhdGVmdWwiLCJpc1NTUiIsIkludGVybmFsT2JqZWN0S2V5Iiwic2V0RnVsbFByb3BzIiwidXBkYXRlUHJvcHMiLCJyYXdQcmV2UHJvcHMiLCJyYXdDdXJyZW50UHJvcHMiLCJrZWJhYktleSIsInJlc29sdmVQcm9wVmFsdWUiLCJwcm9wc1RvVXBkYXRlIiwiY2FtZWxpemVkS2V5IiwibmVlZENhc3RLZXlzIiwiY2FtZWxLZXkiLCJvcHQiLCJoYXNEZWZhdWx0IiwiZGVmYXVsdFZhbHVlIiwic2V0Q3VycmVudEluc3RhbmNlIiwibm9ybWFsaXplUHJvcHNPcHRpb25zIiwiX19wcm9wcyIsImV4dGVuZFByb3BzIiwibm9ybWFsaXplZEtleSIsInZhbGlkYXRlUHJvcE5hbWUiLCJwcm9wIiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJnZXRUeXBlIiwiY3RvciIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaW5qZWN0SG9vayIsImhvb2siLCJjdXJyZW50SW5zdGFuY2UiLCJob29rcyIsIndyYXBwZWRIb29rIiwiX193ZWgiLCJjcmVhdGVIb29rIiwibGlmZWN5Y2xlIiwiaXNJblNTUkNvbXBvbmVudFNldHVwIiwib25CZWZvcmVNb3VudCIsIm9uTW91bnRlZCIsIm9uQmVmb3JlVXBkYXRlIiwib25VcGRhdGVkIiwib25CZWZvcmVVbm1vdW50Iiwib25Vbm1vdW50ZWQiLCJvblJlbmRlclRyaWdnZXJlZCIsIm9uUmVuZGVyVHJhY2tlZCIsIm9uRXJyb3JDYXB0dXJlZCIsIklOSVRJQUxfV0FUQ0hFUl9WQUxVRSIsImRvV2F0Y2giLCJpbW1lZGlhdGUiLCJvblRyYWNrIiwib25UcmlnZ2VyIiwiY2xlYW51cCIsImZvcmNlVHJpZ2dlciIsInRyYXZlcnNlIiwib25JbnZhbGlkYXRlIiwiYmFzZUdldHRlciIsInF1ZXVlUG9zdFJlbmRlckVmZmVjdCIsImlzTW91bnRlZCIsInJlY29yZEluc3RhbmNlQm91bmRFZmZlY3QiLCJpbnN0YW5jZVdhdGNoIiwicHVibGljVGhpcyIsInVzZVRyYW5zaXRpb25TdGF0ZSIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciIsIkJhc2VUcmFuc2l0aW9uSW1wbCIsImFwcGVhciIsInBlcnNpc3RlZCIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25FbnRlckNhbmNlbGxlZCIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwib25MZWF2ZUNhbmNlbGxlZCIsIm9uQmVmb3JlQXBwZWFyIiwib25BcHBlYXIiLCJvbkFmdGVyQXBwZWFyIiwib25BcHBlYXJDYW5jZWxsZWQiLCJnZXRDdXJyZW50SW5zdGFuY2UiLCJwcmV2VHJhbnNpdGlvbktleSIsImdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiIsImVtcHR5UGxhY2Vob2xkZXIiLCJpbm5lckNoaWxkIiwiZ2V0S2VlcEFsaXZlQ2hpbGQiLCJlbnRlckhvb2tzIiwicmVzb2x2ZVRyYW5zaXRpb25Ib29rcyIsInNldFRyYW5zaXRpb25Ib29rcyIsIm9sZENoaWxkIiwib2xkSW5uZXJDaGlsZCIsInRyYW5zaXRpb25LZXlDaGFuZ2VkIiwiZ2V0VHJhbnNpdGlvbktleSIsImlzU2FtZVZOb2RlVHlwZSIsImxlYXZpbmdIb29rcyIsImFmdGVyTGVhdmUiLCJkZWxheUxlYXZlIiwiZWFybHlSZW1vdmUiLCJkZWxheWVkTGVhdmUiLCJsZWF2aW5nVk5vZGVzQ2FjaGUiLCJnZXRMZWF2aW5nTm9kZXNGb3JUeXBlIiwiX2xlYXZlQ2IiLCJCYXNlVHJhbnNpdGlvbiIsImNhbGxIb29rIiwibGVhdmluZ1ZOb2RlIiwiYWZ0ZXJIb29rIiwiY2FuY2VsSG9vayIsIl9lbnRlckNiIiwiY2FuY2VsbGVkIiwicmVtb3ZlIiwiaXNLZWVwQWxpdmUiLCJzc0NvbnRlbnQiLCJzc0ZhbGxiYWNrIiwia2VlcENvbW1lbnQiLCJyZXQiLCJrZXllZEZyYWdtZW50Q291bnQiLCJGcmFnbWVudCIsIl9faXNLZWVwQWxpdmUiLCJnZXROYW1lIiwiZGlzcGxheU5hbWUiLCJtYXRjaGVzIiwib25BY3RpdmF0ZWQiLCJyZWdpc3RlcktlZXBBbGl2ZUhvb2siLCJvbkRlYWN0aXZhdGVkIiwiX193ZGMiLCJpc0RlYWN0aXZhdGVkIiwiaW5qZWN0VG9LZWVwQWxpdmVSb290Iiwia2VlcEFsaXZlUm9vdCIsImluamVjdGVkIiwicmVzZXRTaGFwZUZsYWciLCJnZXRJbm5lckNoaWxkIiwiaXNJbnRlcm5hbEtleSIsIm5vcm1hbGl6ZVNsb3RWYWx1ZSIsIm5vcm1hbGl6ZVNsb3QiLCJyYXdTbG90Iiwibm9ybWFsaXplT2JqZWN0U2xvdHMiLCJyYXdTbG90cyIsIl9jdHgiLCJub3JtYWxpemVWTm9kZVNsb3RzIiwiaW5pdFNsb3RzIiwiXyIsInVwZGF0ZVNsb3RzIiwibmVlZERlbGV0aW9uQ2hlY2siLCJkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQiLCJ3aXRoRGlyZWN0aXZlcyIsImRpcmVjdGl2ZXMiLCJpbnRlcm5hbEluc3RhbmNlIiwiYmluZGluZ3MiLCJkaXIiLCJtb2RpZmllcnMiLCJtb3VudGVkIiwidXBkYXRlZCIsImludm9rZURpcmVjdGl2ZUhvb2siLCJvbGRCaW5kaW5ncyIsImJpbmRpbmciLCJjcmVhdGVBcHBDb250ZXh0IiwiaXNOYXRpdmVUYWciLCJwZXJmb3JtYW5jZSIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImlzQ3VzdG9tRWxlbWVudCIsIndhcm5IYW5kbGVyIiwicHJvdmlkZXMiLCJjcmVhdGVBcHBBUEkiLCJoeWRyYXRlIiwicm9vdENvbXBvbmVudCIsInJvb3RQcm9wcyIsImluc3RhbGxlZFBsdWdpbnMiLCJfdWlkIiwiX2NvbXBvbmVudCIsIl9wcm9wcyIsIl9jb250YWluZXIiLCJfY29udGV4dCIsIm1peGluIiwiZGlyZWN0aXZlIiwicm9vdENvbnRhaW5lciIsImlzSHlkcmF0ZSIsIl9fdnVlX2FwcF9fIiwiaW5pdEZlYXR1cmVGbGFncyIsInByb2RFZmZlY3RPcHRpb25zIiwic2V0UmVmIiwicmF3UmVmIiwib2xkUmF3UmVmIiwicGFyZW50Q29tcG9uZW50IiwicGFyZW50U3VzcGVuc2UiLCJvbGRSZWYiLCJyZWZzIiwiZG9TZXQiLCJjcmVhdGVSZW5kZXJlciIsImJhc2VDcmVhdGVSZW5kZXJlciIsImNyZWF0ZUh5ZHJhdGlvbkZucyIsImluc2VydCIsImhvc3RJbnNlcnQiLCJob3N0UmVtb3ZlIiwicGF0Y2hQcm9wIiwiaG9zdFBhdGNoUHJvcCIsImZvcmNlUGF0Y2hQcm9wIiwiaG9zdEZvcmNlUGF0Y2hQcm9wIiwiaG9zdENyZWF0ZUVsZW1lbnQiLCJjcmVhdGVUZXh0IiwiaG9zdENyZWF0ZVRleHQiLCJjcmVhdGVDb21tZW50IiwiaG9zdENyZWF0ZUNvbW1lbnQiLCJzZXRUZXh0IiwiaG9zdFNldFRleHQiLCJzZXRFbGVtZW50VGV4dCIsImhvc3RTZXRFbGVtZW50VGV4dCIsInBhcmVudE5vZGUiLCJob3N0UGFyZW50Tm9kZSIsIm5leHRTaWJsaW5nIiwiaG9zdE5leHRTaWJsaW5nIiwic2V0U2NvcGVJZCIsImhvc3RTZXRTY29wZUlkIiwiY2xvbmVOb2RlIiwiaG9zdENsb25lTm9kZSIsImluc2VydFN0YXRpY0NvbnRlbnQiLCJob3N0SW5zZXJ0U3RhdGljQ29udGVudCIsInBhdGNoIiwibjEiLCJuMiIsImNvbnRhaW5lciIsImFuY2hvciIsImlzU1ZHIiwiZ2V0TmV4dEhvc3ROb2RlIiwiZHluYW1pY0NoaWxkcmVuIiwiVGV4dCIsInByb2Nlc3NUZXh0IiwicHJvY2Vzc0NvbW1lbnROb2RlIiwiU3RhdGljIiwibW91bnRTdGF0aWNOb2RlIiwicHJvY2Vzc0ZyYWdtZW50IiwicHJvY2Vzc0VsZW1lbnQiLCJwcm9jZXNzQ29tcG9uZW50IiwiaW50ZXJuYWxzIiwibW91bnRFbGVtZW50IiwicGF0Y2hFbGVtZW50Iiwidm5vZGVIb29rIiwic2NvcGVJZCIsImlzIiwibW91bnRDaGlsZHJlbiIsInVubW91bnRDaGlsZHJlbiIsIm9uVm5vZGVCZWZvcmVNb3VudCIsImludm9rZVZOb2RlSG9vayIsIm5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIiwib25Wbm9kZU1vdW50ZWQiLCJlbnRlciIsInRyZWVPd25lcklkIiwiX19zY29wZUlkIiwiY2xvbmVJZk1vdW50ZWQiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwib25Wbm9kZUJlZm9yZVVwZGF0ZSIsInBhdGNoUHJvcHMiLCJwcmV2IiwiYXJlQ2hpbGRyZW5TVkciLCJwYXRjaEJsb2NrQ2hpbGRyZW4iLCJwYXRjaENoaWxkcmVuIiwib25Wbm9kZVVwZGF0ZWQiLCJvbGRDaGlsZHJlbiIsIm5ld0NoaWxkcmVuIiwiZmFsbGJhY2tDb250YWluZXIiLCJvbGRWTm9kZSIsIm5ld1ZOb2RlIiwiZnJhZ21lbnRTdGFydEFuY2hvciIsImZyYWdtZW50RW5kQW5jaG9yIiwidHJhdmVyc2VTdGF0aWNDaGlsZHJlbiIsImFjdGl2YXRlIiwibW91bnRDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJpbml0aWFsVk5vZGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZSIsInJlbmRlcmVyIiwic2V0dXBDb21wb25lbnQiLCJhc3luY0RlcCIsInJlZ2lzdGVyRGVwIiwic2V0dXBSZW5kZXJFZmZlY3QiLCJwbGFjZWhvbGRlciIsImFzeW5jUmVzb2x2ZWQiLCJ1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIiLCJidSIsIm9yaWdpbk5leHQiLCJuZXh0VHJlZSIsInByZXZUcmVlIiwiYm0iLCJoeWRyYXRlTm9kZSIsImMxIiwicHJldlNoYXBlRmxhZyIsImMyIiwicGF0Y2hLZXllZENoaWxkcmVuIiwicGF0Y2hVbmtleWVkQ2hpbGRyZW4iLCJvbGRMZW5ndGgiLCJuZXdMZW5ndGgiLCJjb21tb25MZW5ndGgiLCJuZXh0Q2hpbGQiLCJwYXJlbnRBbmNob3IiLCJsMiIsImUxIiwiZTIiLCJuZXh0UG9zIiwiczEiLCJzMiIsImtleVRvTmV3SW5kZXhNYXAiLCJwYXRjaGVkIiwidG9CZVBhdGNoZWQiLCJtb3ZlZCIsIm1heE5ld0luZGV4U29GYXIiLCJuZXdJbmRleFRvT2xkSW5kZXhNYXAiLCJwcmV2Q2hpbGQiLCJuZXdJbmRleCIsImluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlIiwiZ2V0U2VxdWVuY2UiLCJuZXh0SW5kZXgiLCJtb3ZlIiwibW92ZVR5cGUiLCJuZWVkVHJhbnNpdGlvbiIsImxlYXZlIiwicGVyZm9ybUxlYXZlIiwiZG9SZW1vdmUiLCJkZWFjdGl2YXRlIiwic2hvdWxkSW52b2tlRGlycyIsIm9uVm5vZGVCZWZvcmVVbm1vdW50IiwidW5tb3VudENvbXBvbmVudCIsImlzVGVsZXBvcnREaXNhYmxlZCIsInJlbW92ZUZyYWdtZW50IiwicGVyZm9ybVJlbW92ZSIsImJ1bSIsInVtIiwic3VzcGVuc2VJZCIsInBlbmRpbmdJZCIsIl92bm9kZSIsIm10IiwibWMiLCJwYyIsInBiYyIsImNyZWF0ZUFwcCIsImNoMSIsImNoMiIsImFyckkiLCJpc1RlbGVwb3J0IiwiX19pc1RlbGVwb3J0IiwiZGlzYWJsZWQiLCJDT01QT05FTlRTIiwicmVzb2x2ZUNvbXBvbmVudCIsInJlc29sdmVBc3NldCIsIk5VTExfRFlOQU1JQ19DT01QT05FTlQiLCJ3YXJuTWlzc2luZyIsInNlbGZOYW1lIiwicmVnaXN0cnkiLCJibG9ja1N0YWNrIiwiY3VycmVudEJsb2NrIiwiZGlzYWJsZVRyYWNraW5nIiwiY3JlYXRlQmxvY2siLCJfX3ZfaXNWTm9kZSIsIm5vcm1hbGl6ZUtleSIsIm5vcm1hbGl6ZVJlZiIsIl9jcmVhdGVWTm9kZSIsImlzQmxvY2tOb2RlIiwiY2xvbmVkIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJpc0NsYXNzQ29tcG9uZW50Iiwia2xhc3MiLCJ0YXJnZXRBbmNob3IiLCJzdGF0aWNDb3VudCIsImV4dHJhUHJvcHMiLCJtZXJnZVJlZiIsIm1lcmdlZFByb3BzIiwibWVyZ2VQcm9wcyIsImNyZWF0ZVRleHRWTm9kZSIsImZsYWciLCJjcmVhdGVTdGF0aWNWTm9kZSIsIm51bWJlck9mTm9kZXMiLCJjcmVhdGVDb21tZW50Vk5vZGUiLCJhc0Jsb2NrIiwic2xvdCIsInNsb3RGbGFnIiwidG9NZXJnZSIsImV4aXN0aW5nIiwiaW5jb21pbmciLCJwYXJlbnRQcm92aWRlcyIsImluamVjdCIsInRyZWF0RGVmYXVsdEFzRmFjdG9yeSIsImlzSW5CZWZvcmVDcmVhdGUiLCJhcHBseU9wdGlvbnMiLCJkZWZlcnJlZERhdGEiLCJkZWZlcnJlZFdhdGNoIiwiZGVmZXJyZWRQcm92aWRlIiwiZXh0ZW5kc09wdGlvbnMiLCJkYXRhT3B0aW9ucyIsImNvbXB1dGVkIiwiY29tcHV0ZWRPcHRpb25zIiwibWV0aG9kcyIsIndhdGNoT3B0aW9ucyIsInByb3ZpZGVPcHRpb25zIiwiaW5qZWN0T3B0aW9ucyIsImJlZm9yZU1vdW50IiwiYmVmb3JlVXBkYXRlIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJiZWZvcmVEZXN0cm95IiwiYmVmb3JlVW5tb3VudCIsImRlc3Ryb3llZCIsInVubW91bnRlZCIsInJlbmRlclRyYWNrZWQiLCJyZW5kZXJUcmlnZ2VyZWQiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsTWl4aW5zIiwiY2FsbFN5bmNIb29rIiwiYXBwbHlNaXhpbnMiLCJtZXRob2RIYW5kbGVyIiwiZGF0YUZuIiwicmVzb2x2ZURhdGEiLCJjcmVhdGVXYXRjaGVyIiwiY2FsbEhvb2tGcm9tTWl4aW5zIiwiY2FsbEhvb2tGcm9tRXh0ZW5kcyIsInNlbGZIb29rIiwiYmFzZUhvb2siLCJjaGFpbmVkTWl4aW5zIiwiY3JlYXRlUGF0aEdldHRlciIsInJlc29sdmVNZXJnZWRPcHRpb25zIiwiX19tZXJnZWQiLCJzdHJhdHMiLCJwdWJsaWNQcm9wZXJ0aWVzTWFwIiwiJCIsIiRlbCIsIiRkYXRhIiwiJHByb3BzIiwiJGF0dHJzIiwiJHNsb3RzIiwiJHJlZnMiLCIkcGFyZW50IiwiJHJvb3QiLCIkZW1pdCIsIiRvcHRpb25zIiwiJGZvcmNlVXBkYXRlIiwiJG5leHRUaWNrIiwiJHdhdGNoIiwiUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzIiwiYWNjZXNzQ2FjaGUiLCJub3JtYWxpemVkUHJvcHMiLCJwdWJsaWNHZXR0ZXIiLCJjc3NNb2R1bGUiLCJfX2Nzc01vZHVsZXMiLCJSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJ1bnNjb3BhYmxlcyIsImVtcHR5QXBwQ29udGV4dCIsInVpZCQxIiwic2V0dXBDb250ZXh0IiwiYmMiLCJkYSIsInJ0ZyIsInJ0YyIsImNvbXBpbGUiLCJzZXR1cFJlc3VsdCIsInNldHVwU3RhdGVmdWxDb21wb25lbnQiLCJzZXR1cCIsImNyZWF0ZVNldHVwQ29udGV4dCIsInJlc29sdmVkUmVzdWx0IiwiaGFuZGxlU2V0dXBSZXN1bHQiLCJmaW5pc2hDb21wb25lbnRTZXR1cCIsInRlbXBsYXRlIiwiZGVsaW1pdGVycyIsIl9yYyIsImRlZmluZUNvbXBvbmVudCIsImgiLCJwcm9wc09yQ2hpbGRyZW4iLCJyZW5kZXJMaXN0IiwicmVuZGVySXRlbSIsInN2Z05TIiwiZG9jIiwidGVtcENvbnRhaW5lciIsInRlbXBTVkdDb250YWluZXIiLCJub2RlT3BzIiwiaW5zZXJ0QmVmb3JlIiwidGFnIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJub2RlIiwibm9kZVZhbHVlIiwidGV4dENvbnRlbnQiLCJzZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsInRlbXAiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwicGF0Y2hDbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwiX3Z0YyIsImNsYXNzTmFtZSIsInBhdGNoU3R5bGUiLCJjc3NUZXh0Iiwic2V0U3R5bGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJpbXBvcnRhbnRSRSIsInNldFByb3BlcnR5IiwicHJlZml4ZWQiLCJhdXRvUHJlZml4IiwicHJlZml4ZXMiLCJwcmVmaXhDYWNoZSIsInJhd05hbWUiLCJjYWNoZWQiLCJ4bGlua05TIiwicGF0Y2hBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsImlzQm9vbGVhbiIsInBhdGNoRE9NUHJvcCIsInRhZ05hbWUiLCJfZ2V0Tm93IiwiRGF0ZSIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwiY2FjaGVkTm93IiwiZ2V0Tm93IiwicGF0Y2hFdmVudCIsInByZXZWYWx1ZSIsIm5leHRWYWx1ZSIsImludm9rZXJzIiwiX3ZlaSIsImV4aXN0aW5nSW52b2tlciIsInBhcnNlTmFtZSIsImludm9rZXIiLCJjcmVhdGVJbnZva2VyIiwib3B0aW9uc01vZGlmaWVyUkUiLCJpbml0aWFsVmFsdWUiLCJhdHRhY2hlZCIsInBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib3JpZ2luYWxTdG9wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiX3N0b3BwZWQiLCJuYXRpdmVPblJFIiwic2hvdWxkU2V0QXNQcm9wIiwiX3RydWVWYWx1ZSIsIl9mYWxzZVZhbHVlIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsIlRyYW5zaXRpb24iLCJyZXNvbHZlVHJhbnNpdGlvblByb3BzIiwiRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyIsImNzcyIsImR1cmF0aW9uIiwiZW50ZXJGcm9tQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiYXBwZWFyRnJvbUNsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwibGVhdmVGcm9tQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwiYmFzZVByb3BzIiwiZHVyYXRpb25zIiwibm9ybWFsaXplRHVyYXRpb24iLCJlbnRlckR1cmF0aW9uIiwibGVhdmVEdXJhdGlvbiIsImZpbmlzaEVudGVyIiwiaXNBcHBlYXIiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJmaW5pc2hMZWF2ZSIsIm1ha2VFbnRlckhvb2siLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJOdW1iZXJPZiIsImNscyIsImNsYXNzTGlzdCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImV4cGVjdGVkVHlwZSIsInRpbWVvdXQiLCJwcm9wQ291bnQiLCJnZXRUcmFuc2l0aW9uSW5mbyIsImVuZEV2ZW50IiwiZW5kZWQiLCJvbkVuZCIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRTdHlsZVByb3BlcnRpZXMiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkIiwidG9NcyIsImdldE1vZGVsQXNzaWduZXIiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpbmciLCJvbkNvbXBvc2l0aW9uRW5kIiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInZNb2RlbFRleHQiLCJfYXNzaWduIiwiY2FzdFRvTnVtYmVyIiwiZG9tVmFsdWUiLCJhY3RpdmVFbGVtZW50IiwicmVuZGVyZXJPcHRpb25zIiwiZW5zdXJlUmVuZGVyZXIiLCJtb3VudCIsImNvbnRhaW5lck9yU2VsZWN0b3IiLCJub3JtYWxpemVDb250YWluZXIiLCJhY3RpdmVYRG9jdW1lbnQiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJHVCIsIkxUIiwiUFJPVE9UWVBFIiwiU0NSSVBUIiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsIndyaXRlIiwiY2xvc2UiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIkpTIiwiZGlzcGxheSIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiRiIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJzZXRUb1N0cmluZ1RhZyIsIkl0ZXJhdG9yc0NvcmUiLCJJdGVyYXRvclByb3RvdHlwZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJLRVlTIiwiVkFMVUVTIiwiRU5UUklFUyIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwiS0VZIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJwcm9wZXJ0eUtleSIsImZ1bmN0aW9uVG9TdHJpbmciLCJwb3N0Zml4IiwicmFuZG9tIiwid2FpdFdpbmRvd0xvYWQiLCJpc0xvY2FsaG9zdCIsImhvc3RuYW1lIiwic3dVcmwiLCJyZWdpc3RyYXRpb25PcHRpb25zIiwibmF2aWdhdG9yIiwiY2hlY2tWYWxpZFNlcnZpY2VXb3JrZXIiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0cmF0aW9uIiwicmVnaXN0ZXJWYWxpZFNXIiwib25MaW5lIiwid2FpdGluZyIsIm9udXBkYXRlZm91bmQiLCJpbnN0YWxsaW5nV29ya2VyIiwiaW5zdGFsbGluZyIsIm9uc3RhdGVjaGFuZ2UiLCJjb250cm9sbGVyIiwiZmV0Y2giLCJyZXNwb25zZSIsInN0YXR1cyIsImhlYWRlcnMiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInJldHVybk1ldGhvZCIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwiQXR0cmlidXRlcyIsIm1ha2VNYXAiLCJzdHIiLCJleHBlY3RzTG93ZXJDYXNlIiwiR0xPQkFMU19XSElURV9MSVNURUQiLCJpc0dsb2JhbGx5V2hpdGVsaXN0ZWQiLCJzcGVjaWFsQm9vbGVhbkF0dHJzIiwiaXNTcGVjaWFsQm9vbGVhbkF0dHIiLCJub3JtYWxpemVTdHlsZSIsIml0ZW0iLCJpc1N0cmluZyIsInBhcnNlU3RyaW5nU3R5bGUiLCJsaXN0RGVsaW1pdGVyUkUiLCJwcm9wZXJ0eURlbGltaXRlclJFIiwidG1wIiwibm9ybWFsaXplQ2xhc3MiLCJIVE1MX1RBR1MiLCJTVkdfVEFHUyIsImlzSFRNTFRhZyIsImlzU1ZHVGFnIiwibG9vc2VDb21wYXJlQXJyYXlzIiwiZXF1YWwiLCJsb29zZUVxdWFsIiwiYVZhbGlkVHlwZSIsImlzRGF0ZSIsImJWYWxpZFR5cGUiLCJnZXRUaW1lIiwiYUtleXNDb3VudCIsImJLZXlzQ291bnQiLCJhSGFzS2V5IiwiYkhhc0tleSIsImxvb3NlSW5kZXhPZiIsInRvRGlzcGxheVN0cmluZyIsInJlcGxhY2VyIiwiX2tleSIsImlzTWFwIiwiaXNTZXQiLCJpc1BsYWluT2JqZWN0IiwiRU1QVFlfT0JKIiwiRU1QVFlfQVJSIiwiTk9PUCIsIk5PIiwib25SRSIsImlzT24iLCJleHRlbmQiLCJoYXNPd24iLCJ0b1R5cGVTdHJpbmciLCJpc0Z1bmN0aW9uIiwiaXNTeW1ib2wiLCJvYmplY3RUb1N0cmluZyIsInRvUmF3VHlwZSIsImlzSW50ZWdlcktleSIsInBhcnNlSW50IiwiaXNSZXNlcnZlZFByb3AiLCJjYWNoZVN0cmluZ0Z1bmN0aW9uIiwiY2FjaGUiLCJoaXQiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJ0b1VwcGVyQ2FzZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiY2FwaXRhbGl6ZSIsInRvSGFuZGxlcktleSIsImhhc0NoYW5nZWQiLCJpbnZva2VBcnJheUZucyIsImZucyIsImRlZiIsInRvTnVtYmVyIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiX2dsb2JhbFRoaXMiLCJnZXRHbG9iYWxUaGlzIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJOQVRJVkVfU1lNQk9MIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJzaGFyZWQiLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCIkZm9yRWFjaCIsIkhJRERFTiIsIlNZTUJPTCIsIlRPX1BSSU1JVElWRSIsIk9iamVjdFByb3RvdHlwZSIsIiRTeW1ib2wiLCIkc3RyaW5naWZ5IiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiUU9iamVjdCIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsImRlc2NyaXB0aW9uIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRjcmVhdGUiLCJWIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmFtZXMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwia2V5Rm9yIiwic3ltIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRk9SQ0VEX0pTT05fU1RSSU5HSUZZIiwic3BhY2UiLCIkcmVwbGFjZXIiLCJ2YWx1ZU9mIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiSU5DT1JSRUNUX0lURVJBVElPTiIsImNlaWwiLCJmbG9vciIsIk5hdGl2ZVByb21pc2UiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJwcm9taXNlUmVzb2x2ZSIsIk5PTl9HRU5FUklDIiwicmVhbCIsIm9uRmluYWxseSIsIngiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwiZG90QWxsIiwidW5pY29kZSIsInN0aWNreSIsInRocm93ZXIiLCJBQ0NFU1NPUlMiLCJhcmd1bWVudDAiLCJhcmd1bWVudDEiLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nIiwibmFtZVJFIiwiaGVhZCIsIm5vdGlmeSIsInRvZ2dsZSIsIm1hY3JvdGFzayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiSVNfTk9ERSIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwiZXhpdCIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJjYWxsYmFja2ZuIiwic3BlY2lmaWNDcmVhdGUiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFycjIiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJhcnJheUxpa2VUb0FycmF5IiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJhbGxvd0FycmF5TGlrZSIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX2UiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwiX2UyIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwiU0hBUkVEIiwiZyIsIkVYSVNUUyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJ2YXJpYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsImFQb3NzaWJsZVByb3RvdHlwZSIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwiVEFHIiwiY2hlY2siLCJET01JdGVyYWJsZXMiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIkFycmF5VmFsdWVzIiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwic3ltYm9sUHJvdG90eXBlIiwic3ltYm9sVG9TdHJpbmciLCJuYXRpdmUiLCJkZXNjIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFSUkFZX0lURVJBVE9SIiwia2luZCIsIkFyZ3VtZW50cyIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJyZWRlZmluZUFsbCIsInNldFNwZWNpZXMiLCJhbkluc3RhbmNlIiwibWljcm90YXNrIiwiaG9zdFJlcG9ydEVycm9ycyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIlByb21pc2VDb25zdHJ1Y3RvciIsIiRmZXRjaCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIkRJU1BBVENIX0VWRU5UIiwiVU5IQU5ETEVEX1JFSkVDVElPTiIsIlJFSkVDVElPTl9IQU5ETEVEIiwiUEVORElORyIsIkZVTEZJTExFRCIsIlJFSkVDVEVEIiwiSEFORExFRCIsIlVOSEFORExFRCIsIkdMT0JBTF9DT1JFX0pTX1BST01JU0UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJGYWtlUHJvbWlzZSIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwiY2hhaW4iLCJyZWFjdGlvbnMiLCJvayIsImV4aXRlZCIsInJlYWN0aW9uIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJJU19VTkhBTkRMRUQiLCJpc1VuaGFuZGxlZCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwid3JhcHBlciIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsIiRwcm9taXNlUmVzb2x2ZSIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRyeUdldCIsImNhbGxlZSIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCJVU0VTX1RPX0xFTkdUSCIsIjAiLCJuYXRpdmVTbGljZSIsImZpbiIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRl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Q2ZDLGFBQWMsRUFDZEMsU0FBVSxFQUNWQyxpQkFBa0IsRUFDbEJDLE9BQVEsRUFDUkMsWUFBYSxFQUNiQyxjQUFlLEVBQ2ZDLGNBQWUsRUFDZkMsZUFBZ0IsRUFDaEJDLGFBQWMsRUFDZEMsY0FBZSxFQUNmQyxpQkFBa0IsRUFDbEJDLGlCQUFrQixFQUNsQkMsZUFBZ0IsRUFDaEJDLGlCQUFrQixFQUNsQkMsY0FBZSxFQUNmQyxVQUFXLEkscUJDakNiLElBQUk5TyxFQUFnQixFQUFRLFFBRTVCNzJELEVBQU9DLFFBQVU0MkQsSUFFWGgwRCxPQUFPcUgsTUFFa0IsaUJBQW5CckgsT0FBT3NGLFUscUJDTm5CLElBQUlZLEVBQVMsRUFBUSxRQUVyQi9JLEVBQU9DLFFBQVU4SSxFQUFPK0wiLCJmaWxlIjoianMvY2h1bmstdmVuZG9ycy43NDUzNDliOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XSdcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciByPWZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbihyKXtyZXR1cm4hIXImJlwib2JqZWN0XCI9PXR5cGVvZiByfShyKSYmIWZ1bmN0aW9uKHIpe3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyKTtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09dHx8XCJbb2JqZWN0IERhdGVdXCI9PT10fHxmdW5jdGlvbihyKXtyZXR1cm4gci4kJHR5cGVvZj09PWV9KHIpfShyKX0sZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3I/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDM7ZnVuY3Rpb24gdChyLGUpe3JldHVybiExIT09ZS5jbG9uZSYmZS5pc01lcmdlYWJsZU9iamVjdChyKT91KEFycmF5LmlzQXJyYXkocik/W106e30scixlKTpyfWZ1bmN0aW9uIG4ocixlLG4pe3JldHVybiByLmNvbmNhdChlKS5tYXAoZnVuY3Rpb24ocil7cmV0dXJuIHQocixuKX0pfWZ1bmN0aW9uIG8ocil7cmV0dXJuIE9iamVjdC5rZXlzKHIpLmNvbmNhdChmdW5jdGlvbihyKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHIpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gci5wcm9wZXJ0eUlzRW51bWVyYWJsZShlKX0pOltdfShyKSl9ZnVuY3Rpb24gYyhyLGUpe3RyeXtyZXR1cm4gZSBpbiByfWNhdGNoKHIpe3JldHVybiExfX1mdW5jdGlvbiB1KGUsaSxhKXsoYT1hfHx7fSkuYXJyYXlNZXJnZT1hLmFycmF5TWVyZ2V8fG4sYS5pc01lcmdlYWJsZU9iamVjdD1hLmlzTWVyZ2VhYmxlT2JqZWN0fHxyLGEuY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQ9dDt2YXIgZj1BcnJheS5pc0FycmF5KGkpO3JldHVybiBmPT09QXJyYXkuaXNBcnJheShlKT9mP2EuYXJyYXlNZXJnZShlLGksYSk6ZnVuY3Rpb24ocixlLG4pe3ZhciBpPXt9O3JldHVybiBuLmlzTWVyZ2VhYmxlT2JqZWN0KHIpJiZvKHIpLmZvckVhY2goZnVuY3Rpb24oZSl7aVtlXT10KHJbZV0sbil9KSxvKGUpLmZvckVhY2goZnVuY3Rpb24obyl7KGZ1bmN0aW9uKHIsZSl7cmV0dXJuIGMocixlKSYmIShPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChyLGUpJiZPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChyLGUpKX0pKHIsbyl8fChpW29dPWMocixvKSYmbi5pc01lcmdlYWJsZU9iamVjdChlW29dKT9mdW5jdGlvbihyLGUpe2lmKCFlLmN1c3RvbU1lcmdlKXJldHVybiB1O3ZhciB0PWUuY3VzdG9tTWVyZ2Uocik7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD90OnV9KG8sbikocltvXSxlW29dLG4pOnQoZVtvXSxuKSl9KSxpfShlLGksYSk6dChpLGEpfXUuYWxsPWZ1bmN0aW9uKHIsZSl7aWYoIUFycmF5LmlzQXJyYXkocikpdGhyb3cgbmV3IEVycm9yKFwiZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5XCIpO3JldHVybiByLnJlZHVjZShmdW5jdGlvbihyLHQpe3JldHVybiB1KHIsdCxlKX0se30pfTt2YXIgaT11O2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHIpe3ZhciBlPShyPXJ8fHt9KS5zdG9yYWdlfHx3aW5kb3cmJndpbmRvdy5sb2NhbFN0b3JhZ2UsdD1yLmtleXx8XCJ2dWV4XCI7ZnVuY3Rpb24gbihyLGUpe3ZhciB0PWUuZ2V0SXRlbShyKTt0cnl7cmV0dXJuIHZvaWQgMCE9PXQ/SlNPTi5wYXJzZSh0KTp2b2lkIDB9Y2F0Y2gocil7fX1mdW5jdGlvbiBvKCl7cmV0dXJuITB9ZnVuY3Rpb24gYyhyLGUsdCl7cmV0dXJuIHQuc2V0SXRlbShyLEpTT04uc3RyaW5naWZ5KGUpKX1mdW5jdGlvbiB1KHIsZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZS5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24ocixlLHQsbil7cmV0dXJuKGU9ZS5zcGxpdD9lLnNwbGl0KFwiLlwiKTplLnNsaWNlKDApKS5zbGljZSgwLC0xKS5yZWR1Y2UoZnVuY3Rpb24ocixlKXtyZXR1cm4gcltlXT1yW2VdfHx7fX0scilbZS5wb3AoKV09dCxyfShlLHQsKG49cix2b2lkIDA9PT0obj0oKG89dCkuc3BsaXQ/by5zcGxpdChcIi5cIik6bykucmVkdWNlKGZ1bmN0aW9uKHIsZSl7cmV0dXJuIHImJnJbZV19LG4pKT92b2lkIDA6bikpO3ZhciBuLG99LHt9KTpyfWZ1bmN0aW9uIGEocil7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiByLnN1YnNjcmliZShlKX19KHIuYXNzZXJ0U3RvcmFnZXx8ZnVuY3Rpb24oKXtlLnNldEl0ZW0oXCJAQFwiLDEpLGUucmVtb3ZlSXRlbShcIkBAXCIpfSkoZSk7dmFyIGYscz1mdW5jdGlvbigpe3JldHVybihyLmdldFN0YXRlfHxuKSh0LGUpfTtyZXR1cm4gci5mZXRjaEJlZm9yZVVzZSYmKGY9cygpKSxmdW5jdGlvbihuKXtyLmZldGNoQmVmb3JlVXNlfHwoZj1zKCkpLFwib2JqZWN0XCI9PXR5cGVvZiBmJiZudWxsIT09ZiYmKG4ucmVwbGFjZVN0YXRlKHIub3ZlcndyaXRlP2Y6aShuLnN0YXRlLGYse2FycmF5TWVyZ2U6ci5hcnJheU1lcmdlcnx8ZnVuY3Rpb24ocixlKXtyZXR1cm4gZX0sY2xvbmU6ITF9KSksKHIucmVoeWRyYXRlZHx8ZnVuY3Rpb24oKXt9KShuKSksKHIuc3Vic2NyaWJlcnx8YSkobikoZnVuY3Rpb24obixpKXsoci5maWx0ZXJ8fG8pKG4pJiYoci5zZXRTdGF0ZXx8YykodCwoci5yZWR1Y2VyfHx1KShpLHIucGF0aHMpLGUpfSl9fVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dnVleC1wZXJzaXN0ZWRzdGF0ZS5lcy5qcy5tYXBcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKGlwaG9uZXxpcG9kfGlwYWQpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGZuLCB0aGF0LCBBU19FTlRSSUVTID8gMiA6IDEpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gQVNfRU5UUklFU1xuICAgICAgICAgID8gYm91bmRGdW5jdGlvbihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSlcbiAgICAgICAgICA6IGJvdW5kRnVuY3Rpb24oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICByZXN1bHQgPSBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBib3VuZEZ1bmN0aW9uLCBzdGVwLnZhbHVlLCBBU19FTlRSSUVTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG5cbml0ZXJhdGUuc3RvcCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgcmVzdWx0KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgbmF0aXZlVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlVG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxudmFyIElOQ09SUkVDVF9OQU1FID0gbmF0aXZlVG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSBTdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSBTdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpID8gZmxhZ3MuY2FsbChSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gZ2V0QnVpbHRJbihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgQ29uc3RydWN0b3IgJiYgIUNvbnN0cnVjdG9yW1NQRUNJRVNdKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICAgIH0pO1xuICB9XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xuXG52YXIgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudmFyIHJ1biA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgcnVubmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcnVuKGlkKTtcbiAgfTtcbn07XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgcG9zdCA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKFxuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmXG4gICAgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiZcbiAgICAhZ2xvYmFsLmltcG9ydFNjcmlwdHMgJiZcbiAgICAhZmFpbHMocG9zdCkgJiZcbiAgICBsb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2ZpbGU6J1xuICApIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQsIHZhbHVlO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIi8qIVxuICogdnVleCB2NC4wLjAtcmMuMVxuICogKGMpIDIwMjAgRXZhbiBZb3VcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgeyBpbmplY3QsIHdhdGNoLCByZWFjdGl2ZSwgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuXG52YXIgc3RvcmVLZXkgPSAnc3RvcmUnO1xuXG5mdW5jdGlvbiB1c2VTdG9yZSAoa2V5KSB7XG4gIGlmICgga2V5ID09PSB2b2lkIDAgKSBrZXkgPSBudWxsO1xuXG4gIHJldHVybiBpbmplY3Qoa2V5ICE9PSBudWxsID8ga2V5IDogc3RvcmVLZXkpXG59XG5cbnZhciB0YXJnZXQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICA/IHdpbmRvd1xuICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxcbiAgICA6IHt9O1xudmFyIGRldnRvb2xIb29rID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbmZ1bmN0aW9uIGRldnRvb2xQbHVnaW4gKHN0b3JlKSB7XG4gIGlmICghZGV2dG9vbEhvb2spIHsgcmV0dXJuIH1cblxuICBzdG9yZS5fZGV2dG9vbEhvb2sgPSBkZXZ0b29sSG9vaztcblxuICBkZXZ0b29sSG9vay5lbWl0KCd2dWV4OmluaXQnLCBzdG9yZSk7XG5cbiAgZGV2dG9vbEhvb2sub24oJ3Z1ZXg6dHJhdmVsLXRvLXN0YXRlJywgZnVuY3Rpb24gKHRhcmdldFN0YXRlKSB7XG4gICAgc3RvcmUucmVwbGFjZVN0YXRlKHRhcmdldFN0YXRlKTtcbiAgfSk7XG5cbiAgc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uIChtdXRhdGlvbiwgc3RhdGUpIHtcbiAgICBkZXZ0b29sSG9vay5lbWl0KCd2dWV4Om11dGF0aW9uJywgbXV0YXRpb24sIHN0YXRlKTtcbiAgfSwgeyBwcmVwZW5kOiB0cnVlIH0pO1xuXG4gIHN0b3JlLnN1YnNjcmliZUFjdGlvbihmdW5jdGlvbiAoYWN0aW9uLCBzdGF0ZSkge1xuICAgIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6YWN0aW9uJywgYWN0aW9uLCBzdGF0ZSk7XG4gIH0sIHsgcHJlcGVuZDogdHJ1ZSB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGl0ZW0gdGhhdCBwYXNzIHRoZSB0ZXN0XG4gKiBieSBzZWNvbmQgYXJndW1lbnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmXG4gKiBAcmV0dXJuIHsqfVxuICovXG5mdW5jdGlvbiBmaW5kIChsaXN0LCBmKSB7XG4gIHJldHVybiBsaXN0LmZpbHRlcihmKVswXVxufVxuXG4vKipcbiAqIERlZXAgY29weSB0aGUgZ2l2ZW4gb2JqZWN0IGNvbnNpZGVyaW5nIGNpcmN1bGFyIHN0cnVjdHVyZS5cbiAqIFRoaXMgZnVuY3Rpb24gY2FjaGVzIGFsbCBuZXN0ZWQgb2JqZWN0cyBhbmQgaXRzIGNvcGllcy5cbiAqIElmIGl0IGRldGVjdHMgY2lyY3VsYXIgc3RydWN0dXJlLCB1c2UgY2FjaGVkIGNvcHkgdG8gYXZvaWQgaW5maW5pdGUgbG9vcC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBjYWNoZVxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gZGVlcENvcHkgKG9iaiwgY2FjaGUpIHtcbiAgaWYgKCBjYWNoZSA9PT0gdm9pZCAwICkgY2FjaGUgPSBbXTtcblxuICAvLyBqdXN0IHJldHVybiBpZiBvYmogaXMgaW1tdXRhYmxlIHZhbHVlXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb2JqXG4gIH1cblxuICAvLyBpZiBvYmogaXMgaGl0LCBpdCBpcyBpbiBjaXJjdWxhciBzdHJ1Y3R1cmVcbiAgdmFyIGhpdCA9IGZpbmQoY2FjaGUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLm9yaWdpbmFsID09PSBvYmo7IH0pO1xuICBpZiAoaGl0KSB7XG4gICAgcmV0dXJuIGhpdC5jb3B5XG4gIH1cblxuICB2YXIgY29weSA9IEFycmF5LmlzQXJyYXkob2JqKSA/IFtdIDoge307XG4gIC8vIHB1dCB0aGUgY29weSBpbnRvIGNhY2hlIGF0IGZpcnN0XG4gIC8vIGJlY2F1c2Ugd2Ugd2FudCB0byByZWZlciBpdCBpbiByZWN1cnNpdmUgZGVlcENvcHlcbiAgY2FjaGUucHVzaCh7XG4gICAgb3JpZ2luYWw6IG9iaixcbiAgICBjb3B5OiBjb3B5XG4gIH0pO1xuXG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgY29weVtrZXldID0gZGVlcENvcHkob2JqW2tleV0sIGNhY2hlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvcHlcbn1cblxuLyoqXG4gKiBmb3JFYWNoIGZvciBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZm9yRWFjaFZhbHVlIChvYmosIGZuKSB7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmbihvYmpba2V5XSwga2V5KTsgfSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gdmFsICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbXNnKSB7XG4gIGlmICghY29uZGl0aW9uKSB7IHRocm93IG5ldyBFcnJvcigoXCJbdnVleF0gXCIgKyBtc2cpKSB9XG59XG5cbmZ1bmN0aW9uIHBhcnRpYWwgKGZuLCBhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4oYXJnKVxuICB9XG59XG5cbi8vIEJhc2UgZGF0YSBzdHJ1Y3QgZm9yIHN0b3JlJ3MgbW9kdWxlLCBwYWNrYWdlIHdpdGggc29tZSBhdHRyaWJ1dGUgYW5kIG1ldGhvZFxudmFyIE1vZHVsZSA9IGZ1bmN0aW9uIE1vZHVsZSAocmF3TW9kdWxlLCBydW50aW1lKSB7XG4gIHRoaXMucnVudGltZSA9IHJ1bnRpbWU7XG4gIC8vIFN0b3JlIHNvbWUgY2hpbGRyZW4gaXRlbVxuICB0aGlzLl9jaGlsZHJlbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIFN0b3JlIHRoZSBvcmlnaW4gbW9kdWxlIG9iamVjdCB3aGljaCBwYXNzZWQgYnkgcHJvZ3JhbW1lclxuICB0aGlzLl9yYXdNb2R1bGUgPSByYXdNb2R1bGU7XG4gIHZhciByYXdTdGF0ZSA9IHJhd01vZHVsZS5zdGF0ZTtcblxuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSdzIHN0YXRlXG4gIHRoaXMuc3RhdGUgPSAodHlwZW9mIHJhd1N0YXRlID09PSAnZnVuY3Rpb24nID8gcmF3U3RhdGUoKSA6IHJhd1N0YXRlKSB8fCB7fTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IG5hbWVzcGFjZWQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzLm5hbWVzcGFjZWQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISF0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZFxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIGFkZENoaWxkIChrZXksIG1vZHVsZSkge1xuICB0aGlzLl9jaGlsZHJlbltrZXldID0gbW9kdWxlO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkIChrZXkpIHtcbiAgZGVsZXRlIHRoaXMuX2NoaWxkcmVuW2tleV07XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmdldENoaWxkID0gZnVuY3Rpb24gZ2V0Q2hpbGQgKGtleSkge1xuICByZXR1cm4gdGhpcy5fY2hpbGRyZW5ba2V5XVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5oYXNDaGlsZCA9IGZ1bmN0aW9uIGhhc0NoaWxkIChrZXkpIHtcbiAgcmV0dXJuIGtleSBpbiB0aGlzLl9jaGlsZHJlblxufTtcblxuTW9kdWxlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKHJhd01vZHVsZSkge1xuICB0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZCA9IHJhd01vZHVsZS5uYW1lc3BhY2VkO1xuICBpZiAocmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucyA9IHJhd01vZHVsZS5hY3Rpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucyA9IHJhd01vZHVsZS5tdXRhdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmdldHRlcnMgPSByYXdNb2R1bGUuZ2V0dGVycztcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiBmb3JFYWNoQ2hpbGQgKGZuKSB7XG4gIGZvckVhY2hWYWx1ZSh0aGlzLl9jaGlsZHJlbiwgZm4pO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoR2V0dGVyID0gZnVuY3Rpb24gZm9yRWFjaEdldHRlciAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEFjdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hBY3Rpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hNdXRhdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hNdXRhdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucywgZm4pO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTW9kdWxlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBNb2R1bGVDb2xsZWN0aW9uID0gZnVuY3Rpb24gTW9kdWxlQ29sbGVjdGlvbiAocmF3Um9vdE1vZHVsZSkge1xuICAvLyByZWdpc3RlciByb290IG1vZHVsZSAoVnVleC5TdG9yZSBvcHRpb25zKVxuICB0aGlzLnJlZ2lzdGVyKFtdLCByYXdSb290TW9kdWxlLCBmYWxzZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChtb2R1bGUsIGtleSkge1xuICAgIHJldHVybiBtb2R1bGUuZ2V0Q2hpbGQoa2V5KVxuICB9LCB0aGlzLnJvb3QpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXROYW1lc3BhY2UgPSBmdW5jdGlvbiBnZXROYW1lc3BhY2UgKHBhdGgpIHtcbiAgdmFyIG1vZHVsZSA9IHRoaXMucm9vdDtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGtleSkge1xuICAgIG1vZHVsZSA9IG1vZHVsZS5nZXRDaGlsZChrZXkpO1xuICAgIHJldHVybiBuYW1lc3BhY2UgKyAobW9kdWxlLm5hbWVzcGFjZWQgPyBrZXkgKyAnLycgOiAnJylcbiAgfSwgJycpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUkMSAocmF3Um9vdE1vZHVsZSkge1xuICB1cGRhdGUoW10sIHRoaXMucm9vdCwgcmF3Um9vdE1vZHVsZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyIChwYXRoLCByYXdNb2R1bGUsIHJ1bnRpbWUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICBpZiAoIHJ1bnRpbWUgPT09IHZvaWQgMCApIHJ1bnRpbWUgPSB0cnVlO1xuXG4gIHtcbiAgICBhc3NlcnRSYXdNb2R1bGUocGF0aCwgcmF3TW9kdWxlKTtcbiAgfVxuXG4gIHZhciBuZXdNb2R1bGUgPSBuZXcgTW9kdWxlKHJhd01vZHVsZSwgcnVudGltZSk7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgIHRoaXMucm9vdCA9IG5ld01vZHVsZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIHBhcmVudC5hZGRDaGlsZChwYXRoW3BhdGgubGVuZ3RoIC0gMV0sIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyByZWdpc3RlciBuZXN0ZWQgbW9kdWxlc1xuICBpZiAocmF3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3JFYWNoVmFsdWUocmF3TW9kdWxlLm1vZHVsZXMsIGZ1bmN0aW9uIChyYXdDaGlsZE1vZHVsZSwga2V5KSB7XG4gICAgICB0aGlzJDEucmVnaXN0ZXIocGF0aC5jb25jYXQoa2V5KSwgcmF3Q2hpbGRNb2R1bGUsIHJ1bnRpbWUpO1xuICAgIH0pO1xuICB9XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51bnJlZ2lzdGVyID0gZnVuY3Rpb24gdW5yZWdpc3RlciAocGF0aCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICB2YXIga2V5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICB2YXIgY2hpbGQgPSBwYXJlbnQuZ2V0Q2hpbGQoa2V5KTtcblxuICBpZiAoIWNoaWxkKSB7XG4gICAge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gdW5yZWdpc3RlciBtb2R1bGUgJ1wiICsga2V5ICsgXCInLCB3aGljaCBpcyBcIiArXG4gICAgICAgIFwibm90IHJlZ2lzdGVyZWRcIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoIWNoaWxkLnJ1bnRpbWUpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHBhcmVudC5yZW1vdmVDaGlsZChrZXkpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuaXNSZWdpc3RlcmVkID0gZnVuY3Rpb24gaXNSZWdpc3RlcmVkIChwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gIHZhciBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG5cbiAgcmV0dXJuIHBhcmVudC5oYXNDaGlsZChrZXkpXG59O1xuXG5mdW5jdGlvbiB1cGRhdGUgKHBhdGgsIHRhcmdldE1vZHVsZSwgbmV3TW9kdWxlKSB7XG4gIHtcbiAgICBhc3NlcnRSYXdNb2R1bGUocGF0aCwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSB0YXJnZXQgbW9kdWxlXG4gIHRhcmdldE1vZHVsZS51cGRhdGUobmV3TW9kdWxlKTtcblxuICAvLyB1cGRhdGUgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKG5ld01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG5ld01vZHVsZS5tb2R1bGVzKSB7XG4gICAgICBpZiAoIXRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gYWRkIGEgbmV3IG1vZHVsZSAnXCIgKyBrZXkgKyBcIicgb24gaG90IHJlbG9hZGluZywgXCIgK1xuICAgICAgICAgICAgJ21hbnVhbCByZWxvYWQgaXMgbmVlZGVkJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUoXG4gICAgICAgIHBhdGguY29uY2F0KGtleSksXG4gICAgICAgIHRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpLFxuICAgICAgICBuZXdNb2R1bGUubW9kdWxlc1trZXldXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZnVuY3Rpb25Bc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24nXG59O1xuXG52YXIgb2JqZWN0QXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmhhbmRsZXIgPT09ICdmdW5jdGlvbicpOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uIG9yIG9iamVjdCB3aXRoIFwiaGFuZGxlclwiIGZ1bmN0aW9uJ1xufTtcblxudmFyIGFzc2VydFR5cGVzID0ge1xuICBnZXR0ZXJzOiBmdW5jdGlvbkFzc2VydCxcbiAgbXV0YXRpb25zOiBmdW5jdGlvbkFzc2VydCxcbiAgYWN0aW9uczogb2JqZWN0QXNzZXJ0XG59O1xuXG5mdW5jdGlvbiBhc3NlcnRSYXdNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSkge1xuICBPYmplY3Qua2V5cyhhc3NlcnRUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFyYXdNb2R1bGVba2V5XSkgeyByZXR1cm4gfVxuXG4gICAgdmFyIGFzc2VydE9wdGlvbnMgPSBhc3NlcnRUeXBlc1trZXldO1xuXG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZVtrZXldLCBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICAgIGFzc2VydChcbiAgICAgICAgYXNzZXJ0T3B0aW9ucy5hc3NlcnQodmFsdWUpLFxuICAgICAgICBtYWtlQXNzZXJ0aW9uTWVzc2FnZShwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBhc3NlcnRPcHRpb25zLmV4cGVjdGVkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBc3NlcnRpb25NZXNzYWdlIChwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBleHBlY3RlZCkge1xuICB2YXIgYnVmID0ga2V5ICsgXCIgc2hvdWxkIGJlIFwiICsgZXhwZWN0ZWQgKyBcIiBidXQgXFxcIlwiICsga2V5ICsgXCIuXCIgKyB0eXBlICsgXCJcXFwiXCI7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICBidWYgKz0gXCIgaW4gbW9kdWxlIFxcXCJcIiArIChwYXRoLmpvaW4oJy4nKSkgKyBcIlxcXCJcIjtcbiAgfVxuICBidWYgKz0gXCIgaXMgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSArIFwiLlwiO1xuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlIChvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgU3RvcmUob3B0aW9ucylcbn1cblxudmFyIFN0b3JlID0gZnVuY3Rpb24gU3RvcmUgKG9wdGlvbnMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIHtcbiAgICBhc3NlcnQodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnLCBcInZ1ZXggcmVxdWlyZXMgYSBQcm9taXNlIHBvbHlmaWxsIGluIHRoaXMgYnJvd3Nlci5cIik7XG4gICAgYXNzZXJ0KHRoaXMgaW5zdGFuY2VvZiBTdG9yZSwgXCJzdG9yZSBtdXN0IGJlIGNhbGxlZCB3aXRoIHRoZSBuZXcgb3BlcmF0b3IuXCIpO1xuICB9XG5cbiAgdmFyIHBsdWdpbnMgPSBvcHRpb25zLnBsdWdpbnM7IGlmICggcGx1Z2lucyA9PT0gdm9pZCAwICkgcGx1Z2lucyA9IFtdO1xuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7IGlmICggc3RyaWN0ID09PSB2b2lkIDAgKSBzdHJpY3QgPSBmYWxzZTtcblxuICAvLyBzdG9yZSBpbnRlcm5hbCBzdGF0ZVxuICB0aGlzLl9jb21taXR0aW5nID0gZmFsc2U7XG4gIHRoaXMuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX21vZHVsZXMgPSBuZXcgTW9kdWxlQ29sbGVjdGlvbihvcHRpb25zKTtcbiAgdGhpcy5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG4gIHRoaXMuX21ha2VMb2NhbEdldHRlcnNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy8gYmluZCBjb21taXQgYW5kIGRpc3BhdGNoIHRvIHNlbGZcbiAgdmFyIHN0b3JlID0gdGhpcztcbiAgdmFyIHJlZiA9IHRoaXM7XG4gIHZhciBkaXNwYXRjaCA9IHJlZi5kaXNwYXRjaDtcbiAgdmFyIGNvbW1pdCA9IHJlZi5jb21taXQ7XG4gIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiBib3VuZERpc3BhdGNoICh0eXBlLCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoLmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQpXG4gIH07XG4gIHRoaXMuY29tbWl0ID0gZnVuY3Rpb24gYm91bmRDb21taXQgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tbWl0LmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpXG4gIH07XG5cbiAgLy8gc3RyaWN0IG1vZGVcbiAgdGhpcy5zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fbW9kdWxlcy5yb290LnN0YXRlO1xuXG4gIC8vIGluaXQgcm9vdCBtb2R1bGUuXG4gIC8vIHRoaXMgYWxzbyByZWN1cnNpdmVseSByZWdpc3RlcnMgYWxsIHN1Yi1tb2R1bGVzXG4gIC8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG4gIGluc3RhbGxNb2R1bGUodGhpcywgc3RhdGUsIFtdLCB0aGlzLl9tb2R1bGVzLnJvb3QpO1xuXG4gIC8vIGluaXRpYWxpemUgdGhlIHN0b3JlIHN0YXRlLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHJlYWN0aXZpdHlcbiAgLy8gKGFsc28gcmVnaXN0ZXJzIF93cmFwcGVkR2V0dGVycyBhcyBjb21wdXRlZCBwcm9wZXJ0aWVzKVxuICByZXNldFN0b3JlU3RhdGUodGhpcywgc3RhdGUpO1xuXG4gIC8vIGFwcGx5IHBsdWdpbnNcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsgcmV0dXJuIHBsdWdpbih0aGlzJDEpOyB9KTtcblxuICB2YXIgdXNlRGV2dG9vbHMgPSBvcHRpb25zLmRldnRvb2xzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRldnRvb2xzIDogLyogVnVlLmNvbmZpZy5kZXZ0b29scyAqLyB0cnVlO1xuICBpZiAodXNlRGV2dG9vbHMpIHtcbiAgICBkZXZ0b29sUGx1Z2luKHRoaXMpO1xuICB9XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IHN0YXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cblN0b3JlLnByb3RvdHlwZS5pbnN0YWxsID0gZnVuY3Rpb24gaW5zdGFsbCAoYXBwLCBpbmplY3RLZXkpIHtcbiAgYXBwLnByb3ZpZGUoaW5qZWN0S2V5IHx8IHN0b3JlS2V5LCB0aGlzKTtcbiAgYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRzdG9yZSA9IHRoaXM7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9zdGF0ZS5kYXRhXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5zZXQgPSBmdW5jdGlvbiAodikge1xuICB7XG4gICAgYXNzZXJ0KGZhbHNlLCBcInVzZSBzdG9yZS5yZXBsYWNlU3RhdGUoKSB0byBleHBsaWNpdCByZXBsYWNlIHN0b3JlIHN0YXRlLlwiKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uIGNvbW1pdCAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBjb21taXRcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuICAgIHZhciBvcHRpb25zID0gcmVmLm9wdGlvbnM7XG5cbiAgdmFyIG11dGF0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX211dGF0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIGVudHJ5LmZvckVhY2goZnVuY3Rpb24gY29tbWl0SXRlcmF0b3IgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRoaXMuX3N1YnNjcmliZXJzXG4gICAgLnNsaWNlKCkgLy8gc2hhbGxvdyBjb3B5IHRvIHByZXZlbnQgaXRlcmF0b3IgaW52YWxpZGF0aW9uIGlmIHN1YnNjcmliZXIgc3luY2hyb25vdXNseSBjYWxscyB1bnN1YnNjcmliZVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1YihtdXRhdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG5cbiAgaWYgKFxuICAgIFxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnRcbiAgKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJbdnVleF0gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlICsgXCIuIFNpbGVudCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gXCIgK1xuICAgICAgJ1VzZSB0aGUgZmlsdGVyIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHZ1ZS1kZXZ0b29scydcbiAgICApO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCAoX3R5cGUsIF9wYXlsb2FkKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGRpc3BhdGNoXG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuXG4gIHZhciBhY3Rpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fYWN0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gYWN0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgIC5zbGljZSgpIC8vIHNoYWxsb3cgY29weSB0byBwcmV2ZW50IGl0ZXJhdG9yIGludmFsaWRhdGlvbiBpZiBzdWJzY3JpYmVyIHN5bmNocm9ub3VzbHkgY2FsbHMgdW5zdWJzY3JpYmVcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmJlZm9yZTsgfSlcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmUoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBiZWZvcmUgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBlbnRyeS5sZW5ndGggPiAxXG4gICAgPyBQcm9taXNlLmFsbChlbnRyeS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGhhbmRsZXIocGF5bG9hZCk7IH0pKVxuICAgIDogZW50cnlbMF0ocGF5bG9hZCk7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzJDEuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXI7IH0pXG4gICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmFmdGVyKGFjdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYWZ0ZXIgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzb2x2ZShyZXMpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcyQxLl9hY3Rpb25TdWJzY3JpYmVyc1xuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmVycm9yOyB9KVxuICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5lcnJvcihhY3Rpb24sIHRoaXMkMS5zdGF0ZSwgZXJyb3IpOyB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBlcnJvciBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICB9KVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSAoZm4sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoZm4sIHRoaXMuX3N1YnNjcmliZXJzLCBvcHRpb25zKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZUFjdGlvbiA9IGZ1bmN0aW9uIHN1YnNjcmliZUFjdGlvbiAoZm4sIG9wdGlvbnMpIHtcbiAgdmFyIHN1YnMgPSB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgPyB7IGJlZm9yZTogZm4gfSA6IGZuO1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShzdWJzLCB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycywgb3B0aW9ucylcbn07XG5cblN0b3JlLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uIHdhdGNoJDEgKGdldHRlciwgY2IsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB7XG4gICAgYXNzZXJ0KHR5cGVvZiBnZXR0ZXIgPT09ICdmdW5jdGlvbicsIFwic3RvcmUud2F0Y2ggb25seSBhY2NlcHRzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG4gIHJldHVybiB3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBnZXR0ZXIodGhpcyQxLnN0YXRlLCB0aGlzJDEuZ2V0dGVycyk7IH0sIGNiLCBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSlcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZXBsYWNlU3RhdGUgPSBmdW5jdGlvbiByZXBsYWNlU3RhdGUgKHN0YXRlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgdGhpcyQxLl9zdGF0ZS5kYXRhID0gc3RhdGU7XG4gIH0pO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gcmVnaXN0ZXJNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIHtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShwYXRoKSwgXCJtb2R1bGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIEFycmF5LlwiKTtcbiAgICBhc3NlcnQocGF0aC5sZW5ndGggPiAwLCAnY2Fubm90IHJlZ2lzdGVyIHRoZSByb290IG1vZHVsZSBieSB1c2luZyByZWdpc3Rlck1vZHVsZS4nKTtcbiAgfVxuXG4gIHRoaXMuX21vZHVsZXMucmVnaXN0ZXIocGF0aCwgcmF3TW9kdWxlKTtcbiAgaW5zdGFsbE1vZHVsZSh0aGlzLCB0aGlzLnN0YXRlLCBwYXRoLCB0aGlzLl9tb2R1bGVzLmdldChwYXRoKSwgb3B0aW9ucy5wcmVzZXJ2ZVN0YXRlKTtcbiAgLy8gcmVzZXQgc3RvcmUgdG8gdXBkYXRlIGdldHRlcnMuLi5cbiAgcmVzZXRTdG9yZVN0YXRlKHRoaXMsIHRoaXMuc3RhdGUpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnVucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyTW9kdWxlIChwYXRoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgeyBwYXRoID0gW3BhdGhdOyB9XG5cbiAge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy51bnJlZ2lzdGVyKHBhdGgpO1xuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZSh0aGlzJDEuc3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBkZWxldGUgcGFyZW50U3RhdGVbcGF0aFtwYXRoLmxlbmd0aCAtIDFdXTtcbiAgfSk7XG4gIHJlc2V0U3RvcmUodGhpcyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuaGFzTW9kdWxlID0gZnVuY3Rpb24gaGFzTW9kdWxlIChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIHtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShwYXRoKSwgXCJtb2R1bGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIEFycmF5LlwiKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9tb2R1bGVzLmlzUmVnaXN0ZXJlZChwYXRoKVxufTtcblxuU3RvcmUucHJvdG90eXBlLmhvdFVwZGF0ZSA9IGZ1bmN0aW9uIGhvdFVwZGF0ZSAobmV3T3B0aW9ucykge1xuICB0aGlzLl9tb2R1bGVzLnVwZGF0ZShuZXdPcHRpb25zKTtcbiAgcmVzZXRTdG9yZSh0aGlzLCB0cnVlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5fd2l0aENvbW1pdCA9IGZ1bmN0aW9uIF93aXRoQ29tbWl0IChmbikge1xuICB2YXIgY29tbWl0dGluZyA9IHRoaXMuX2NvbW1pdHRpbmc7XG4gIHRoaXMuX2NvbW1pdHRpbmcgPSB0cnVlO1xuICBmbigpO1xuICB0aGlzLl9jb21taXR0aW5nID0gY29tbWl0dGluZztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTdG9yZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbmZ1bmN0aW9uIGdlbmVyaWNTdWJzY3JpYmUgKGZuLCBzdWJzLCBvcHRpb25zKSB7XG4gIGlmIChzdWJzLmluZGV4T2YoZm4pIDwgMCkge1xuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5wcmVwZW5kXG4gICAgICA/IHN1YnMudW5zaGlmdChmbilcbiAgICAgIDogc3Vicy5wdXNoKGZuKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gc3Vicy5pbmRleE9mKGZuKTtcbiAgICBpZiAoaSA+IC0xKSB7XG4gICAgICBzdWJzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZSAoc3RvcmUsIGhvdCkge1xuICBzdG9yZS5fYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzdGF0ZSA9IHN0b3JlLnN0YXRlO1xuICAvLyBpbml0IGFsbCBtb2R1bGVzXG4gIGluc3RhbGxNb2R1bGUoc3RvcmUsIHN0YXRlLCBbXSwgc3RvcmUuX21vZHVsZXMucm9vdCwgdHJ1ZSk7XG4gIC8vIHJlc2V0IHN0YXRlXG4gIHJlc2V0U3RvcmVTdGF0ZShzdG9yZSwgc3RhdGUsIGhvdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmVTdGF0ZSAoc3RvcmUsIHN0YXRlLCBob3QpIHtcbiAgdmFyIG9sZFN0YXRlID0gc3RvcmUuX3N0YXRlO1xuXG4gIC8vIGJpbmQgc3RvcmUgcHVibGljIGdldHRlcnNcbiAgc3RvcmUuZ2V0dGVycyA9IHt9O1xuICAvLyByZXNldCBsb2NhbCBnZXR0ZXJzIGNhY2hlXG4gIHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgd3JhcHBlZEdldHRlcnMgPSBzdG9yZS5fd3JhcHBlZEdldHRlcnM7XG4gIHZhciBjb21wdXRlZE9iaiA9IHt9O1xuICB2YXIgY29tcHV0ZWRDYWNoZSA9IHt9O1xuICBmb3JFYWNoVmFsdWUod3JhcHBlZEdldHRlcnMsIGZ1bmN0aW9uIChmbiwga2V5KSB7XG4gICAgLy8gdXNlIGNvbXB1dGVkIHRvIGxldmVyYWdlIGl0cyBsYXp5LWNhY2hpbmcgbWVjaGFuaXNtXG4gICAgLy8gZGlyZWN0IGlubGluZSBmdW5jdGlvbiB1c2Ugd2lsbCBsZWFkIHRvIGNsb3N1cmUgcHJlc2VydmluZyBvbGRWbS5cbiAgICAvLyB1c2luZyBwYXJ0aWFsIHRvIHJldHVybiBmdW5jdGlvbiB3aXRoIG9ubHkgYXJndW1lbnRzIHByZXNlcnZlZCBpbiBjbG9zdXJlIGVudmlyb25tZW50LlxuICAgIGNvbXB1dGVkT2JqW2tleV0gPSBwYXJ0aWFsKGZuLCBzdG9yZSk7XG4gICAgY29tcHV0ZWRDYWNoZVtrZXldID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tcHV0ZWRPYmpba2V5XSgpOyB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RvcmUuZ2V0dGVycywga2V5LCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXB1dGVkQ2FjaGVba2V5XS52YWx1ZTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUgLy8gZm9yIGxvY2FsIGdldHRlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgc3RvcmUuX3N0YXRlID0gcmVhY3RpdmUoe1xuICAgIGRhdGE6IHN0YXRlXG4gIH0pO1xuXG4gIC8vIGVuYWJsZSBzdHJpY3QgbW9kZSBmb3IgbmV3IHN0YXRlXG4gIGlmIChzdG9yZS5zdHJpY3QpIHtcbiAgICBlbmFibGVTdHJpY3RNb2RlKHN0b3JlKTtcbiAgfVxuXG4gIGlmIChvbGRTdGF0ZSkge1xuICAgIGlmIChob3QpIHtcbiAgICAgIC8vIGRpc3BhdGNoIGNoYW5nZXMgaW4gYWxsIHN1YnNjcmliZWQgd2F0Y2hlcnNcbiAgICAgIC8vIHRvIGZvcmNlIGdldHRlciByZS1ldmFsdWF0aW9uIGZvciBob3QgcmVsb2FkaW5nLlxuICAgICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBvbGRTdGF0ZS5kYXRhID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsTW9kdWxlIChzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLCBtb2R1bGUsIGhvdCkge1xuICB2YXIgaXNSb290ID0gIXBhdGgubGVuZ3RoO1xuICB2YXIgbmFtZXNwYWNlID0gc3RvcmUuX21vZHVsZXMuZ2V0TmFtZXNwYWNlKHBhdGgpO1xuXG4gIC8vIHJlZ2lzdGVyIGluIG5hbWVzcGFjZSBtYXBcbiAgaWYgKG1vZHVsZS5uYW1lc3BhY2VkKSB7XG4gICAgaWYgKHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV0gJiYgdHJ1ZSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIG5hbWVzcGFjZSBcIiArIG5hbWVzcGFjZSArIFwiIGZvciB0aGUgbmFtZXNwYWNlZCBtb2R1bGUgXCIgKyAocGF0aC5qb2luKCcvJykpKSk7XG4gICAgfVxuICAgIHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV0gPSBtb2R1bGU7XG4gIH1cblxuICAvLyBzZXQgc3RhdGVcbiAgaWYgKCFpc1Jvb3QgJiYgIWhvdCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHJvb3RTdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIHZhciBtb2R1bGVOYW1lID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKG1vZHVsZU5hbWUgaW4gcGFyZW50U3RhdGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAoXCJbdnVleF0gc3RhdGUgZmllbGQgXFxcIlwiICsgbW9kdWxlTmFtZSArIFwiXFxcIiB3YXMgb3ZlcnJpZGRlbiBieSBhIG1vZHVsZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXQgXFxcIlwiICsgKHBhdGguam9pbignLicpKSArIFwiXFxcIlwiKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudFN0YXRlW21vZHVsZU5hbWVdID0gbW9kdWxlLnN0YXRlO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGxvY2FsID0gbW9kdWxlLmNvbnRleHQgPSBtYWtlTG9jYWxDb250ZXh0KHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpO1xuXG4gIG1vZHVsZS5mb3JFYWNoTXV0YXRpb24oZnVuY3Rpb24gKG11dGF0aW9uLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJNdXRhdGlvbihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIG11dGF0aW9uLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQWN0aW9uKGZ1bmN0aW9uIChhY3Rpb24sIGtleSkge1xuICAgIHZhciB0eXBlID0gYWN0aW9uLnJvb3QgPyBrZXkgOiBuYW1lc3BhY2UgKyBrZXk7XG4gICAgdmFyIGhhbmRsZXIgPSBhY3Rpb24uaGFuZGxlciB8fCBhY3Rpb247XG4gICAgcmVnaXN0ZXJBY3Rpb24oc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hHZXR0ZXIoZnVuY3Rpb24gKGdldHRlciwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyR2V0dGVyKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgZ2V0dGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkLCBrZXkpIHtcbiAgICBpbnN0YWxsTW9kdWxlKHN0b3JlLCByb290U3RhdGUsIHBhdGguY29uY2F0KGtleSksIGNoaWxkLCBob3QpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBtYWtlIGxvY2FsaXplZCBkaXNwYXRjaCwgY29tbWl0LCBnZXR0ZXJzIGFuZCBzdGF0ZVxuICogaWYgdGhlcmUgaXMgbm8gbmFtZXNwYWNlLCBqdXN0IHVzZSByb290IG9uZXNcbiAqL1xuZnVuY3Rpb24gbWFrZUxvY2FsQ29udGV4dCAoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCkge1xuICB2YXIgbm9OYW1lc3BhY2UgPSBuYW1lc3BhY2UgPT09ICcnO1xuXG4gIHZhciBsb2NhbCA9IHtcbiAgICBkaXNwYXRjaDogbm9OYW1lc3BhY2UgPyBzdG9yZS5kaXNwYXRjaCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAoICFzdG9yZS5fYWN0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgYWN0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaCh0eXBlLCBwYXlsb2FkKVxuICAgIH0sXG5cbiAgICBjb21taXQ6IG5vTmFtZXNwYWNlID8gc3RvcmUuY29tbWl0IDogZnVuY3Rpb24gKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJncy5wYXlsb2FkO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3MudHlwZTtcblxuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJvb3QpIHtcbiAgICAgICAgdHlwZSA9IG5hbWVzcGFjZSArIHR5cGU7XG4gICAgICAgIGlmICggIXN0b3JlLl9tdXRhdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIG11dGF0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0b3JlLmNvbW1pdCh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZ2V0dGVycyBhbmQgc3RhdGUgb2JqZWN0IG11c3QgYmUgZ290dGVuIGxhemlseVxuICAvLyBiZWNhdXNlIHRoZXkgd2lsbCBiZSBjaGFuZ2VkIGJ5IHN0YXRlIHVwZGF0ZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsb2NhbCwge1xuICAgIGdldHRlcnM6IHtcbiAgICAgIGdldDogbm9OYW1lc3BhY2VcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZUxvY2FsR2V0dGVycyhzdG9yZSwgbmFtZXNwYWNlKTsgfVxuICAgIH0sXG4gICAgc3RhdGU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0TmVzdGVkU3RhdGUoc3RvcmUuc3RhdGUsIHBhdGgpOyB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbG9jYWxcbn1cblxuZnVuY3Rpb24gbWFrZUxvY2FsR2V0dGVycyAoc3RvcmUsIG5hbWVzcGFjZSkge1xuICBpZiAoIXN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXSkge1xuICAgIHZhciBnZXR0ZXJzUHJveHkgPSB7fTtcbiAgICB2YXIgc3BsaXRQb3MgPSBuYW1lc3BhY2UubGVuZ3RoO1xuICAgIE9iamVjdC5rZXlzKHN0b3JlLmdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIC8vIHNraXAgaWYgdGhlIHRhcmdldCBnZXR0ZXIgaXMgbm90IG1hdGNoIHRoaXMgbmFtZXNwYWNlXG4gICAgICBpZiAodHlwZS5zbGljZSgwLCBzcGxpdFBvcykgIT09IG5hbWVzcGFjZSkgeyByZXR1cm4gfVxuXG4gICAgICAvLyBleHRyYWN0IGxvY2FsIGdldHRlciB0eXBlXG4gICAgICB2YXIgbG9jYWxUeXBlID0gdHlwZS5zbGljZShzcGxpdFBvcyk7XG5cbiAgICAgIC8vIEFkZCBhIHBvcnQgdG8gdGhlIGdldHRlcnMgcHJveHkuXG4gICAgICAvLyBEZWZpbmUgYXMgZ2V0dGVyIHByb3BlcnR5IGJlY2F1c2VcbiAgICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIGV2YWx1YXRlIHRoZSBnZXR0ZXJzIGluIHRoaXMgdGltZS5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzUHJveHksIGxvY2FsVHlwZSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnNbdHlwZV07IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXSA9IGdldHRlcnNQcm94eTtcbiAgfVxuXG4gIHJldHVybiBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV1cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJNdXRhdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZE11dGF0aW9uSGFuZGxlciAocGF5bG9hZCkge1xuICAgIGhhbmRsZXIuY2FsbChzdG9yZSwgbG9jYWwuc3RhdGUsIHBheWxvYWQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJBY3Rpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fYWN0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX2FjdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZEFjdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5jYWxsKHN0b3JlLCB7XG4gICAgICBkaXNwYXRjaDogbG9jYWwuZGlzcGF0Y2gsXG4gICAgICBjb21taXQ6IGxvY2FsLmNvbW1pdCxcbiAgICAgIGdldHRlcnM6IGxvY2FsLmdldHRlcnMsXG4gICAgICBzdGF0ZTogbG9jYWwuc3RhdGUsXG4gICAgICByb290R2V0dGVyczogc3RvcmUuZ2V0dGVycyxcbiAgICAgIHJvb3RTdGF0ZTogc3RvcmUuc3RhdGVcbiAgICB9LCBwYXlsb2FkKTtcbiAgICBpZiAoIWlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUocmVzKTtcbiAgICB9XG4gICAgaWYgKHN0b3JlLl9kZXZ0b29sSG9vaykge1xuICAgICAgcmV0dXJuIHJlcy5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHN0b3JlLl9kZXZ0b29sSG9vay5lbWl0KCd2dWV4OmVycm9yJywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJHZXR0ZXIgKHN0b3JlLCB0eXBlLCByYXdHZXR0ZXIsIGxvY2FsKSB7XG4gIGlmIChzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0pIHtcbiAgICB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBkdXBsaWNhdGUgZ2V0dGVyIGtleTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHN0b3JlLl93cmFwcGVkR2V0dGVyc1t0eXBlXSA9IGZ1bmN0aW9uIHdyYXBwZWRHZXR0ZXIgKHN0b3JlKSB7XG4gICAgcmV0dXJuIHJhd0dldHRlcihcbiAgICAgIGxvY2FsLnN0YXRlLCAvLyBsb2NhbCBzdGF0ZVxuICAgICAgbG9jYWwuZ2V0dGVycywgLy8gbG9jYWwgZ2V0dGVyc1xuICAgICAgc3RvcmUuc3RhdGUsIC8vIHJvb3Qgc3RhdGVcbiAgICAgIHN0b3JlLmdldHRlcnMgLy8gcm9vdCBnZXR0ZXJzXG4gICAgKVxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmFibGVTdHJpY3RNb2RlIChzdG9yZSkge1xuICB3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5fc3RhdGUuZGF0YTsgfSwgZnVuY3Rpb24gKCkge1xuICAgIHtcbiAgICAgIGFzc2VydChzdG9yZS5fY29tbWl0dGluZywgXCJkbyBub3QgbXV0YXRlIHZ1ZXggc3RvcmUgc3RhdGUgb3V0c2lkZSBtdXRhdGlvbiBoYW5kbGVycy5cIik7XG4gICAgfVxuICB9LCB7IGRlZXA6IHRydWUsIGZsdXNoOiAnc3luYycgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5lc3RlZFN0YXRlIChzdGF0ZSwgcGF0aCkge1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBrZXkpIHsgcmV0dXJuIHN0YXRlW2tleV07IH0sIHN0YXRlKVxufVxuXG5mdW5jdGlvbiB1bmlmeU9iamVjdFN0eWxlICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdCh0eXBlKSAmJiB0eXBlLnR5cGUpIHtcbiAgICBvcHRpb25zID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkID0gdHlwZTtcbiAgICB0eXBlID0gdHlwZS50eXBlO1xuICB9XG5cbiAge1xuICAgIGFzc2VydCh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycsIChcImV4cGVjdHMgc3RyaW5nIGFzIHRoZSB0eXBlLCBidXQgZm91bmQgXCIgKyAodHlwZW9mIHR5cGUpICsgXCIuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQsIG9wdGlvbnM6IG9wdGlvbnMgfVxufVxuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZ2V0dGluZyB0aGUgc3RhdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBzdGF0ZXMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBzdGF0ZSBhbmQgZ2V0dGVycyBmb3IgcGFyYW0sIHlvdSBjYW4gZG8gc29tZXRoaW5nIGZvciBzdGF0ZSBhbmQgZ2V0dGVycyBpbiBpdC5cbiAqIEBwYXJhbSB7T2JqZWN0fVxuICovXG52YXIgbWFwU3RhdGUgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgc3RhdGVzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgaWYgKCAhaXNWYWxpZE1hcChzdGF0ZXMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcFN0YXRlOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChzdGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRTdGF0ZSAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLiRzdG9yZS5zdGF0ZTtcbiAgICAgIHZhciBnZXR0ZXJzID0gdGhpcy4kc3RvcmUuZ2V0dGVycztcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwU3RhdGUnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gbW9kdWxlLmNvbnRleHQuc3RhdGU7XG4gICAgICAgIGdldHRlcnMgPSBtb2R1bGUuY29udGV4dC5nZXR0ZXJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuY2FsbCh0aGlzLCBzdGF0ZSwgZ2V0dGVycylcbiAgICAgICAgOiBzdGF0ZVt2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBjb21taXR0aW5nIHRoZSBtdXRhdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gbXV0YXRpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGNvbW1pdGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gY29tbWl0IG11dGF0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcE11dGF0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBtdXRhdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAoICFpc1ZhbGlkTWFwKG11dGF0aW9ucykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwTXV0YXRpb25zOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChtdXRhdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRNdXRhdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgLy8gR2V0IHRoZSBjb21taXQgbWV0aG9kIGZyb20gc3RvcmVcbiAgICAgIHZhciBjb21taXQgPSB0aGlzLiRzdG9yZS5jb21taXQ7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcE11dGF0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29tbWl0ID0gbW9kdWxlLmNvbnRleHQuY29tbWl0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2NvbW1pdF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGNvbW1pdC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIGdldHRlcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IGdldHRlcnNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcEdldHRlcnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgZ2V0dGVycykge1xuICB2YXIgcmVzID0ge307XG4gIGlmICggIWlzVmFsaWRNYXAoZ2V0dGVycykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwR2V0dGVyczogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAoZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICAvLyBUaGUgbmFtZXNwYWNlIGhhcyBiZWVuIG11dGF0ZWQgYnkgbm9ybWFsaXplTmFtZXNwYWNlXG4gICAgdmFsID0gbmFtZXNwYWNlICsgdmFsO1xuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkR2V0dGVyICgpIHtcbiAgICAgIGlmIChuYW1lc3BhY2UgJiYgIWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwR2V0dGVycycsIG5hbWVzcGFjZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoICEodmFsIGluIHRoaXMuJHN0b3JlLmdldHRlcnMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gZ2V0dGVyOiBcIiArIHZhbCkpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGRpc3BhdGNoIHRoZSBhY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IGFjdGlvbnMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBwYXJhbSwgaXQgY2FuIGFjY2VwdCBhbnRob3IgcGFyYW1zLiBZb3UgY2FuIGRpc3BhdGNoIGFjdGlvbiBhbmQgZG8gYW55IG90aGVyIHRoaW5ncyBpbiB0aGlzIGZ1bmN0aW9uLiBzcGVjaWFsbHksIFlvdSBuZWVkIHRvIHBhc3MgYW50aG9yIHBhcmFtcyBmcm9tIHRoZSBtYXBwZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBBY3Rpb25zID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGFjdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBpZiAoICFpc1ZhbGlkTWFwKGFjdGlvbnMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcEFjdGlvbnM6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRBY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIGdldCBkaXNwYXRjaCBmdW5jdGlvbiBmcm9tIHN0b3JlXG4gICAgICB2YXIgZGlzcGF0Y2ggPSB0aGlzLiRzdG9yZS5kaXNwYXRjaDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwQWN0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2ggPSBtb2R1bGUuY29udGV4dC5kaXNwYXRjaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtkaXNwYXRjaF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGRpc3BhdGNoLmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlYmluZGluZyBuYW1lc3BhY2UgcGFyYW0gZm9yIG1hcFhYWCBmdW5jdGlvbiBpbiBzcGVjaWFsIHNjb3BlZCwgYW5kIHJldHVybiB0aGVtIGJ5IHNpbXBsZSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSkgeyByZXR1cm4gKHtcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSlcbn0pOyB9O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgbWFwXG4gKiBub3JtYWxpemVNYXAoWzEsIDIsIDNdKSA9PiBbIHsga2V5OiAxLCB2YWw6IDEgfSwgeyBrZXk6IDIsIHZhbDogMiB9LCB7IGtleTogMywgdmFsOiAzIH0gXVxuICogbm9ybWFsaXplTWFwKHthOiAxLCBiOiAyLCBjOiAzfSkgPT4gWyB7IGtleTogJ2EnLCB2YWw6IDEgfSwgeyBrZXk6ICdiJywgdmFsOiAyIH0sIHsga2V5OiAnYycsIHZhbDogMyB9IF1cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBtYXBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTWFwIChtYXApIHtcbiAgaWYgKCFpc1ZhbGlkTWFwKG1hcCkpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXApXG4gICAgPyBtYXAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IGtleSB9KTsgfSlcbiAgICA6IE9iamVjdC5rZXlzKG1hcCkubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IG1hcFtrZXldIH0pOyB9KVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIHdoZXRoZXIgZ2l2ZW4gbWFwIGlzIHZhbGlkIG9yIG5vdFxuICogQHBhcmFtIHsqfSBtYXBcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRNYXAgKG1hcCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXApIHx8IGlzT2JqZWN0KG1hcClcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiBleHBlY3QgdHdvIHBhcmFtIGNvbnRhaW5zIG5hbWVzcGFjZSBhbmQgbWFwLiBpdCB3aWxsIG5vcm1hbGl6ZSB0aGUgbmFtZXNwYWNlIGFuZCB0aGVuIHRoZSBwYXJhbSdzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBuZXcgbmFtZXNwYWNlIGFuZCB0aGUgbWFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lc3BhY2UgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmFtZXNwYWNlLCBtYXApIHtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG1hcCA9IG5hbWVzcGFjZTtcbiAgICAgIG5hbWVzcGFjZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlLmNoYXJBdChuYW1lc3BhY2UubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgbmFtZXNwYWNlICs9ICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGZuKG5hbWVzcGFjZSwgbWFwKVxuICB9XG59XG5cbi8qKlxuICogU2VhcmNoIGEgc3BlY2lhbCBtb2R1bGUgZnJvbSBzdG9yZSBieSBuYW1lc3BhY2UuIGlmIG1vZHVsZSBub3QgZXhpc3QsIHByaW50IGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWxwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlQnlOYW1lc3BhY2UgKHN0b3JlLCBoZWxwZXIsIG5hbWVzcGFjZSkge1xuICB2YXIgbW9kdWxlID0gc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXTtcbiAgaWYgKCAhbW9kdWxlKSB7XG4gICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gbW9kdWxlIG5hbWVzcGFjZSBub3QgZm91bmQgaW4gXCIgKyBoZWxwZXIgKyBcIigpOiBcIiArIG5hbWVzcGFjZSkpO1xuICB9XG4gIHJldHVybiBtb2R1bGVcbn1cblxuLy8gQ3JlZGl0czogYm9ycm93ZWQgY29kZSBmcm9tIGZjb21iL3JlZHV4LWxvZ2dlclxuXG5mdW5jdGlvbiBjcmVhdGVMb2dnZXIgKHJlZikge1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBjb2xsYXBzZWQgPSByZWYuY29sbGFwc2VkOyBpZiAoIGNvbGxhcHNlZCA9PT0gdm9pZCAwICkgY29sbGFwc2VkID0gdHJ1ZTtcbiAgdmFyIGZpbHRlciA9IHJlZi5maWx0ZXI7IGlmICggZmlsdGVyID09PSB2b2lkIDAgKSBmaWx0ZXIgPSBmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlQmVmb3JlLCBzdGF0ZUFmdGVyKSB7IHJldHVybiB0cnVlOyB9O1xuICB2YXIgdHJhbnNmb3JtZXIgPSByZWYudHJhbnNmb3JtZXI7IGlmICggdHJhbnNmb3JtZXIgPT09IHZvaWQgMCApIHRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZTsgfTtcbiAgdmFyIG11dGF0aW9uVHJhbnNmb3JtZXIgPSByZWYubXV0YXRpb25UcmFuc2Zvcm1lcjsgaWYgKCBtdXRhdGlvblRyYW5zZm9ybWVyID09PSB2b2lkIDAgKSBtdXRhdGlvblRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKG11dCkgeyByZXR1cm4gbXV0OyB9O1xuICB2YXIgYWN0aW9uRmlsdGVyID0gcmVmLmFjdGlvbkZpbHRlcjsgaWYgKCBhY3Rpb25GaWx0ZXIgPT09IHZvaWQgMCApIGFjdGlvbkZpbHRlciA9IGZ1bmN0aW9uIChhY3Rpb24sIHN0YXRlKSB7IHJldHVybiB0cnVlOyB9O1xuICB2YXIgYWN0aW9uVHJhbnNmb3JtZXIgPSByZWYuYWN0aW9uVHJhbnNmb3JtZXI7IGlmICggYWN0aW9uVHJhbnNmb3JtZXIgPT09IHZvaWQgMCApIGFjdGlvblRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGFjdCkgeyByZXR1cm4gYWN0OyB9O1xuICB2YXIgbG9nTXV0YXRpb25zID0gcmVmLmxvZ011dGF0aW9uczsgaWYgKCBsb2dNdXRhdGlvbnMgPT09IHZvaWQgMCApIGxvZ011dGF0aW9ucyA9IHRydWU7XG4gIHZhciBsb2dBY3Rpb25zID0gcmVmLmxvZ0FjdGlvbnM7IGlmICggbG9nQWN0aW9ucyA9PT0gdm9pZCAwICkgbG9nQWN0aW9ucyA9IHRydWU7XG4gIHZhciBsb2dnZXIgPSByZWYubG9nZ2VyOyBpZiAoIGxvZ2dlciA9PT0gdm9pZCAwICkgbG9nZ2VyID0gY29uc29sZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgdmFyIHByZXZTdGF0ZSA9IGRlZXBDb3B5KHN0b3JlLnN0YXRlKTtcblxuICAgIGlmICh0eXBlb2YgbG9nZ2VyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGxvZ011dGF0aW9ucykge1xuICAgICAgc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uIChtdXRhdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgdmFyIG5leHRTdGF0ZSA9IGRlZXBDb3B5KHN0YXRlKTtcblxuICAgICAgICBpZiAoZmlsdGVyKG11dGF0aW9uLCBwcmV2U3RhdGUsIG5leHRTdGF0ZSkpIHtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVkVGltZSA9IGdldEZvcm1hdHRlZFRpbWUoKTtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVkTXV0YXRpb24gPSBtdXRhdGlvblRyYW5zZm9ybWVyKG11dGF0aW9uKTtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwibXV0YXRpb24gXCIgKyAobXV0YXRpb24udHlwZSkgKyBmb3JtYXR0ZWRUaW1lO1xuXG4gICAgICAgICAgc3RhcnRNZXNzYWdlKGxvZ2dlciwgbWVzc2FnZSwgY29sbGFwc2VkKTtcbiAgICAgICAgICBsb2dnZXIubG9nKCclYyBwcmV2IHN0YXRlJywgJ2NvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZCcsIHRyYW5zZm9ybWVyKHByZXZTdGF0ZSkpO1xuICAgICAgICAgIGxvZ2dlci5sb2coJyVjIG11dGF0aW9uJywgJ2NvbG9yOiAjMDNBOUY0OyBmb250LXdlaWdodDogYm9sZCcsIGZvcm1hdHRlZE11dGF0aW9uKTtcbiAgICAgICAgICBsb2dnZXIubG9nKCclYyBuZXh0IHN0YXRlJywgJ2NvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZCcsIHRyYW5zZm9ybWVyKG5leHRTdGF0ZSkpO1xuICAgICAgICAgIGVuZE1lc3NhZ2UobG9nZ2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZTdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChsb2dBY3Rpb25zKSB7XG4gICAgICBzdG9yZS5zdWJzY3JpYmVBY3Rpb24oZnVuY3Rpb24gKGFjdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGFjdGlvbkZpbHRlcihhY3Rpb24sIHN0YXRlKSkge1xuICAgICAgICAgIHZhciBmb3JtYXR0ZWRUaW1lID0gZ2V0Rm9ybWF0dGVkVGltZSgpO1xuICAgICAgICAgIHZhciBmb3JtYXR0ZWRBY3Rpb24gPSBhY3Rpb25UcmFuc2Zvcm1lcihhY3Rpb24pO1xuICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJhY3Rpb24gXCIgKyAoYWN0aW9uLnR5cGUpICsgZm9ybWF0dGVkVGltZTtcblxuICAgICAgICAgIHN0YXJ0TWVzc2FnZShsb2dnZXIsIG1lc3NhZ2UsIGNvbGxhcHNlZCk7XG4gICAgICAgICAgbG9nZ2VyLmxvZygnJWMgYWN0aW9uJywgJ2NvbG9yOiAjMDNBOUY0OyBmb250LXdlaWdodDogYm9sZCcsIGZvcm1hdHRlZEFjdGlvbik7XG4gICAgICAgICAgZW5kTWVzc2FnZShsb2dnZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRNZXNzYWdlIChsb2dnZXIsIG1lc3NhZ2UsIGNvbGxhcHNlZCkge1xuICB2YXIgc3RhcnRNZXNzYWdlID0gY29sbGFwc2VkXG4gICAgPyBsb2dnZXIuZ3JvdXBDb2xsYXBzZWRcbiAgICA6IGxvZ2dlci5ncm91cDtcblxuICAvLyByZW5kZXJcbiAgdHJ5IHtcbiAgICBzdGFydE1lc3NhZ2UuY2FsbChsb2dnZXIsIG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmxvZyhtZXNzYWdlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRNZXNzYWdlIChsb2dnZXIpIHtcbiAgdHJ5IHtcbiAgICBsb2dnZXIuZ3JvdXBFbmQoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5sb2coJ+KAlOKAlCBsb2cgZW5kIOKAlOKAlCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEZvcm1hdHRlZFRpbWUgKCkge1xuICB2YXIgdGltZSA9IG5ldyBEYXRlKCk7XG4gIHJldHVybiAoXCIgQCBcIiArIChwYWQodGltZS5nZXRIb3VycygpLCAyKSkgKyBcIjpcIiArIChwYWQodGltZS5nZXRNaW51dGVzKCksIDIpKSArIFwiOlwiICsgKHBhZCh0aW1lLmdldFNlY29uZHMoKSwgMikpICsgXCIuXCIgKyAocGFkKHRpbWUuZ2V0TWlsbGlzZWNvbmRzKCksIDMpKSlcbn1cblxuZnVuY3Rpb24gcmVwZWF0IChzdHIsIHRpbWVzKSB7XG4gIHJldHVybiAobmV3IEFycmF5KHRpbWVzICsgMSkpLmpvaW4oc3RyKVxufVxuXG5mdW5jdGlvbiBwYWQgKG51bSwgbWF4TGVuZ3RoKSB7XG4gIHJldHVybiByZXBlYXQoJzAnLCBtYXhMZW5ndGggLSBudW0udG9TdHJpbmcoKS5sZW5ndGgpICsgbnVtXG59XG5cbnZhciBpbmRleCA9IHtcbiAgdmVyc2lvbjogJzQuMC4wLXJjLjEnLFxuICBjcmVhdGVTdG9yZTogY3JlYXRlU3RvcmUsXG4gIFN0b3JlOiBTdG9yZSxcbiAgdXNlU3RvcmU6IHVzZVN0b3JlLFxuICBtYXBTdGF0ZTogbWFwU3RhdGUsXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLFxuICBtYXBHZXR0ZXJzOiBtYXBHZXR0ZXJzLFxuICBtYXBBY3Rpb25zOiBtYXBBY3Rpb25zLFxuICBjcmVhdGVOYW1lc3BhY2VkSGVscGVyczogY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMsXG4gIGNyZWF0ZUxvZ2dlcjogY3JlYXRlTG9nZ2VyXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbmV4cG9ydCB7IFN0b3JlLCBjcmVhdGVMb2dnZXIsIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzLCBjcmVhdGVTdG9yZSwgbWFwQWN0aW9ucywgbWFwR2V0dGVycywgbWFwTXV0YXRpb25zLCBtYXBTdGF0ZSwgdXNlU3RvcmUgfTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjYuNScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG5cbnZhciBuYXRpdmVBc3NpZ24gPSBPYmplY3QuYXNzaWduO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5tb2R1bGUuZXhwb3J0cyA9ICFuYXRpdmVBc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgbmF0aXZlQXNzaWduKHsgYjogMSB9LCBuYXRpdmVBc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pLCB7IGI6IDIgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlO1xuICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtzeW1ib2xdID0gNztcbiAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikgeyBCW2Nocl0gPSBjaHI7IH0pO1xuICByZXR1cm4gbmF0aXZlQXNzaWduKHt9LCBBKVtzeW1ib2xdICE9IDcgfHwgb2JqZWN0S2V5cyhuYXRpdmVBc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xuICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IEluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IG9iamVjdEtleXMoUykuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogbmF0aXZlQXNzaWduO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwiLyohXG4gICogdnVlLXJvdXRlciB2NC4wLjAtcmMuMVxuICAqIChjKSAyMDIwIEVkdWFyZG8gU2FuIE1hcnRpbiBNb3JvdGVcbiAgKiBAbGljZW5zZSBNSVRcbiAgKi9cbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSwgaW5qZWN0LCBvblVubW91bnRlZCwgb25EZWFjdGl2YXRlZCwgb25BY3RpdmF0ZWQsIGNvbXB1dGVkLCB1bnJlZiwgZGVmaW5lQ29tcG9uZW50LCByZWFjdGl2ZSwgaCwgcHJvdmlkZSwgcmVmLCB3YXRjaCwgc2hhbGxvd1JlZiwgbmV4dFRpY2sgfSBmcm9tICd2dWUnO1xuXG5jb25zdCBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xyXG5jb25zdCBQb2x5U3ltYm9sID0gKG5hbWUpID0+IFxyXG4vLyB2ciA9IHZ1ZSByb3V0ZXJcclxuaGFzU3ltYm9sXHJcbiAgICA/IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnW3Z1ZS1yb3V0ZXJdOiAnICsgbmFtZSA6IG5hbWUpXHJcbiAgICA6ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnW3Z1ZS1yb3V0ZXJdOiAnIDogJ192cl8nKSArIG5hbWU7XHJcbi8vIHJ2bG0gPSBSb3V0ZXIgVmlldyBMb2NhdGlvbiBNYXRjaGVkXHJcbmNvbnN0IG1hdGNoZWRSb3V0ZUtleSA9IC8qI19fUFVSRV9fKi8gUG9seVN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAncm91dGVyIHZpZXcgbG9jYXRpb24gbWF0Y2hlZCcgOiAncnZsbScpO1xyXG4vLyBydmQgPSBSb3V0ZXIgVmlldyBEZXB0aFxyXG5jb25zdCB2aWV3RGVwdGhLZXkgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlciB2aWV3IGRlcHRoJyA6ICdydmQnKTtcclxuLy8gciA9IHJvdXRlclxyXG5jb25zdCByb3V0ZXJLZXkgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlcicgOiAncicpO1xyXG4vLyBydCA9IHJvdXRlIGxvY2F0aW9uXHJcbmNvbnN0IHJvdXRlTG9jYXRpb25LZXkgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlIGxvY2F0aW9uJyA6ICdybCcpO1xuXG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZShvYmopIHtcclxuICAgIHJldHVybiBvYmouX19lc01vZHVsZSB8fCAoaGFzU3ltYm9sICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJyk7XHJcbn1cclxuY29uc3QgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcclxuZnVuY3Rpb24gYXBwbHlUb1BhcmFtcyhmbiwgcGFyYW1zKSB7XHJcbiAgICBjb25zdCBuZXdQYXJhbXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1zW2tleV07XHJcbiAgICAgICAgbmV3UGFyYW1zW2tleV0gPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChmbikgOiBmbih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3UGFyYW1zO1xyXG59XHJcbmxldCBub29wID0gKCkgPT4geyB9O1xuXG5mdW5jdGlvbiB3YXJuKG1zZykge1xyXG4gICAgLy8gYXZvaWQgdXNpbmcgLi4uYXJncyBhcyBpdCBicmVha3MgaW4gb2xkZXIgRWRnZSBidWlsZHNcclxuICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cykuc2xpY2UoMSk7XHJcbiAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgWydbVnVlIFJvdXRlciB3YXJuXTogJyArIG1zZ10uY29uY2F0KGFyZ3MpKTtcclxufVxuXG5jb25zdCBUUkFJTElOR19TTEFTSF9SRSA9IC9cXC8kLztcclxuY29uc3QgcmVtb3ZlVHJhaWxpbmdTbGFzaCA9IChwYXRoKSA9PiBwYXRoLnJlcGxhY2UoVFJBSUxJTkdfU0xBU0hfUkUsICcnKTtcclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgYW4gVVJJIGludG8gYSBub3JtYWxpemVkIGhpc3RvcnkgbG9jYXRpb25cclxuICpcclxuICogQHBhcmFtIHBhcnNlUXVlcnlcclxuICogQHBhcmFtIGxvY2F0aW9uIC0gVVJJIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcGFyYW0gY3VycmVudExvY2F0aW9uIC0gY3VycmVudCBhYnNvbHV0ZSBsb2NhdGlvbi4gQWxsb3dzIHJlc29sdmluZyByZWxhdGl2ZVxyXG4gKiBwYXRocy4gTXVzdCBzdGFydCB3aXRoIGAvYC4gRGVmYXVsdHMgdG8gYC9gXHJcbiAqIEByZXR1cm5zIGEgbm9ybWFsaXplZCBoaXN0b3J5IGxvY2F0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZVVSTChwYXJzZVF1ZXJ5LCBsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uID0gJy8nKSB7XHJcbiAgICBsZXQgcGF0aCwgcXVlcnkgPSB7fSwgc2VhcmNoU3RyaW5nID0gJycsIGhhc2ggPSAnJztcclxuICAgIC8vIENvdWxkIHVzZSBVUkwgYW5kIFVSTFNlYXJjaFBhcmFtcyBidXQgSUUgMTEgZG9lc24ndCBzdXBwb3J0IGl0XHJcbiAgICBjb25zdCBzZWFyY2hQb3MgPSBsb2NhdGlvbi5pbmRleE9mKCc/Jyk7XHJcbiAgICBjb25zdCBoYXNoUG9zID0gbG9jYXRpb24uaW5kZXhPZignIycsIHNlYXJjaFBvcyA+IC0xID8gc2VhcmNoUG9zIDogMCk7XHJcbiAgICBpZiAoc2VhcmNoUG9zID4gLTEpIHtcclxuICAgICAgICBwYXRoID0gbG9jYXRpb24uc2xpY2UoMCwgc2VhcmNoUG9zKTtcclxuICAgICAgICBzZWFyY2hTdHJpbmcgPSBsb2NhdGlvbi5zbGljZShzZWFyY2hQb3MgKyAxLCBoYXNoUG9zID4gLTEgPyBoYXNoUG9zIDogbG9jYXRpb24ubGVuZ3RoKTtcclxuICAgICAgICBxdWVyeSA9IHBhcnNlUXVlcnkoc2VhcmNoU3RyaW5nKTtcclxuICAgIH1cclxuICAgIGlmIChoYXNoUG9zID4gLTEpIHtcclxuICAgICAgICBwYXRoID0gcGF0aCB8fCBsb2NhdGlvbi5zbGljZSgwLCBoYXNoUG9zKTtcclxuICAgICAgICAvLyBrZWVwIHRoZSAjIGNoYXJhY3RlclxyXG4gICAgICAgIGhhc2ggPSBsb2NhdGlvbi5zbGljZShoYXNoUG9zLCBsb2NhdGlvbi5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgLy8gbm8gc2VhcmNoIGFuZCBubyBxdWVyeVxyXG4gICAgcGF0aCA9IHJlc29sdmVSZWxhdGl2ZVBhdGgocGF0aCAhPSBudWxsID8gcGF0aCA6IGxvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24pO1xyXG4gICAgLy8gZW1wdHkgcGF0aCBtZWFucyBhIHJlbGF0aXZlIHF1ZXJ5IG9yIGhhc2ggYD9mb289ZmAsIGAjdGhpbmdgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGZ1bGxQYXRoOiBwYXRoICsgKHNlYXJjaFN0cmluZyAmJiAnPycpICsgc2VhcmNoU3RyaW5nICsgaGFzaCxcclxuICAgICAgICBwYXRoLFxyXG4gICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgIGhhc2gsXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBTdHJpbmdpZmllcyBhIFVSTCBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHN0cmluZ2lmeVF1ZXJ5XHJcbiAqIEBwYXJhbSBsb2NhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5VVJMKHN0cmluZ2lmeVF1ZXJ5LCBsb2NhdGlvbikge1xyXG4gICAgbGV0IHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnkgPyBzdHJpbmdpZnlRdWVyeShsb2NhdGlvbi5xdWVyeSkgOiAnJztcclxuICAgIHJldHVybiBsb2NhdGlvbi5wYXRoICsgKHF1ZXJ5ICYmICc/JykgKyBxdWVyeSArIChsb2NhdGlvbi5oYXNoIHx8ICcnKTtcclxufVxyXG4vKipcclxuICogU3RyaXBzIG9mZiB0aGUgYmFzZSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgYSBsb2NhdGlvbi5wYXRobmFtZSBpbiBhIG5vblxyXG4gKiBjYXNlLXNlbnNpdGl2ZSB3YXkuXHJcbiAqXHJcbiAqIEBwYXJhbSBwYXRobmFtZSAtIGxvY2F0aW9uLnBhdGhuYW1lXHJcbiAqIEBwYXJhbSBiYXNlIC0gYmFzZSB0byBzdHJpcCBvZmZcclxuICovXHJcbmZ1bmN0aW9uIHN0cmlwQmFzZShwYXRobmFtZSwgYmFzZSkge1xyXG4gICAgLy8gbm8gYmFzZSBvciBiYXNlIGlzIG5vdCBmb3VuZCBhdCB0aGUgYmVnaW5uaW5nXHJcbiAgICBpZiAoIWJhc2UgfHwgcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKGJhc2UudG9Mb3dlckNhc2UoKSkpXHJcbiAgICAgICAgcmV0dXJuIHBhdGhuYW1lO1xyXG4gICAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKGJhc2UubGVuZ3RoKSB8fCAnLyc7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyBpZiB0d28gUm91dGVMb2NhdGlvbiBhcmUgZXF1YWwuIFRoaXMgbWVhbnMgdGhhdCBib3RoIGxvY2F0aW9ucyBhcmVcclxuICogcG9pbnRpbmcgdG93YXJkcyB0aGUgc2FtZSB7QGxpbmsgUm91dGVSZWNvcmR9IGFuZCB0aGF0IGFsbCBgcGFyYW1zYCwgYHF1ZXJ5YFxyXG4gKiBwYXJhbWV0ZXJzIGFuZCBgaGFzaGAgYXJlIHRoZSBzYW1lXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gZmlyc3Qge0BsaW5rIFJvdXRlTG9jYXRpb259XHJcbiAqIEBwYXJhbSBiIC0gc2Vjb25kIHtAbGluayBSb3V0ZUxvY2F0aW9ufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVMb2NhdGlvbihzdHJpbmdpZnlRdWVyeSwgYSwgYikge1xyXG4gICAgbGV0IGFMYXN0SW5kZXggPSBhLm1hdGNoZWQubGVuZ3RoIC0gMTtcclxuICAgIGxldCBiTGFzdEluZGV4ID0gYi5tYXRjaGVkLmxlbmd0aCAtIDE7XHJcbiAgICByZXR1cm4gKGFMYXN0SW5kZXggPiAtMSAmJlxyXG4gICAgICAgIGFMYXN0SW5kZXggPT09IGJMYXN0SW5kZXggJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZVJlY29yZChhLm1hdGNoZWRbYUxhc3RJbmRleF0sIGIubWF0Y2hlZFtiTGFzdEluZGV4XSkgJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zKGEucGFyYW1zLCBiLnBhcmFtcykgJiZcclxuICAgICAgICBzdHJpbmdpZnlRdWVyeShhLnF1ZXJ5KSA9PT0gc3RyaW5naWZ5UXVlcnkoYi5xdWVyeSkgJiZcclxuICAgICAgICBhLmhhc2ggPT09IGIuaGFzaCk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrIGlmIHR3byBgUm91dGVSZWNvcmRzYCBhcmUgZXF1YWwuIFRha2VzIGludG8gYWNjb3VudCBhbGlhc2VzOiB0aGV5IGFyZVxyXG4gKiBjb25zaWRlcmVkIGVxdWFsIHRvIHRoZSBgUm91dGVSZWNvcmRgIHRoZXkgYXJlIGFsaWFzaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gYSAtIGZpcnN0IHtAbGluayBSb3V0ZVJlY29yZH1cclxuICogQHBhcmFtIGIgLSBzZWNvbmQge0BsaW5rIFJvdXRlUmVjb3JkfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVSZWNvcmQoYSwgYikge1xyXG4gICAgLy8gc2luY2UgdGhlIG9yaWdpbmFsIHJlY29yZCBoYXMgYW4gdW5kZWZpbmVkIHZhbHVlIGZvciBhbGlhc09mXHJcbiAgICAvLyBidXQgYWxsIGFsaWFzZXMgcG9pbnQgdG8gdGhlIG9yaWdpbmFsIHJlY29yZCwgdGhpcyB3aWxsIGFsd2F5cyBjb21wYXJlXHJcbiAgICAvLyB0aGUgb3JpZ2luYWwgcmVjb3JkXHJcbiAgICByZXR1cm4gKGEuYWxpYXNPZiB8fCBhKSA9PT0gKGIuYWxpYXNPZiB8fCBiKTtcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zKGEsIGIpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhhKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gYSkge1xyXG4gICAgICAgIGlmICghaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlKGFba2V5XSwgYltrZXldKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlKGEsIGIpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGEpXHJcbiAgICAgICAgPyBpc0VxdWl2YWxlbnRBcnJheShhLCBiKVxyXG4gICAgICAgIDogQXJyYXkuaXNBcnJheShiKVxyXG4gICAgICAgICAgICA/IGlzRXF1aXZhbGVudEFycmF5KGIsIGEpXHJcbiAgICAgICAgICAgIDogYSA9PT0gYjtcclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgdHdvIGFycmF5cyBhcmUgdGhlIHNhbWUgb3IgaWYgYW4gYXJyYXkgd2l0aCBvbmUgc2luZ2xlIGVudHJ5IGlzIHRoZVxyXG4gKiBzYW1lIGFzIGFub3RoZXIgcHJpbWl0aXZlIHZhbHVlLiBVc2VkIHRvIGNoZWNrIHF1ZXJ5IGFuZCBwYXJhbWV0ZXJzXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gYXJyYXkgb2YgdmFsdWVzXHJcbiAqIEBwYXJhbSBiIC0gYXJyYXkgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIHZhbHVlXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0VxdWl2YWxlbnRBcnJheShhLCBiKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKVxyXG4gICAgICAgID8gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoKHZhbHVlLCBpKSA9PiB2YWx1ZSA9PT0gYltpXSlcclxuICAgICAgICA6IGEubGVuZ3RoID09PSAxICYmIGFbMF0gPT09IGI7XHJcbn1cclxuLyoqXHJcbiAqIFJlc29sdmVzIGEgcmVsYXRpdmUgcGF0aCB0aGF0IHN0YXJ0cyB3aXRoIGAuYC5cclxuICpcclxuICogQHBhcmFtIHRvIC0gcGF0aCBsb2NhdGlvbiB3ZSBhcmUgcmVzb2x2aW5nXHJcbiAqIEBwYXJhbSBmcm9tIC0gY3VycmVudExvY2F0aW9uLnBhdGgsIHNob3VsZCBzdGFydCB3aXRoIGAvYFxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZVJlbGF0aXZlUGF0aCh0bywgZnJvbSkge1xyXG4gICAgaWYgKHRvLnN0YXJ0c1dpdGgoJy8nKSlcclxuICAgICAgICByZXR1cm4gdG87XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmcm9tLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICAgIHdhcm4oYENhbm5vdCByZXNvbHZlIGEgcmVsYXRpdmUgbG9jYXRpb24gd2l0aG91dCBhbiBhYnNvbHV0ZSBwYXRoLiBUcnlpbmcgdG8gcmVzb2x2ZSBcIiR7dG99XCIgZnJvbSBcIiR7ZnJvbX1cIi4gSXQgc2hvdWxkIGxvb2sgbGlrZSBcIi8ke2Zyb219XCIuYCk7XHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0bylcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIGNvbnN0IGZyb21TZWdtZW50cyA9IGZyb20uc3BsaXQoJy8nKTtcclxuICAgIGNvbnN0IHRvU2VnbWVudHMgPSB0by5zcGxpdCgnLycpO1xyXG4gICAgbGV0IHBvc2l0aW9uID0gZnJvbVNlZ21lbnRzLmxlbmd0aCAtIDE7XHJcbiAgICBsZXQgdG9Qb3NpdGlvbjtcclxuICAgIGxldCBzZWdtZW50O1xyXG4gICAgZm9yICh0b1Bvc2l0aW9uID0gMDsgdG9Qb3NpdGlvbiA8IHRvU2VnbWVudHMubGVuZ3RoOyB0b1Bvc2l0aW9uKyspIHtcclxuICAgICAgICBzZWdtZW50ID0gdG9TZWdtZW50c1t0b1Bvc2l0aW9uXTtcclxuICAgICAgICAvLyBjYW4ndCBnbyBiZWxvdyB6ZXJvXHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAxIHx8IHNlZ21lbnQgPT09ICcuJylcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgaWYgKHNlZ21lbnQgPT09ICcuLicpXHJcbiAgICAgICAgICAgIHBvc2l0aW9uLS07XHJcbiAgICAgICAgLy8gZm91bmQgc29tZXRoaW5nIHRoYXQgaXMgbm90IHJlbGF0aXZlIHBhdGhcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChmcm9tU2VnbWVudHMuc2xpY2UoMCwgcG9zaXRpb24pLmpvaW4oJy8nKSArXHJcbiAgICAgICAgJy8nICtcclxuICAgICAgICB0b1NlZ21lbnRzXHJcbiAgICAgICAgICAgIC5zbGljZSh0b1Bvc2l0aW9uIC0gKHRvUG9zaXRpb24gPT09IHRvU2VnbWVudHMubGVuZ3RoID8gMSA6IDApKVxyXG4gICAgICAgICAgICAuam9pbignLycpKTtcclxufVxuXG52YXIgTmF2aWdhdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoTmF2aWdhdGlvblR5cGUpIHtcclxuICAgIE5hdmlnYXRpb25UeXBlW1wicG9wXCJdID0gXCJwb3BcIjtcclxuICAgIE5hdmlnYXRpb25UeXBlW1wicHVzaFwiXSA9IFwicHVzaFwiO1xyXG59KShOYXZpZ2F0aW9uVHlwZSB8fCAoTmF2aWdhdGlvblR5cGUgPSB7fSkpO1xyXG52YXIgTmF2aWdhdGlvbkRpcmVjdGlvbjtcclxuKGZ1bmN0aW9uIChOYXZpZ2F0aW9uRGlyZWN0aW9uKSB7XHJcbiAgICBOYXZpZ2F0aW9uRGlyZWN0aW9uW1wiYmFja1wiXSA9IFwiYmFja1wiO1xyXG4gICAgTmF2aWdhdGlvbkRpcmVjdGlvbltcImZvcndhcmRcIl0gPSBcImZvcndhcmRcIjtcclxuICAgIE5hdmlnYXRpb25EaXJlY3Rpb25bXCJ1bmtub3duXCJdID0gXCJcIjtcclxufSkoTmF2aWdhdGlvbkRpcmVjdGlvbiB8fCAoTmF2aWdhdGlvbkRpcmVjdGlvbiA9IHt9KSk7XHJcbi8qKlxyXG4gKiBTdGFydGluZyBsb2NhdGlvbiBmb3IgSGlzdG9yaWVzXHJcbiAqL1xyXG5jb25zdCBTVEFSVCA9ICcnO1xyXG4vLyBHZW5lcmljIHV0aWxzXHJcbi8qKlxyXG4gKiBOb3JtYWxpemVzIGEgYmFzZSBieSByZW1vdmluZyBhbnkgdHJhaWxpbmcgc2xhc2ggYW5kIHJlYWRpbmcgdGhlIGJhc2UgdGFnIGlmXHJcbiAqIHByZXNlbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSBiYXNlIC0gYmFzZSB0byBub3JtYWxpemVcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UoYmFzZSkge1xyXG4gICAgaWYgKCFiYXNlKSB7XHJcbiAgICAgICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcclxuICAgICAgICAgICAgY29uc3QgYmFzZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xyXG4gICAgICAgICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcclxuICAgICAgICAgICAgLy8gc3RyaXAgZnVsbCBVUkwgb3JpZ2luXHJcbiAgICAgICAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15cXHcrOlxcL1xcL1teXFwvXSsvLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBiYXNlID0gJy8nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGVuc3VyZSBsZWFkaW5nIHNsYXNoIHdoZW4gaXQgd2FzIHJlbW92ZWQgYnkgdGhlIHJlZ2V4IGFib3ZlIGF2b2lkIGxlYWRpbmdcclxuICAgIC8vIHNsYXNoIHdpdGggaGFzaCBiZWNhdXNlIHRoZSBmaWxlIGNvdWxkIGJlIHJlYWQgZnJvbSB0aGUgZGlzayBsaWtlIGZpbGU6Ly9cclxuICAgIC8vIGFuZCB0aGUgbGVhZGluZyBzbGFzaCB3b3VsZCBjYXVzZSBwcm9ibGVtc1xyXG4gICAgaWYgKGJhc2VbMF0gIT09ICcvJyAmJiBiYXNlWzBdICE9PSAnIycpXHJcbiAgICAgICAgYmFzZSA9ICcvJyArIGJhc2U7XHJcbiAgICAvLyByZW1vdmUgdGhlIHRyYWlsaW5nIHNsYXNoIHNvIGFsbCBvdGhlciBtZXRob2QgY2FuIGp1c3QgZG8gYGJhc2UgKyBmdWxsUGF0aGBcclxuICAgIC8vIHRvIGJ1aWxkIGFuIGhyZWZcclxuICAgIHJldHVybiByZW1vdmVUcmFpbGluZ1NsYXNoKGJhc2UpO1xyXG59XHJcbi8vIHJlbW92ZSBhbnkgY2hhcmFjdGVyIGJlZm9yZSB0aGUgaGFzaFxyXG5jb25zdCBCRUZPUkVfSEFTSF9SRSA9IC9eW14jXSsjLztcclxuZnVuY3Rpb24gY3JlYXRlSHJlZihiYXNlLCBsb2NhdGlvbikge1xyXG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShCRUZPUkVfSEFTSF9SRSwgJyMnKSArIGxvY2F0aW9uO1xyXG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRQb3NpdGlvbihlbCwgb2Zmc2V0KSB7XHJcbiAgICBjb25zdCBkb2NSZWN0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgY29uc3QgZWxSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJlaGF2aW9yOiBvZmZzZXQuYmVoYXZpb3IsXHJcbiAgICAgICAgbGVmdDogZWxSZWN0LmxlZnQgLSBkb2NSZWN0LmxlZnQgLSAob2Zmc2V0LmxlZnQgfHwgMCksXHJcbiAgICAgICAgdG9wOiBlbFJlY3QudG9wIC0gZG9jUmVjdC50b3AgLSAob2Zmc2V0LnRvcCB8fCAwKSxcclxuICAgIH07XHJcbn1cclxuY29uc3QgY29tcHV0ZVNjcm9sbFBvc2l0aW9uID0gKCkgPT4gKHtcclxuICAgIGxlZnQ6IHdpbmRvdy5wYWdlWE9mZnNldCxcclxuICAgIHRvcDogd2luZG93LnBhZ2VZT2Zmc2V0LFxyXG59KTtcclxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbihwb3NpdGlvbikge1xyXG4gICAgbGV0IHNjcm9sbFRvT3B0aW9ucztcclxuICAgIGlmICgnZWwnIGluIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgbGV0IHBvc2l0aW9uRWwgPSBwb3NpdGlvbi5lbDtcclxuICAgICAgICBjb25zdCBpc0lkU2VsZWN0b3IgPSB0eXBlb2YgcG9zaXRpb25FbCA9PT0gJ3N0cmluZycgJiYgcG9zaXRpb25FbC5zdGFydHNXaXRoKCcjJyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogYGlkYHMgY2FuIGFjY2VwdCBwcmV0dHkgbXVjaCBhbnkgY2hhcmFjdGVycywgaW5jbHVkaW5nIENTUyBjb21iaW5hdG9yc1xyXG4gICAgICAgICAqIGxpa2UgYD5gIG9yIGB+YC4gSXQncyBzdGlsbCBwb3NzaWJsZSB0byByZXRyaWV2ZSBlbGVtZW50cyB1c2luZ1xyXG4gICAgICAgICAqIGBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnficpYCBidXQgaXQgbmVlZHMgdG8gYmUgZXNjYXBlZCB3aGVuIHVzaW5nXHJcbiAgICAgICAgICogYGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNcXFxcficpYCBmb3IgaXQgdG8gYmUgdmFsaWQuIFRoZSBvbmx5XHJcbiAgICAgICAgICogcmVxdWlyZW1lbnRzIGZvciBgaWRgcyBhcmUgdGhlbSB0byBiZSB1bmlxdWUgb24gdGhlIHBhZ2UgYW5kIHRvIG5vdCBiZVxyXG4gICAgICAgICAqIGVtcHR5IChgaWQ9XCJcImApLiBCZWNhdXNlIG9mIHRoYXQsIHdoZW4gcGFzc2luZyBhbiBpZCBzZWxlY3RvciwgaXQgc2hvdWxkXHJcbiAgICAgICAgICogYmUgcHJvcGVybHkgZXNjYXBlZCBmb3IgaXQgdG8gd29yayB3aXRoIGBxdWVyeVNlbGVjdG9yYC4gV2UgY291bGQgY2hlY2tcclxuICAgICAgICAgKiBmb3IgdGhlIGlkIHNlbGVjdG9yIHRvIGJlIHNpbXBsZSAobm8gQ1NTIGNvbWJpbmF0b3JzIGArID5+YCkgYnV0IHRoYXRcclxuICAgICAgICAgKiB3b3VsZCBtYWtlIHRoaW5ncyBpbmNvbnNpc3RlbnQgc2luY2UgdGhleSBhcmUgdmFsaWQgY2hhcmFjdGVycyBmb3IgYW5cclxuICAgICAgICAgKiBgaWRgIGJ1dCB3b3VsZCBuZWVkIHRvIGJlIGVzY2FwZWQgd2hlbiB1c2luZyBgcXVlcnlTZWxlY3RvcmAsIGJyZWFraW5nXHJcbiAgICAgICAgICogdGhlaXIgdXNhZ2UgYW5kIGVuZGluZyB1cCBpbiBubyBzZWxlY3RvciByZXR1cm5lZC4gU2VsZWN0b3JzIG5lZWQgdG8gYmVcclxuICAgICAgICAgKiBlc2NhcGVkOlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogLSBgIzEtdGhpbmdgIGJlY29tZXMgYCNcXDMxIC10aGluZ2BcclxuICAgICAgICAgKiAtIGAjd2l0aH5zeW1ib2xzYCBiZWNvbWVzIGAjd2l0aFxcXFx+c3ltYm9sc2BcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC0gTW9yZSBpbmZvcm1hdGlvbiBhYm91dCAgdGhlIHRvcGljIGNhbiBiZSBmb3VuZCBhdFxyXG4gICAgICAgICAqICAgaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2h0bWw1LWlkLWNsYXNzLlxyXG4gICAgICAgICAqIC0gUHJhY3RpY2FsIGV4YW1wbGU6IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL2h0bWw1LWlkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB0eXBlb2YgcG9zaXRpb24uZWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNJZFNlbGVjdG9yIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3NpdGlvbi5lbC5zbGljZSgxKSkpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvc2l0aW9uLmVsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJZFNlbGVjdG9yICYmIGZvdW5kRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgVGhlIHNlbGVjdG9yIFwiJHtwb3NpdGlvbi5lbH1cIiBzaG91bGQgYmUgcGFzc2VkIGFzIFwiZWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyR7cG9zaXRpb24uZWx9JylcIiBiZWNhdXNlIGl0IHN0YXJ0cyB3aXRoIFwiI1wiLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdG8gYXZvaWQgb3RoZXIgd2FybmluZ3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBUaGUgc2VsZWN0b3IgXCIke3Bvc2l0aW9uLmVsfVwiIGlzIGludmFsaWQuIElmIHlvdSBhcmUgdXNpbmcgYW4gaWQgc2VsZWN0b3IsIG1ha2Ugc3VyZSB0byBlc2NhcGUgaXQuIFlvdSBjYW4gZmluZCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGVzY2FwaW5nIGNoYXJhY3RlcnMgaW4gc2VsZWN0b3JzIGF0IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlcyBvciB1c2UgQ1NTLmVzY2FwZSAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NTUy9lc2NhcGUpLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiB0byBhdm9pZCBvdGhlciB3YXJuaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlbCA9IHR5cGVvZiBwb3NpdGlvbkVsID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICA/IGlzSWRTZWxlY3RvclxyXG4gICAgICAgICAgICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3NpdGlvbkVsLnNsaWNlKDEpKVxyXG4gICAgICAgICAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvc2l0aW9uRWwpXHJcbiAgICAgICAgICAgIDogcG9zaXRpb25FbDtcclxuICAgICAgICBpZiAoIWVsKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQ291bGRuJ3QgZmluZCBlbGVtZW50IHVzaW5nIHNlbGVjdG9yIFwiJHtwb3NpdGlvbi5lbH1cIiByZXR1cm5lZCBieSBzY3JvbGxCZWhhdmlvci5gKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY3JvbGxUb09wdGlvbnMgPSBnZXRFbGVtZW50UG9zaXRpb24oZWwsIHBvc2l0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHNjcm9sbFRvT3B0aW9ucyA9IHBvc2l0aW9uO1xyXG4gICAgfVxyXG4gICAgaWYgKCdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKVxyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxUb09wdGlvbnMpO1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHNjcm9sbFRvT3B0aW9ucy5sZWZ0ICE9IG51bGwgPyBzY3JvbGxUb09wdGlvbnMubGVmdCA6IHdpbmRvdy5wYWdlWE9mZnNldCwgc2Nyb2xsVG9PcHRpb25zLnRvcCAhPSBudWxsID8gc2Nyb2xsVG9PcHRpb25zLnRvcCA6IHdpbmRvdy5wYWdlWU9mZnNldCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2Nyb2xsS2V5KHBhdGgsIGRlbHRhKSB7XHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IGhpc3Rvcnkuc3RhdGUgPyBoaXN0b3J5LnN0YXRlLnBvc2l0aW9uIC0gZGVsdGEgOiAtMTtcclxuICAgIHJldHVybiBwb3NpdGlvbiArIHBhdGg7XHJcbn1cclxuY29uc3Qgc2Nyb2xsUG9zaXRpb25zID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24oa2V5LCBzY3JvbGxQb3NpdGlvbikge1xyXG4gICAgc2Nyb2xsUG9zaXRpb25zLnNldChrZXksIHNjcm9sbFBvc2l0aW9uKTtcclxufVxyXG5mdW5jdGlvbiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGtleSkge1xyXG4gICAgY29uc3Qgc2Nyb2xsID0gc2Nyb2xsUG9zaXRpb25zLmdldChrZXkpO1xyXG4gICAgLy8gY29uc3VtZSBpdCBzbyBpdCdzIG5vdCB1c2VkIGFnYWluXHJcbiAgICBzY3JvbGxQb3NpdGlvbnMuZGVsZXRlKGtleSk7XHJcbiAgICByZXR1cm4gc2Nyb2xsO1xyXG59XHJcbi8vIFRPRE86IFJGQyBhYm91dCBob3cgdG8gc2F2ZSBzY3JvbGwgcG9zaXRpb25cclxuLyoqXHJcbiAqIFNjcm9sbEJlaGF2aW9yIGluc3RhbmNlIHVzZWQgYnkgdGhlIHJvdXRlciB0byBjb21wdXRlIGFuZCByZXN0b3JlIHRoZSBzY3JvbGxcclxuICogcG9zaXRpb24gd2hlbiBuYXZpZ2F0aW5nLlxyXG4gKi9cclxuLy8gZXhwb3J0IGludGVyZmFjZSBTY3JvbGxIYW5kbGVyPFNjcm9sbFBvc2l0aW9uRW50cnkgZXh0ZW5kcyBIaXN0b3J5U3RhdGVWYWx1ZSwgU2Nyb2xsUG9zaXRpb24gZXh0ZW5kcyBTY3JvbGxQb3NpdGlvbkVudHJ5PiB7XHJcbi8vICAgLy8gcmV0dXJucyBhIHNjcm9sbCBwb3NpdGlvbiB0aGF0IGNhbiBiZSBzYXZlZCBpbiBoaXN0b3J5XHJcbi8vICAgY29tcHV0ZSgpOiBTY3JvbGxQb3NpdGlvbkVudHJ5XHJcbi8vICAgLy8gY2FuIHRha2UgYW4gZXh0ZW5kZWQgU2Nyb2xsUG9zaXRpb25FbnRyeVxyXG4vLyAgIHNjcm9sbChwb3NpdGlvbjogU2Nyb2xsUG9zaXRpb24pOiB2b2lkXHJcbi8vIH1cclxuLy8gZXhwb3J0IGNvbnN0IHNjcm9sbEhhbmRsZXI6IFNjcm9sbEhhbmRsZXI8U2Nyb2xsUG9zaXRpb24+ID0ge1xyXG4vLyAgIGNvbXB1dGU6IGNvbXB1dGVTY3JvbGwsXHJcbi8vICAgc2Nyb2xsOiBzY3JvbGxUb1Bvc2l0aW9uLFxyXG4vLyB9XG5cbmxldCBjcmVhdGVCYXNlTG9jYXRpb24gPSAoKSA9PiBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0O1xyXG4vKipcclxuICogQ3JlYXRlcyBhIG5vcm1hbGl6ZWQgaGlzdG9yeSBsb2NhdGlvbiBmcm9tIGEgd2luZG93LmxvY2F0aW9uIG9iamVjdFxyXG4gKiBAcGFyYW0gbG9jYXRpb24gLVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ3VycmVudExvY2F0aW9uKGJhc2UsIGxvY2F0aW9uKSB7XHJcbiAgICBjb25zdCB7IHBhdGhuYW1lLCBzZWFyY2gsIGhhc2ggfSA9IGxvY2F0aW9uO1xyXG4gICAgLy8gYWxsb3dzIGhhc2ggYmFzZWQgdXJsXHJcbiAgICBjb25zdCBoYXNoUG9zID0gYmFzZS5pbmRleE9mKCcjJyk7XHJcbiAgICBpZiAoaGFzaFBvcyA+IC0xKSB7XHJcbiAgICAgICAgLy8gcHJlcGVuZCB0aGUgc3RhcnRpbmcgc2xhc2ggdG8gaGFzaCBzbyB0aGUgdXJsIHN0YXJ0cyB3aXRoIC8jXHJcbiAgICAgICAgbGV0IHBhdGhGcm9tSGFzaCA9IGhhc2guc2xpY2UoMSk7XHJcbiAgICAgICAgaWYgKHBhdGhGcm9tSGFzaFswXSAhPT0gJy8nKVxyXG4gICAgICAgICAgICBwYXRoRnJvbUhhc2ggPSAnLycgKyBwYXRoRnJvbUhhc2g7XHJcbiAgICAgICAgcmV0dXJuIHN0cmlwQmFzZShwYXRoRnJvbUhhc2gsICcnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhdGggPSBzdHJpcEJhc2UocGF0aG5hbWUsIGJhc2UpO1xyXG4gICAgcmV0dXJuIHBhdGggKyBzZWFyY2ggKyBoYXNoO1xyXG59XHJcbmZ1bmN0aW9uIHVzZUhpc3RvcnlMaXN0ZW5lcnMoYmFzZSwgaGlzdG9yeVN0YXRlLCBjdXJyZW50TG9jYXRpb24sIHJlcGxhY2UpIHtcclxuICAgIGxldCBsaXN0ZW5lcnMgPSBbXTtcclxuICAgIGxldCB0ZWFyZG93bnMgPSBbXTtcclxuICAgIC8vIFRPRE86IHNob3VsZCBpdCBiZSBhIHN0YWNrPyBhIERpY3QuIENoZWNrIGlmIHRoZSBwb3BzdGF0ZSBsaXN0ZW5lclxyXG4gICAgLy8gY2FuIHRyaWdnZXIgdHdpY2VcclxuICAgIGxldCBwYXVzZVN0YXRlID0gbnVsbDtcclxuICAgIGNvbnN0IHBvcFN0YXRlSGFuZGxlciA9ICh7IHN0YXRlLCB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdG8gPSBjcmVhdGVDdXJyZW50TG9jYXRpb24oYmFzZSwgbG9jYXRpb24pO1xyXG4gICAgICAgIGNvbnN0IGZyb20gPSBjdXJyZW50TG9jYXRpb24udmFsdWU7XHJcbiAgICAgICAgY29uc3QgZnJvbVN0YXRlID0gaGlzdG9yeVN0YXRlLnZhbHVlO1xyXG4gICAgICAgIGxldCBkZWx0YSA9IDA7XHJcbiAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbi52YWx1ZSA9IHRvO1xyXG4gICAgICAgICAgICBoaXN0b3J5U3RhdGUudmFsdWUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgLy8gaWdub3JlIHRoZSBwb3BzdGF0ZSBhbmQgcmVzZXQgdGhlIHBhdXNlU3RhdGVcclxuICAgICAgICAgICAgaWYgKHBhdXNlU3RhdGUgJiYgcGF1c2VTdGF0ZSA9PT0gZnJvbSkge1xyXG4gICAgICAgICAgICAgICAgcGF1c2VTdGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVsdGEgPSBmcm9tU3RhdGUgPyBzdGF0ZS5wb3NpdGlvbiAtIGZyb21TdGF0ZS5wb3NpdGlvbiA6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXBsYWNlKHRvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coeyBkZWx0YUZyb21DdXJyZW50IH0pXHJcbiAgICAgICAgLy8gSGVyZSB3ZSBjb3VsZCBhbHNvIHJldmVydCB0aGUgbmF2aWdhdGlvbiBieSBjYWxsaW5nIGhpc3RvcnkuZ28oLWRlbHRhKVxyXG4gICAgICAgIC8vIHRoaXMgbGlzdGVuZXIgd2lsbCBoYXZlIHRvIGJlIGFkYXB0ZWQgdG8gbm90IHRyaWdnZXIgYWdhaW4gYW5kIHRvIHdhaXQgZm9yIHRoZSB1cmxcclxuICAgICAgICAvLyB0byBiZSB1cGRhdGVkIGJlZm9yZSB0cmlnZ2VyaW5nIHRoZSBsaXN0ZW5lcnMuIFNvbWUga2luZCBvZiB2YWxpZGF0aW9uIGZ1bmN0aW9uIHdvdWxkIGFsc29cclxuICAgICAgICAvLyBuZWVkIHRvIGJlIHBhc3NlZCB0byB0aGUgbGlzdGVuZXJzIHNvIHRoZSBuYXZpZ2F0aW9uIGNhbiBiZSBhY2NlcHRlZFxyXG4gICAgICAgIC8vIGNhbGwgYWxsIGxpc3RlbmVyc1xyXG4gICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IHtcclxuICAgICAgICAgICAgbGlzdGVuZXIoY3VycmVudExvY2F0aW9uLnZhbHVlLCBmcm9tLCB7XHJcbiAgICAgICAgICAgICAgICBkZWx0YSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IE5hdmlnYXRpb25UeXBlLnBvcCxcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogZGVsdGFcclxuICAgICAgICAgICAgICAgICAgICA/IGRlbHRhID4gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IE5hdmlnYXRpb25EaXJlY3Rpb24uZm9yd2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IE5hdmlnYXRpb25EaXJlY3Rpb24uYmFja1xyXG4gICAgICAgICAgICAgICAgICAgIDogTmF2aWdhdGlvbkRpcmVjdGlvbi51bmtub3duLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBwYXVzZUxpc3RlbmVycygpIHtcclxuICAgICAgICBwYXVzZVN0YXRlID0gY3VycmVudExvY2F0aW9uLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gbGlzdGVuKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy8gc2V0dXAgdGhlIGxpc3RlbmVyIGFuZCBwcmVwYXJlIHRlYXJkb3duIGNhbGxiYWNrc1xyXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICBjb25zdCB0ZWFyZG93biA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0ZWFyZG93bnMucHVzaCh0ZWFyZG93bik7XHJcbiAgICAgICAgcmV0dXJuIHRlYXJkb3duO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYmVmb3JlVW5sb2FkTGlzdGVuZXIoKSB7XHJcbiAgICAgICAgY29uc3QgeyBoaXN0b3J5IH0gPSB3aW5kb3c7XHJcbiAgICAgICAgaWYgKCFoaXN0b3J5LnN0YXRlKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoYXNzaWduKHt9LCBoaXN0b3J5LnN0YXRlLCB7IHNjcm9sbDogY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCkgfSksICcnKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCB0ZWFyZG93biBvZiB0ZWFyZG93bnMpXHJcbiAgICAgICAgICAgIHRlYXJkb3duKCk7XHJcbiAgICAgICAgdGVhcmRvd25zID0gW107XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgcG9wU3RhdGVIYW5kbGVyKTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgYmVmb3JlVW5sb2FkTGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgLy8gc2V0dXAgdGhlIGxpc3RlbmVycyBhbmQgcHJlcGFyZSB0ZWFyZG93biBjYWxsYmFja3NcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHBvcFN0YXRlSGFuZGxlcik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgYmVmb3JlVW5sb2FkTGlzdGVuZXIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwYXVzZUxpc3RlbmVycyxcclxuICAgICAgICBsaXN0ZW4sXHJcbiAgICAgICAgZGVzdHJveSxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBzdGF0ZSBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIGJ1aWxkU3RhdGUoYmFjaywgY3VycmVudCwgZm9yd2FyZCwgcmVwbGFjZWQgPSBmYWxzZSwgY29tcHV0ZVNjcm9sbCA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJhY2ssXHJcbiAgICAgICAgY3VycmVudCxcclxuICAgICAgICBmb3J3YXJkLFxyXG4gICAgICAgIHJlcGxhY2VkLFxyXG4gICAgICAgIHBvc2l0aW9uOiB3aW5kb3cuaGlzdG9yeS5sZW5ndGgsXHJcbiAgICAgICAgc2Nyb2xsOiBjb21wdXRlU2Nyb2xsID8gY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCkgOiBudWxsLFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB1c2VIaXN0b3J5U3RhdGVOYXZpZ2F0aW9uKGJhc2UpIHtcclxuICAgIGNvbnN0IHsgaGlzdG9yeSwgbG9jYXRpb24gfSA9IHdpbmRvdztcclxuICAgIC8vIHByaXZhdGUgdmFyaWFibGVzXHJcbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0ge1xyXG4gICAgICAgIHZhbHVlOiBjcmVhdGVDdXJyZW50TG9jYXRpb24oYmFzZSwgbG9jYXRpb24pLFxyXG4gICAgfTtcclxuICAgIGxldCBoaXN0b3J5U3RhdGUgPSB7IHZhbHVlOiBoaXN0b3J5LnN0YXRlIH07XHJcbiAgICAvLyBidWlsZCBjdXJyZW50IGhpc3RvcnkgZW50cnkgYXMgdGhpcyBpcyBhIGZyZXNoIG5hdmlnYXRpb25cclxuICAgIGlmICghaGlzdG9yeVN0YXRlLnZhbHVlKSB7XHJcbiAgICAgICAgY2hhbmdlTG9jYXRpb24oY3VycmVudExvY2F0aW9uLnZhbHVlLCB7XHJcbiAgICAgICAgICAgIGJhY2s6IG51bGwsXHJcbiAgICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnRMb2NhdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgZm9yd2FyZDogbnVsbCxcclxuICAgICAgICAgICAgLy8gdGhlIGxlbmd0aCBpcyBvZmYgYnkgb25lLCB3ZSBuZWVkIHRvIGRlY3JlYXNlIGl0XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBoaXN0b3J5Lmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgIHJlcGxhY2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAvLyBkb24ndCBhZGQgYSBzY3JvbGwgYXMgdGhlIHVzZXIgbWF5IGhhdmUgYW4gYW5jaG9yIGFuZCB3ZSB3YW50XHJcbiAgICAgICAgICAgIC8vIHNjcm9sbEJlaGF2aW9yIHRvIGJlIHRyaWdnZXJlZCB3aXRob3V0IGEgc2F2ZWQgcG9zaXRpb25cclxuICAgICAgICAgICAgc2Nyb2xsOiBudWxsLFxyXG4gICAgICAgIH0sIHRydWUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2hhbmdlTG9jYXRpb24odG8sIHN0YXRlLCByZXBsYWNlKSB7XHJcbiAgICAgICAgLy8gd2hlbiB0aGUgYmFzZSBoYXMgYSBgI2AsIG9ubHkgdXNlIHRoYXQgZm9yIHRoZSBVUkxcclxuICAgICAgICBjb25zdCBoYXNoSW5kZXggPSBiYXNlLmluZGV4T2YoJyMnKTtcclxuICAgICAgICBjb25zdCB1cmwgPSBoYXNoSW5kZXggPiAtMVxyXG4gICAgICAgICAgICA/IGJhc2Uuc2xpY2UoaGFzaEluZGV4KSArIHRvXHJcbiAgICAgICAgICAgIDogY3JlYXRlQmFzZUxvY2F0aW9uKCkgKyBiYXNlICsgdG87XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gQlJPV1NFUiBRVUlSS1xyXG4gICAgICAgICAgICAvLyBOT1RFOiBTYWZhcmkgdGhyb3dzIGEgU2VjdXJpdHlFcnJvciB3aGVuIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiAxMDAgdGltZXMgaW4gMzAgc2Vjb25kc1xyXG4gICAgICAgICAgICBoaXN0b3J5W3JlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXShzdGF0ZSwgJycsIHVybCk7XHJcbiAgICAgICAgICAgIGhpc3RvcnlTdGF0ZS52YWx1ZSA9IHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ0Vycm9yIHdpdGggcHVzaC9yZXBsYWNlIFN0YXRlJywgZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBGb3JjZSB0aGUgbmF2aWdhdGlvbiwgdGhpcyBhbHNvIHJlc2V0cyB0aGUgY2FsbCBjb3VudFxyXG4gICAgICAgICAgICBsb2NhdGlvbltyZXBsYWNlID8gJ3JlcGxhY2UnIDogJ2Fzc2lnbiddKHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVwbGFjZSh0bywgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gYXNzaWduKHt9LCBoaXN0b3J5LnN0YXRlLCBidWlsZFN0YXRlKGhpc3RvcnlTdGF0ZS52YWx1ZS5iYWNrLCBcclxuICAgICAgICAvLyBrZWVwIGJhY2sgYW5kIGZvcndhcmQgZW50cmllcyBidXQgb3ZlcnJpZGUgY3VycmVudCBwb3NpdGlvblxyXG4gICAgICAgIHRvLCBoaXN0b3J5U3RhdGUudmFsdWUuZm9yd2FyZCwgdHJ1ZSksIGRhdGEsIHsgcG9zaXRpb246IGhpc3RvcnlTdGF0ZS52YWx1ZS5wb3NpdGlvbiB9KTtcclxuICAgICAgICBjaGFuZ2VMb2NhdGlvbih0bywgc3RhdGUsIHRydWUpO1xyXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbi52YWx1ZSA9IHRvO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcHVzaCh0bywgZGF0YSkge1xyXG4gICAgICAgIC8vIEFkZCB0byBjdXJyZW50IGVudHJ5IHRoZSBpbmZvcm1hdGlvbiBvZiB3aGVyZSB3ZSBhcmUgZ29pbmdcclxuICAgICAgICAvLyBhcyB3ZWxsIGFzIHNhdmluZyB0aGUgY3VycmVudCBwb3NpdGlvblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IGFzc2lnbih7fSwgXHJcbiAgICAgICAgLy8gdXNlIGN1cnJlbnQgaGlzdG9yeSBzdGF0ZSB0byBncmFjZWZ1bGx5IGhhbmRsZSBhIHdyb25nIGNhbGwgdG9cclxuICAgICAgICAvLyBoaXN0b3J5LnJlcGxhY2VTdGF0ZVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyLW5leHQvaXNzdWVzLzM2NlxyXG4gICAgICAgIGhpc3RvcnlTdGF0ZS52YWx1ZSwgaGlzdG9yeS5zdGF0ZSwge1xyXG4gICAgICAgICAgICBmb3J3YXJkOiB0byxcclxuICAgICAgICAgICAgc2Nyb2xsOiBjb21wdXRlU2Nyb2xsUG9zaXRpb24oKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoaXN0b3J5LnN0YXRlKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYGhpc3Rvcnkuc3RhdGUgc2VlbXMgdG8gaGF2ZSBiZWVuIG1hbnVhbGx5IHJlcGxhY2VkIHdpdGhvdXQgcHJlc2VydmluZyB0aGUgbmVjZXNzYXJ5IHZhbHVlcy4gTWFrZSBzdXJlIHRvIHByZXNlcnZlIGV4aXN0aW5nIGhpc3Rvcnkgc3RhdGUgaWYgeW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGhpc3RvcnkucmVwbGFjZVN0YXRlOlxcblxcbmAgK1xyXG4gICAgICAgICAgICAgICAgYGhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3Rvcnkuc3RhdGUsICcnLCB1cmwpXFxuXFxuYCArXHJcbiAgICAgICAgICAgICAgICBgWW91IGNhbiBmaW5kIG1vcmUgaW5mb3JtYXRpb24gYXQgaHR0cHM6Ly9uZXh0LnJvdXRlci52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uLyN1c2FnZS1vZi1oaXN0b3J5LXN0YXRlLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGFuZ2VMb2NhdGlvbihjdXJyZW50U3RhdGUuY3VycmVudCwgY3VycmVudFN0YXRlLCB0cnVlKTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IGFzc2lnbih7fSwgYnVpbGRTdGF0ZShjdXJyZW50TG9jYXRpb24udmFsdWUsIHRvLCBudWxsKSwgeyBwb3NpdGlvbjogY3VycmVudFN0YXRlLnBvc2l0aW9uICsgMSB9LCBkYXRhKTtcclxuICAgICAgICBjaGFuZ2VMb2NhdGlvbih0bywgc3RhdGUsIGZhbHNlKTtcclxuICAgICAgICBjdXJyZW50TG9jYXRpb24udmFsdWUgPSB0bztcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbG9jYXRpb246IGN1cnJlbnRMb2NhdGlvbixcclxuICAgICAgICBzdGF0ZTogaGlzdG9yeVN0YXRlLFxyXG4gICAgICAgIHB1c2gsXHJcbiAgICAgICAgcmVwbGFjZSxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gSFRNTDUgaGlzdG9yeS4gTW9zdCBjb21tb24gaGlzdG9yeSBmb3Igc2luZ2xlIHBhZ2UgYXBwbGljYXRpb25zLlxyXG4gKlxyXG4gKiBAcGFyYW0gYmFzZSAtXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVXZWJIaXN0b3J5KGJhc2UpIHtcclxuICAgIGJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xyXG4gICAgY29uc3QgaGlzdG9yeU5hdmlnYXRpb24gPSB1c2VIaXN0b3J5U3RhdGVOYXZpZ2F0aW9uKGJhc2UpO1xyXG4gICAgY29uc3QgaGlzdG9yeUxpc3RlbmVycyA9IHVzZUhpc3RvcnlMaXN0ZW5lcnMoYmFzZSwgaGlzdG9yeU5hdmlnYXRpb24uc3RhdGUsIGhpc3RvcnlOYXZpZ2F0aW9uLmxvY2F0aW9uLCBoaXN0b3J5TmF2aWdhdGlvbi5yZXBsYWNlKTtcclxuICAgIGZ1bmN0aW9uIGdvKGRlbHRhLCB0cmlnZ2VyTGlzdGVuZXJzID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICghdHJpZ2dlckxpc3RlbmVycylcclxuICAgICAgICAgICAgaGlzdG9yeUxpc3RlbmVycy5wYXVzZUxpc3RlbmVycygpO1xyXG4gICAgICAgIGhpc3RvcnkuZ28oZGVsdGEpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgcm91dGVySGlzdG9yeSA9IGFzc2lnbih7XHJcbiAgICAgICAgLy8gaXQncyBvdmVycmlkZGVuIHJpZ2h0IGFmdGVyXHJcbiAgICAgICAgbG9jYXRpb246ICcnLFxyXG4gICAgICAgIGJhc2UsXHJcbiAgICAgICAgZ28sXHJcbiAgICAgICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZi5iaW5kKG51bGwsIGJhc2UpLFxyXG4gICAgfSwgaGlzdG9yeU5hdmlnYXRpb24sIGhpc3RvcnlMaXN0ZW5lcnMpO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvdXRlckhpc3RvcnksICdsb2NhdGlvbicsIHtcclxuICAgICAgICBnZXQ6ICgpID0+IGhpc3RvcnlOYXZpZ2F0aW9uLmxvY2F0aW9uLnZhbHVlLFxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm91dGVySGlzdG9yeSwgJ3N0YXRlJywge1xyXG4gICAgICAgIGdldDogKCkgPT4gaGlzdG9yeU5hdmlnYXRpb24uc3RhdGUudmFsdWUsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiByb3V0ZXJIaXN0b3J5O1xyXG59XG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgaW4tbWVtb3J5IGJhc2VkIGhpc3RvcnkuIFRoZSBtYWluIHB1cnBvc2Ugb2YgdGhpcyBoaXN0b3J5IGlzIHRvIGhhbmRsZSBTU1IuIEl0IHN0YXJ0cyBpbiBhIHNwZWNpYWwgbG9jYXRpb24gdGhhdCBpcyBub3doZXJlLlxyXG4gKiBJdCdzIHVwIHRvIHRoZSB1c2VyIHRvIHJlcGxhY2UgdGhhdCBsb2NhdGlvbiB3aXRoIHRoZSBzdGFydGVyIGxvY2F0aW9uIGJ5IGVpdGhlciBjYWxsaW5nIGByb3V0ZXIucHVzaGAgb3IgYHJvdXRlci5yZXBsYWNlYC5cclxuICpcclxuICogQHBhcmFtIGJhc2UgLSBCYXNlIGFwcGxpZWQgdG8gYWxsIHVybHMsIGRlZmF1bHRzIHRvICcvJ1xyXG4gKiBAcmV0dXJucyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgcm91dGVyIGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KGJhc2UgPSAnJykge1xyXG4gICAgbGV0IGxpc3RlbmVycyA9IFtdO1xyXG4gICAgbGV0IHF1ZXVlID0gW1NUQVJUXTtcclxuICAgIGxldCBwb3NpdGlvbiA9IDA7XHJcbiAgICBmdW5jdGlvbiBzZXRMb2NhdGlvbihsb2NhdGlvbikge1xyXG4gICAgICAgIHBvc2l0aW9uKys7XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSBxdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gd2UgYXJlIGF0IHRoZSBlbmQsIHdlIGNhbiBzaW1wbHkgYXBwZW5kIGEgbmV3IGVudHJ5XHJcbiAgICAgICAgICAgIHF1ZXVlLnB1c2gobG9jYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gd2UgYXJlIGluIHRoZSBtaWRkbGUsIHdlIHJlbW92ZSBldmVyeXRoaW5nIGZyb20gaGVyZSBpbiB0aGUgcXVldWVcclxuICAgICAgICAgICAgcXVldWUuc3BsaWNlKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgcXVldWUucHVzaChsb2NhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdHJpZ2dlckxpc3RlbmVycyh0bywgZnJvbSwgeyBkaXJlY3Rpb24sIGRlbHRhIH0pIHtcclxuICAgICAgICBjb25zdCBpbmZvID0ge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24sXHJcbiAgICAgICAgICAgIGRlbHRhLFxyXG4gICAgICAgICAgICB0eXBlOiBOYXZpZ2F0aW9uVHlwZS5wb3AsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGxldCBjYWxsYmFjayBvZiBsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sodG8sIGZyb20sIGluZm8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHJvdXRlckhpc3RvcnkgPSB7XHJcbiAgICAgICAgLy8gcmV3cml0dGVuIGJ5IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxyXG4gICAgICAgIGxvY2F0aW9uOiBTVEFSVCxcclxuICAgICAgICBzdGF0ZToge30sXHJcbiAgICAgICAgYmFzZSxcclxuICAgICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLmJpbmQobnVsbCwgYmFzZSksXHJcbiAgICAgICAgcmVwbGFjZSh0bykge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgY3VycmVudCBlbnRyeSBhbmQgZGVjcmVtZW50IHBvc2l0aW9uXHJcbiAgICAgICAgICAgIHF1ZXVlLnNwbGljZShwb3NpdGlvbi0tLCAxKTtcclxuICAgICAgICAgICAgc2V0TG9jYXRpb24odG8pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHVzaCh0bywgZGF0YSkge1xyXG4gICAgICAgICAgICBzZXRMb2NhdGlvbih0byk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaXN0ZW4oY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ28oZGVsdGEsIHNob3VsZFRyaWdnZXIgPSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZyb20gPSB0aGlzLmxvY2F0aW9uO1xyXG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBcclxuICAgICAgICAgICAgLy8gd2UgYXJlIGNvbnNpZGVyaW5nIGRlbHRhID09PSAwIGdvaW5nIGZvcndhcmQsIGJ1dCBpbiBhYnN0cmFjdCBtb2RlXHJcbiAgICAgICAgICAgIC8vIHVzaW5nIDAgZm9yIHRoZSBkZWx0YSBkb2Vzbid0IG1ha2Ugc2Vuc2UgbGlrZSBpdCBkb2VzIGluIGh0bWw1IHdoZXJlXHJcbiAgICAgICAgICAgIC8vIGl0IHJlbG9hZHMgdGhlIHBhZ2VcclxuICAgICAgICAgICAgZGVsdGEgPCAwID8gTmF2aWdhdGlvbkRpcmVjdGlvbi5iYWNrIDogTmF2aWdhdGlvbkRpcmVjdGlvbi5mb3J3YXJkO1xyXG4gICAgICAgICAgICBwb3NpdGlvbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKHBvc2l0aW9uICsgZGVsdGEsIHF1ZXVlLmxlbmd0aCAtIDEpKTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZFRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJMaXN0ZW5lcnModGhpcy5sb2NhdGlvbiwgZnJvbSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm91dGVySGlzdG9yeSwgJ2xvY2F0aW9uJywge1xyXG4gICAgICAgIGdldDogKCkgPT4gcXVldWVbcG9zaXRpb25dLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcm91dGVySGlzdG9yeTtcclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIGhhc2ggaGlzdG9yeS4gVXNlZnVsIGZvciB3ZWIgYXBwbGljYXRpb25zIHdpdGggbm8gaG9zdCAoZS5nLlxyXG4gKiBgZmlsZTovL2ApIG9yIHdoZW4gY29uZmlndXJpbmcgYSBzZXJ2ZXIgdG8gaGFuZGxlIGFueSBVUkwuXHJcbiAqXHJcbiAqIEBwYXJhbSBiYXNlIC0gb3B0aW9uYWwgYmFzZSB0byBwcm92aWRlLiBEZWZhdWx0cyB0byBgbG9jYXRpb24ucGF0aG5hbWVgIG9yXHJcbiAqIGAvYCBpZiBhdCByb290LiBJZiB0aGVyZSBpcyBhIGBiYXNlYCB0YWcgaW4gdGhlIGBoZWFkYCwgaXRzIHZhbHVlIHdpbGwgYmVcclxuICogKippZ25vcmVkKiouXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGpzXHJcbiAqIC8vIGF0IGh0dHBzOi8vZXhhbXBsZS5jb20vZm9sZGVyXHJcbiAqIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KCkgLy8gZ2l2ZXMgYSB1cmwgb2YgYGh0dHBzOi8vZXhhbXBsZS5jb20vZm9sZGVyI2BcclxuICogY3JlYXRlV2ViSGFzaEhpc3RvcnkoJy9mb2xkZXIvJykgLy8gZ2l2ZXMgYSB1cmwgb2YgYGh0dHBzOi8vZXhhbXBsZS5jb20vZm9sZGVyLyNgXHJcbiAqIC8vIGlmIHRoZSBgI2AgaXMgcHJvdmlkZWQgaW4gdGhlIGJhc2UsIGl0IHdvbid0IGJlIGFkZGVkIGJ5IGBjcmVhdGVXZWJIYXNoSGlzdG9yeWBcclxuICogY3JlYXRlV2ViSGFzaEhpc3RvcnkoJy9mb2xkZXIvIy9hcHAvJykgLy8gZ2l2ZXMgYSB1cmwgb2YgYGh0dHBzOi8vZXhhbXBsZS5jb20vZm9sZGVyLyMvYXBwL2BcclxuICogLy8geW91IHNob3VsZCBhdm9pZCBkb2luZyB0aGlzIGJlY2F1c2UgaXQgY2hhbmdlcyB0aGUgb3JpZ2luYWwgdXJsIGFuZCBicmVha3MgY29weWluZyB1cmxzXHJcbiAqIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KCcvb3RoZXItZm9sZGVyLycpIC8vIGdpdmVzIGEgdXJsIG9mIGBodHRwczovL2V4YW1wbGUuY29tL290aGVyLWZvbGRlci8jYFxyXG4gKlxyXG4gKiAvLyBhdCBmaWxlOi8vL3Vzci9ldGMvZm9sZGVyL2luZGV4Lmh0bWxcclxuICogLy8gZm9yIGxvY2F0aW9ucyB3aXRoIG5vIGBob3N0YCwgdGhlIGJhc2UgaXMgaWdub3JlZFxyXG4gKiBjcmVhdGVXZWJIYXNoSGlzdG9yeSgnL2lBbUlnbm9yZWQnKSAvLyBnaXZlcyBhIHVybCBvZiBgZmlsZTovLy91c3IvZXRjL2ZvbGRlci9pbmRleC5odG1sI2BcclxuICogYGBgXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVXZWJIYXNoSGlzdG9yeShiYXNlKSB7XHJcbiAgICAvLyBNYWtlIHN1cmUgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBmaW5lIGluIHRlcm1zIG9mIGVuY29kaW5nLCBzcGVjaWFsbHkgZm9yIElFMTFcclxuICAgIC8vIGZvciBgZmlsZTovL2AsIGRpcmVjdGx5IHVzZSB0aGUgcGF0aG5hbWUgYW5kIGlnbm9yZSB0aGUgYmFzZVxyXG4gICAgLy8gbG9jYXRpb24ucGF0aG5hbWUgY29udGFpbnMgYW4gaW5pdGlhbCBgL2AgZXZlbiBhdCB0aGUgcm9vdDogYGh0dHBzOi8vZXhhbXBsZS5jb21gXHJcbiAgICBiYXNlID0gbG9jYXRpb24uaG9zdCA/IGJhc2UgfHwgbG9jYXRpb24ucGF0aG5hbWUgOiAnJztcclxuICAgIC8vIGFsbG93IHRoZSB1c2VyIHRvIHByb3ZpZGUgYSBgI2AgaW4gdGhlIG1pZGRsZTogYC9iYXNlLyMvYXBwYFxyXG4gICAgaWYgKGJhc2UuaW5kZXhPZignIycpIDwgMClcclxuICAgICAgICBiYXNlICs9ICcjJztcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWJhc2UuZW5kc1dpdGgoJyMvJykgJiYgIWJhc2UuZW5kc1dpdGgoJyMnKSkge1xyXG4gICAgICAgIHdhcm4oYEEgaGFzaCBiYXNlIG11c3QgZW5kIHdpdGggYSBcIiNcIjpcXG5cIiR7YmFzZX1cIiBzaG91bGQgYmUgXCIke2Jhc2UucmVwbGFjZSgvIy4qJC8sICcjJyl9XCIuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlV2ViSGlzdG9yeShiYXNlKTtcclxufVxuXG5mdW5jdGlvbiBpc1JvdXRlTG9jYXRpb24ocm91dGUpIHtcclxuICAgIHJldHVybiB0eXBlb2Ygcm91dGUgPT09ICdzdHJpbmcnIHx8IChyb3V0ZSAmJiB0eXBlb2Ygcm91dGUgPT09ICdvYmplY3QnKTtcclxufVxyXG5mdW5jdGlvbiBpc1JvdXRlTmFtZShuYW1lKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuYW1lID09PSAnc3ltYm9sJztcclxufVxuXG4vKipcclxuICogSW5pdGlhbCByb3V0ZSBsb2NhdGlvbiB3aGVyZSB0aGUgcm91dGVyIGlzLiBDYW4gYmUgdXNlZCBpbiBuYXZpZ2F0aW9uIGd1YXJkc1xyXG4gKiB0byBkaWZmZXJlbnRpYXRlIHRoZSBpbml0aWFsIG5hdmlnYXRpb24uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGpzXHJcbiAqIGltcG9ydCB7IFNUQVJUX0xPQ0FUSU9OIH0gZnJvbSAndnVlLXJvdXRlcidcclxuICpcclxuICogcm91dGVyLmJlZm9yZUVhY2goKHRvLCBmcm9tKSA9PiB7XHJcbiAqICAgaWYgKGZyb20gPT09IFNUQVJUX0xPQ0FUSU9OKSB7XHJcbiAqICAgICAvLyBpbml0aWFsIG5hdmlnYXRpb25cclxuICogICB9XHJcbiAqIH0pXHJcbiAqIGBgYFxyXG4gKi9cclxuY29uc3QgU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCA9IHtcclxuICAgIHBhdGg6ICcvJyxcclxuICAgIG5hbWU6IHVuZGVmaW5lZCxcclxuICAgIHBhcmFtczoge30sXHJcbiAgICBxdWVyeToge30sXHJcbiAgICBoYXNoOiAnJyxcclxuICAgIGZ1bGxQYXRoOiAnLycsXHJcbiAgICBtYXRjaGVkOiBbXSxcclxuICAgIG1ldGE6IHt9LFxyXG4gICAgcmVkaXJlY3RlZEZyb206IHVuZGVmaW5lZCxcclxufTtcblxuY29uc3QgTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2wgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ25hdmlnYXRpb24gZmFpbHVyZScgOiAnbmYnKTtcclxuLyoqXHJcbiAqIEVudW1lcmF0aW9uIHdpdGggYWxsIHBvc3NpYmxlIHR5cGVzIGZvciBuYXZpZ2F0aW9uIGZhaWx1cmVzLiBDYW4gYmUgcGFzc2VkIHRvXHJcbiAqIHtAbGluayBpc05hdmlnYXRpb25GYWlsdXJlfSB0byBjaGVjayBmb3Igc3BlY2lmaWMgZmFpbHVyZXMuXHJcbiAqL1xyXG52YXIgTmF2aWdhdGlvbkZhaWx1cmVUeXBlO1xyXG4oZnVuY3Rpb24gKE5hdmlnYXRpb25GYWlsdXJlVHlwZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhYm9ydGVkIG5hdmlnYXRpb24gaXMgYSBuYXZpZ2F0aW9uIHRoYXQgZmFpbGVkIGJlY2F1c2UgYSBuYXZpZ2F0aW9uXHJcbiAgICAgKiBndWFyZCByZXR1cm5lZCBgZmFsc2VgIG9yIGNhbGxlZCBgbmV4dChmYWxzZSlgXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJhYm9ydGVkXCJdID0gNF0gPSBcImFib3J0ZWRcIjtcclxuICAgIC8qKlxyXG4gICAgICogQSBjYW5jZWxsZWQgbmF2aWdhdGlvbiBpcyBhIG5hdmlnYXRpb24gdGhhdCBmYWlsZWQgYmVjYXVzZSBhIG1vcmUgcmVjZW50XHJcbiAgICAgKiBuYXZpZ2F0aW9uIGZpbmlzaGVkIHN0YXJ0ZWQgKG5vdCBuZWNlc3NhcmlseSBmaW5pc2hlZCkuXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJjYW5jZWxsZWRcIl0gPSA4XSA9IFwiY2FuY2VsbGVkXCI7XHJcbiAgICAvKipcclxuICAgICAqIEEgZHVwbGljYXRlZCBuYXZpZ2F0aW9uIGlzIGEgbmF2aWdhdGlvbiB0aGF0IGZhaWxlZCBiZWNhdXNlIGl0IHdhc1xyXG4gICAgICogaW5pdGlhdGVkIHdoaWxlIGFscmVhZHkgYmVpbmcgYXQgdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24uXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJkdXBsaWNhdGVkXCJdID0gMTZdID0gXCJkdXBsaWNhdGVkXCI7XHJcbn0pKE5hdmlnYXRpb25GYWlsdXJlVHlwZSB8fCAoTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0ge30pKTtcclxuLy8gREVWIG9ubHkgZGVidWcgbWVzc2FnZXNcclxuY29uc3QgRXJyb3JUeXBlTWVzc2FnZXMgPSB7XHJcbiAgICBbMSAvKiBNQVRDSEVSX05PVF9GT1VORCAqL10oeyBsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uIH0pIHtcclxuICAgICAgICByZXR1cm4gYE5vIG1hdGNoIGZvclxcbiAke0pTT04uc3RyaW5naWZ5KGxvY2F0aW9uKX0ke2N1cnJlbnRMb2NhdGlvblxyXG4gICAgICAgICAgICA/ICdcXG53aGlsZSBiZWluZyBhdFxcbicgKyBKU09OLnN0cmluZ2lmeShjdXJyZW50TG9jYXRpb24pXHJcbiAgICAgICAgICAgIDogJyd9YDtcclxuICAgIH0sXHJcbiAgICBbMiAvKiBOQVZJR0FUSU9OX0dVQVJEX1JFRElSRUNUICovXSh7IGZyb20sIHRvLCB9KSB7XHJcbiAgICAgICAgcmV0dXJuIGBSZWRpcmVjdGVkIGZyb20gXCIke2Zyb20uZnVsbFBhdGh9XCIgdG8gXCIke3N0cmluZ2lmeVJvdXRlKHRvKX1cIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLmA7XHJcbiAgICB9LFxyXG4gICAgWzQgLyogTkFWSUdBVElPTl9BQk9SVEVEICovXSh7IGZyb20sIHRvIH0pIHtcclxuICAgICAgICByZXR1cm4gYE5hdmlnYXRpb24gYWJvcnRlZCBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHt0by5mdWxsUGF0aH1cIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLmA7XHJcbiAgICB9LFxyXG4gICAgWzggLyogTkFWSUdBVElPTl9DQU5DRUxMRUQgKi9dKHsgZnJvbSwgdG8gfSkge1xyXG4gICAgICAgIHJldHVybiBgTmF2aWdhdGlvbiBjYW5jZWxsZWQgZnJvbSBcIiR7ZnJvbS5mdWxsUGF0aH1cIiB0byBcIiR7dG8uZnVsbFBhdGh9XCIgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uLmA7XHJcbiAgICB9LFxyXG4gICAgWzE2IC8qIE5BVklHQVRJT05fRFVQTElDQVRFRCAqL10oeyBmcm9tLCB0byB9KSB7XHJcbiAgICAgICAgcmV0dXJuIGBBdm9pZGVkIHJlZHVuZGFudCBuYXZpZ2F0aW9uIHRvIGN1cnJlbnQgbG9jYXRpb246IFwiJHtmcm9tLmZ1bGxQYXRofVwiLmA7XHJcbiAgICB9LFxyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXJFcnJvcih0eXBlLCBwYXJhbXMpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgIXRydWUpIHtcclxuICAgICAgICByZXR1cm4gYXNzaWduKG5ldyBFcnJvcihFcnJvclR5cGVNZXNzYWdlc1t0eXBlXShwYXJhbXMpKSwge1xyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBbTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2xdOiB0cnVlLFxyXG4gICAgICAgIH0sIHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYXNzaWduKG5ldyBFcnJvcigpLCB7XHJcbiAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgIFtOYXZpZ2F0aW9uRmFpbHVyZVN5bWJvbF06IHRydWUsXHJcbiAgICAgICAgfSwgcGFyYW1zKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yLCB0eXBlKSB7XHJcbiAgICByZXR1cm4gKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiZcclxuICAgICAgICBOYXZpZ2F0aW9uRmFpbHVyZVN5bWJvbCBpbiBlcnJvciAmJlxyXG4gICAgICAgICh0eXBlID09IG51bGwgfHwgISEoZXJyb3IudHlwZSAmIHR5cGUpKSk7XHJcbn1cclxuY29uc3QgcHJvcGVydGllc1RvTG9nID0gWydwYXJhbXMnLCAncXVlcnknLCAnaGFzaCddO1xyXG5mdW5jdGlvbiBzdHJpbmdpZnlSb3V0ZSh0bykge1xyXG4gICAgaWYgKHR5cGVvZiB0byA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgaWYgKCdwYXRoJyBpbiB0bylcclxuICAgICAgICByZXR1cm4gdG8ucGF0aDtcclxuICAgIGNvbnN0IGxvY2F0aW9uID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBwcm9wZXJ0aWVzVG9Mb2cpIHtcclxuICAgICAgICBpZiAoa2V5IGluIHRvKVxyXG4gICAgICAgICAgICBsb2NhdGlvbltrZXldID0gdG9ba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShsb2NhdGlvbiwgbnVsbCwgMik7XHJcbn1cblxuLy8gZGVmYXVsdCBwYXR0ZXJuIGZvciBhIHBhcmFtOiBub24gZ3JlZWR5IGV2ZXJ5dGhpbmcgYnV0IC9cclxuY29uc3QgQkFTRV9QQVJBTV9QQVRURVJOID0gJ1teL10rPyc7XHJcbmNvbnN0IEJBU0VfUEFUSF9QQVJTRVJfT1BUSU9OUyA9IHtcclxuICAgIHNlbnNpdGl2ZTogZmFsc2UsXHJcbiAgICBzdHJpY3Q6IGZhbHNlLFxyXG4gICAgc3RhcnQ6IHRydWUsXHJcbiAgICBlbmQ6IHRydWUsXHJcbn07XHJcbi8vIFNwZWNpYWwgUmVnZXggY2hhcmFjdGVycyB0aGF0IG11c3QgYmUgZXNjYXBlZCBpbiBzdGF0aWMgdG9rZW5zXHJcbmNvbnN0IFJFR0VYX0NIQVJTX1JFID0gL1suKyo/XiR7fSgpW1xcXS9cXFxcXS9nO1xyXG4vKipcclxuICogQ3JlYXRlcyBhIHBhdGggcGFyc2VyIGZyb20gYW4gYXJyYXkgb2YgU2VnbWVudHMgKGEgc2VnbWVudCBpcyBhbiBhcnJheSBvZiBUb2tlbnMpXHJcbiAqXHJcbiAqIEBwYXJhbSBzZWdtZW50cyAtIGFycmF5IG9mIHNlZ21lbnRzIHJldHVybmVkIGJ5IHRva2VuaXplUGF0aFxyXG4gKiBAcGFyYW0gZXh0cmFPcHRpb25zIC0gb3B0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIHJlZ2V4cFxyXG4gKiBAcmV0dXJucyBhIFBhdGhQYXJzZXJcclxuICovXHJcbmZ1bmN0aW9uIHRva2Vuc1RvUGFyc2VyKHNlZ21lbnRzLCBleHRyYU9wdGlvbnMpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBhc3NpZ24oe30sIEJBU0VfUEFUSF9QQVJTRVJfT1BUSU9OUywgZXh0cmFPcHRpb25zKTtcclxuICAgIC8vIHRoZSBhbW91bnQgb2Ygc2NvcmVzIGlzIHRoZSBzYW1lIGFzIHRoZSBsZW5ndGggb2Ygc2VnbWVudHMgZXhjZXB0IGZvciB0aGUgcm9vdCBzZWdtZW50IFwiL1wiXHJcbiAgICBsZXQgc2NvcmUgPSBbXTtcclxuICAgIC8vIHRoZSByZWdleHAgYXMgYSBzdHJpbmdcclxuICAgIGxldCBwYXR0ZXJuID0gb3B0aW9ucy5zdGFydCA/ICdeJyA6ICcnO1xyXG4gICAgLy8gZXh0cmFjdGVkIGtleXNcclxuICAgIGNvbnN0IGtleXMgPSBbXTtcclxuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xyXG4gICAgICAgIC8vIHRoZSByb290IHNlZ21lbnQgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnRcclxuICAgICAgICBjb25zdCBzZWdtZW50U2NvcmVzID0gc2VnbWVudC5sZW5ndGggPyBbXSA6IFs5MCAvKiBSb290ICovXTtcclxuICAgICAgICAvLyBhbGxvdyB0cmFpbGluZyBzbGFzaFxyXG4gICAgICAgIGlmIChvcHRpb25zLnN0cmljdCAmJiAhc2VnbWVudC5sZW5ndGgpXHJcbiAgICAgICAgICAgIHBhdHRlcm4gKz0gJy8nO1xyXG4gICAgICAgIGZvciAobGV0IHRva2VuSW5kZXggPSAwOyB0b2tlbkluZGV4IDwgc2VnbWVudC5sZW5ndGg7IHRva2VuSW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IHNlZ21lbnRbdG9rZW5JbmRleF07XHJcbiAgICAgICAgICAgIC8vIHJlc2V0cyB0aGUgc2NvcmUgaWYgd2UgYXJlIGluc2lkZSBhIHN1YiBzZWdtZW50IC86YS1vdGhlci06YlxyXG4gICAgICAgICAgICBsZXQgc3ViU2VnbWVudFNjb3JlID0gNDAgLyogU2VnbWVudCAqLyArXHJcbiAgICAgICAgICAgICAgICAob3B0aW9ucy5zZW5zaXRpdmUgPyAwLjI1IC8qIEJvbnVzQ2FzZVNlbnNpdGl2ZSAqLyA6IDApO1xyXG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMCAvKiBTdGF0aWMgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHByZXBlbmQgdGhlIHNsYXNoIGlmIHdlIGFyZSBzdGFydGluZyBhIG5ldyBzZWdtZW50XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybiArPSAnLyc7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IHRva2VuLnZhbHVlLnJlcGxhY2UoUkVHRVhfQ0hBUlNfUkUsICdcXFxcJCYnKTtcclxuICAgICAgICAgICAgICAgIHN1YlNlZ21lbnRTY29yZSArPSA0MCAvKiBTdGF0aWMgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gMSAvKiBQYXJhbSAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgcmVwZWF0YWJsZSwgb3B0aW9uYWwsIHJlZ2V4cCB9ID0gdG9rZW47XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlID0gcmVnZXhwID8gcmVnZXhwIDogQkFTRV9QQVJBTV9QQVRURVJOO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgcHJvdmlkZWQgYSBjdXN0b20gcmVnZXhwIC86aWQoXFxcXGQrKVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlICE9PSBCQVNFX1BBUkFNX1BBVFRFUk4pIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gMTAgLyogQm9udXNDdXN0b21SZWdFeHAgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSByZWdleHAgaXMgdmFsaWQgYmVmb3JlIHVzaW5nIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChgKCR7cmV9KWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjdXN0b20gUmVnRXhwIGZvciBwYXJhbSBcIiR7dmFsdWV9XCIgKCR7cmV9KTogYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSByZXBlYXQgd2UgbXVzdCB0YWtlIGNhcmUgb2YgdGhlIHJlcGVhdGluZyBsZWFkaW5nIHNsYXNoXHJcbiAgICAgICAgICAgICAgICBsZXQgc3ViUGF0dGVybiA9IHJlcGVhdGFibGUgPyBgKCg/OiR7cmV9KSg/Oi8oPzoke3JlfSkpKilgIDogYCgke3JlfSlgO1xyXG4gICAgICAgICAgICAgICAgLy8gcHJlcGVuZCB0aGUgc2xhc2ggaWYgd2UgYXJlIHN0YXJ0aW5nIGEgbmV3IHNlZ21lbnRcclxuICAgICAgICAgICAgICAgIGlmICghdG9rZW5JbmRleClcclxuICAgICAgICAgICAgICAgICAgICBzdWJQYXR0ZXJuID0gb3B0aW9uYWwgPyBgKD86LyR7c3ViUGF0dGVybn0pYCA6ICcvJyArIHN1YlBhdHRlcm47XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViUGF0dGVybiArPSAnPyc7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IHN1YlBhdHRlcm47XHJcbiAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gMjAgLyogRHluYW1pYyAqLztcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbClcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gLTggLyogQm9udXNPcHRpb25hbCAqLztcclxuICAgICAgICAgICAgICAgIGlmIChyZXBlYXRhYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YlNlZ21lbnRTY29yZSArPSAtMjAgLyogQm9udXNSZXBlYXRhYmxlICovO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlID09PSAnLionKVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YlNlZ21lbnRTY29yZSArPSAtNTAgLyogQm9udXNXaWxkY2FyZCAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWdtZW50U2NvcmVzLnB1c2goc3ViU2VnbWVudFNjb3JlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYW4gZW1wdHkgYXJyYXkgbGlrZSAvaG9tZS8gLT4gW1t7aG9tZX1dLCBbXV1cclxuICAgICAgICAvLyBpZiAoIXNlZ21lbnQubGVuZ3RoKSBwYXR0ZXJuICs9ICcvJ1xyXG4gICAgICAgIHNjb3JlLnB1c2goc2VnbWVudFNjb3Jlcyk7XHJcbiAgICB9XHJcbiAgICAvLyBvbmx5IGFwcGx5IHRoZSBzdHJpY3QgYm9udXMgdG8gdGhlIGxhc3Qgc2NvcmVcclxuICAgIGlmIChvcHRpb25zLnN0cmljdCAmJiBvcHRpb25zLmVuZCkge1xyXG4gICAgICAgIGNvbnN0IGkgPSBzY29yZS5sZW5ndGggLSAxO1xyXG4gICAgICAgIHNjb3JlW2ldW3Njb3JlW2ldLmxlbmd0aCAtIDFdICs9IDAuNzAwMDAwMDAwMDAwMDAwMSAvKiBCb251c1N0cmljdCAqLztcclxuICAgIH1cclxuICAgIC8vIFRPRE86IGRldiBvbmx5IHdhcm4gZG91YmxlIHRyYWlsaW5nIHNsYXNoXHJcbiAgICBpZiAoIW9wdGlvbnMuc3RyaWN0KVxyXG4gICAgICAgIHBhdHRlcm4gKz0gJy8/JztcclxuICAgIGlmIChvcHRpb25zLmVuZClcclxuICAgICAgICBwYXR0ZXJuICs9ICckJztcclxuICAgIC8vIGFsbG93IHBhdGhzIGxpa2UgL2R5bmFtaWMgdG8gb25seSBtYXRjaCBkeW5hbWljIG9yIGR5bmFtaWMvLi4uIGJ1dCBub3QgZHluYW1pY19zb21ldGhpbmdfZWxzZVxyXG4gICAgZWxzZSBpZiAob3B0aW9ucy5zdHJpY3QpXHJcbiAgICAgICAgcGF0dGVybiArPSAnKD86L3wkKSc7XHJcbiAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAocGF0dGVybiwgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJyk7XHJcbiAgICBmdW5jdGlvbiBwYXJzZShwYXRoKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBwYXRoLm1hdGNoKHJlKTtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7fTtcclxuICAgICAgICBpZiAoIW1hdGNoKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG1hdGNoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbWF0Y2hbaV0gfHwgJyc7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaSAtIDFdO1xyXG4gICAgICAgICAgICBwYXJhbXNba2V5Lm5hbWVdID0gdmFsdWUgJiYga2V5LnJlcGVhdGFibGUgPyB2YWx1ZS5zcGxpdCgnLycpIDogdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJhbXM7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzdHJpbmdpZnkocGFyYW1zKSB7XHJcbiAgICAgICAgbGV0IHBhdGggPSAnJztcclxuICAgICAgICAvLyBmb3Igb3B0aW9uYWwgcGFyYW1ldGVycyB0byBhbGxvdyB0byBiZSBlbXB0eVxyXG4gICAgICAgIGxldCBhdm9pZER1cGxpY2F0ZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xyXG4gICAgICAgICAgICBpZiAoIWF2b2lkRHVwbGljYXRlZFNsYXNoIHx8ICFwYXRoLmVuZHNXaXRoKCcvJykpXHJcbiAgICAgICAgICAgICAgICBwYXRoICs9ICcvJztcclxuICAgICAgICAgICAgYXZvaWREdXBsaWNhdGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBzZWdtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMCAvKiBTdGF0aWMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoICs9IHRva2VuLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gMSAvKiBQYXJhbSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIHJlcGVhdGFibGUsIG9wdGlvbmFsIH0gPSB0b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbSA9IHZhbHVlIGluIHBhcmFtcyA/IHBhcmFtc1t2YWx1ZV0gOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJhbSkgJiYgIXJlcGVhdGFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvdmlkZWQgcGFyYW0gXCIke3ZhbHVlfVwiIGlzIGFuIGFycmF5IGJ1dCBpdCBpcyBub3QgcmVwZWF0YWJsZSAoKiBvciArIG1vZGlmaWVycylgKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gQXJyYXkuaXNBcnJheShwYXJhbSkgPyBwYXJhbS5qb2luKCcvJykgOiBwYXJhbTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGxhc3Qgc2xhc2ggYXMgd2UgY291bGQgYmUgYXQgdGhlIGVuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGguZW5kc1dpdGgoJy8nKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aC5zbGljZSgwLCAtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3QgYXBwZW5kIGEgc2xhc2ggb24gdGhlIG5leHQgaXRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZvaWREdXBsaWNhdGVkU2xhc2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyByZXF1aXJlZCBwYXJhbSBcIiR7dmFsdWV9XCJgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aCArPSB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZSxcclxuICAgICAgICBzY29yZSxcclxuICAgICAgICBrZXlzLFxyXG4gICAgICAgIHBhcnNlLFxyXG4gICAgICAgIHN0cmluZ2lmeSxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENvbXBhcmVzIGFuIGFycmF5IG9mIG51bWJlcnMgYXMgdXNlZCBpbiBQYXRoUGFyc2VyLnNjb3JlIGFuZCByZXR1cm5zIGFcclxuICogbnVtYmVyLiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGBzb3J0YCBhbiBhcnJheVxyXG4gKiBAcGFyYW0gYSAtIGZpcnN0IGFycmF5IG9mIG51bWJlcnNcclxuICogQHBhcmFtIGIgLSBzZWNvbmQgYXJyYXkgb2YgbnVtYmVyc1xyXG4gKiBAcmV0dXJucyAwIGlmIGJvdGggYXJlIGVxdWFsLCA8IDAgaWYgYSBzaG91bGQgYmUgc29ydGVkIGZpcnN0LCA+IDAgaWYgYlxyXG4gKiBzaG91bGQgYmUgc29ydGVkIGZpcnN0XHJcbiAqL1xyXG5mdW5jdGlvbiBjb21wYXJlU2NvcmVBcnJheShhLCBiKSB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICB3aGlsZSAoaSA8IGEubGVuZ3RoICYmIGkgPCBiLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGRpZmYgPSBiW2ldIC0gYVtpXTtcclxuICAgICAgICAvLyBvbmx5IGtlZXAgZ29pbmcgaWYgZGlmZiA9PT0gMFxyXG4gICAgICAgIGlmIChkaWZmKVxyXG4gICAgICAgICAgICByZXR1cm4gZGlmZjtcclxuICAgICAgICBpKys7XHJcbiAgICB9XHJcbiAgICAvLyBpZiB0aGUgbGFzdCBzdWJzZWdtZW50IHdhcyBTdGF0aWMsIHRoZSBzaG9ydGVyIHNlZ21lbnRzIHNob3VsZCBiZSBzb3J0ZWQgZmlyc3RcclxuICAgIC8vIG90aGVyd2lzZSBzb3J0IHRoZSBsb25nZXN0IHNlZ21lbnQgZmlyc3RcclxuICAgIGlmIChhLmxlbmd0aCA8IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSAxICYmIGFbMF0gPT09IDQwIC8qIFN0YXRpYyAqLyArIDQwIC8qIFNlZ21lbnQgKi9cclxuICAgICAgICAgICAgPyAtMVxyXG4gICAgICAgICAgICA6IDE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhLmxlbmd0aCA+IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoID09PSAxICYmIGJbMF0gPT09IDQwIC8qIFN0YXRpYyAqLyArIDQwIC8qIFNlZ21lbnQgKi9cclxuICAgICAgICAgICAgPyAxXHJcbiAgICAgICAgICAgIDogLTE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMDtcclxufVxyXG4vKipcclxuICogQ29tcGFyZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYHNvcnRgIHRvIHNvcnQgYW4gYXJyYXkgb2YgUGF0aFBhcnNlclxyXG4gKiBAcGFyYW0gYSAtIGZpcnN0IFBhdGhQYXJzZXJcclxuICogQHBhcmFtIGIgLSBzZWNvbmQgUGF0aFBhcnNlclxyXG4gKiBAcmV0dXJucyAwIGlmIGJvdGggYXJlIGVxdWFsLCA8IDAgaWYgYSBzaG91bGQgYmUgc29ydGVkIGZpcnN0LCA+IDAgaWYgYlxyXG4gKi9cclxuZnVuY3Rpb24gY29tcGFyZVBhdGhQYXJzZXJTY29yZShhLCBiKSB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBjb25zdCBhU2NvcmUgPSBhLnNjb3JlO1xyXG4gICAgY29uc3QgYlNjb3JlID0gYi5zY29yZTtcclxuICAgIHdoaWxlIChpIDwgYVNjb3JlLmxlbmd0aCAmJiBpIDwgYlNjb3JlLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGNvbXAgPSBjb21wYXJlU2NvcmVBcnJheShhU2NvcmVbaV0sIGJTY29yZVtpXSk7XHJcbiAgICAgICAgLy8gZG8gbm90IHJldHVybiBpZiBib3RoIGFyZSBlcXVhbFxyXG4gICAgICAgIGlmIChjb21wKVxyXG4gICAgICAgICAgICByZXR1cm4gY29tcDtcclxuICAgICAgICBpKys7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBhIGFuZCBiIHNoYXJlIHRoZSBzYW1lIHNjb3JlIGVudHJpZXMgYnV0IGIgaGFzIG1vcmUsIHNvcnQgYiBmaXJzdFxyXG4gICAgcmV0dXJuIGJTY29yZS5sZW5ndGggLSBhU2NvcmUubGVuZ3RoO1xyXG4gICAgLy8gdGhpcyBpcyB0aGUgdGVybmFyeSB2ZXJzaW9uXHJcbiAgICAvLyByZXR1cm4gYVNjb3JlLmxlbmd0aCA8IGJTY29yZS5sZW5ndGhcclxuICAgIC8vICAgPyAxXHJcbiAgICAvLyAgIDogYVNjb3JlLmxlbmd0aCA+IGJTY29yZS5sZW5ndGhcclxuICAgIC8vICAgPyAtMVxyXG4gICAgLy8gICA6IDBcclxufVxuXG5jb25zdCBST09UX1RPS0VOID0ge1xyXG4gICAgdHlwZTogMCAvKiBTdGF0aWMgKi8sXHJcbiAgICB2YWx1ZTogJycsXHJcbn07XHJcbmNvbnN0IFZBTElEX1BBUkFNX1JFID0gL1thLXpBLVowLTlfXS87XHJcbi8vIEFmdGVyIHNvbWUgcHJvZmlsaW5nLCB0aGUgY2FjaGUgc2VlbXMgdG8gYmUgdW5uZWNlc3NhcnkgYmVjYXVzZSB0b2tlbml6ZVBhdGhcclxuLy8gKHRoZSBzbG93ZXN0IHBhcnQgb2YgYWRkaW5nIGEgcm91dGUpIGlzIHZlcnkgZmFzdFxyXG4vLyBjb25zdCB0b2tlbkNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIFRva2VuW11bXT4oKVxyXG5mdW5jdGlvbiB0b2tlbml6ZVBhdGgocGF0aCkge1xyXG4gICAgaWYgKCFwYXRoKVxyXG4gICAgICAgIHJldHVybiBbW11dO1xyXG4gICAgaWYgKHBhdGggPT09ICcvJylcclxuICAgICAgICByZXR1cm4gW1tST09UX1RPS0VOXV07XHJcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICA/IGBSb3V0ZSBwYXRocyBzaG91bGQgc3RhcnQgd2l0aCBhIFwiL1wiOiBcIiR7cGF0aH1cIiBzaG91bGQgYmUgXCIvJHtwYXRofVwiLmBcclxuICAgICAgICAgICAgOiBgSW52YWxpZCBwYXRoIFwiJHtwYXRofVwiYCk7XHJcbiAgICB9XHJcbiAgICAvLyBpZiAodG9rZW5DYWNoZS5oYXMocGF0aCkpIHJldHVybiB0b2tlbkNhY2hlLmdldChwYXRoKSFcclxuICAgIGZ1bmN0aW9uIGNyYXNoKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVSUiAoJHtzdGF0ZX0pL1wiJHtidWZmZXJ9XCI6ICR7bWVzc2FnZX1gKTtcclxuICAgIH1cclxuICAgIGxldCBzdGF0ZSA9IDAgLyogU3RhdGljICovO1xyXG4gICAgbGV0IHByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcclxuICAgIGNvbnN0IHRva2VucyA9IFtdO1xyXG4gICAgLy8gdGhlIHNlZ21lbnQgd2lsbCBhbHdheXMgYmUgdmFsaWQgYmVjYXVzZSB3ZSBnZXQgaW50byB0aGUgaW5pdGlhbCBzdGF0ZVxyXG4gICAgLy8gd2l0aCB0aGUgbGVhZGluZyAvXHJcbiAgICBsZXQgc2VnbWVudDtcclxuICAgIGZ1bmN0aW9uIGZpbmFsaXplU2VnbWVudCgpIHtcclxuICAgICAgICBpZiAoc2VnbWVudClcclxuICAgICAgICAgICAgdG9rZW5zLnB1c2goc2VnbWVudCk7XHJcbiAgICAgICAgc2VnbWVudCA9IFtdO1xyXG4gICAgfVxyXG4gICAgLy8gaW5kZXggb24gdGhlIHBhdGhcclxuICAgIGxldCBpID0gMDtcclxuICAgIC8vIGNoYXIgYXQgaW5kZXhcclxuICAgIGxldCBjaGFyO1xyXG4gICAgLy8gYnVmZmVyIG9mIHRoZSB2YWx1ZSByZWFkXHJcbiAgICBsZXQgYnVmZmVyID0gJyc7XHJcbiAgICAvLyBjdXN0b20gcmVnZXhwIGZvciBhIHBhcmFtXHJcbiAgICBsZXQgY3VzdG9tUmUgPSAnJztcclxuICAgIGZ1bmN0aW9uIGNvbnN1bWVCdWZmZXIoKSB7XHJcbiAgICAgICAgaWYgKCFidWZmZXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAoc3RhdGUgPT09IDAgLyogU3RhdGljICovKSB7XHJcbiAgICAgICAgICAgIHNlZ21lbnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIFN0YXRpYyAqLyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBidWZmZXIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gMSAvKiBQYXJhbSAqLyB8fFxyXG4gICAgICAgICAgICBzdGF0ZSA9PT0gMiAvKiBQYXJhbVJlZ0V4cCAqLyB8fFxyXG4gICAgICAgICAgICBzdGF0ZSA9PT0gMyAvKiBQYXJhbVJlZ0V4cEVuZCAqLykge1xyXG4gICAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxICYmIChjaGFyID09PSAnKicgfHwgY2hhciA9PT0gJysnKSlcclxuICAgICAgICAgICAgICAgIGNyYXNoKGBBIHJlcGVhdGFibGUgcGFyYW0gKCR7YnVmZmVyfSkgbXVzdCBiZSBhbG9uZSBpbiBpdHMgc2VnbWVudC4gZWc6ICcvOmlkcysuYCk7XHJcbiAgICAgICAgICAgIHNlZ21lbnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAxIC8qIFBhcmFtICovLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGJ1ZmZlcixcclxuICAgICAgICAgICAgICAgIHJlZ2V4cDogY3VzdG9tUmUsXHJcbiAgICAgICAgICAgICAgICByZXBlYXRhYmxlOiBjaGFyID09PSAnKicgfHwgY2hhciA9PT0gJysnLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uYWw6IGNoYXIgPT09ICcqJyB8fCBjaGFyID09PSAnPycsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY3Jhc2goJ0ludmFsaWQgc3RhdGUgdG8gY29uc3VtZSBidWZmZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnVmZmVyID0gJyc7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhZGRDaGFyVG9CdWZmZXIoKSB7XHJcbiAgICAgICAgYnVmZmVyICs9IGNoYXI7XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoaSA8IHBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgY2hhciA9IHBhdGhbaSsrXTtcclxuICAgICAgICBpZiAoY2hhciA9PT0gJ1xcXFwnICYmIHN0YXRlICE9PSAyIC8qIFBhcmFtUmVnRXhwICovKSB7XHJcbiAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgc3RhdGUgPSA0IC8qIEVzY2FwZU5leHQgKi87XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMCAvKiBTdGF0aWMgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJy8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsaXplU2VnbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJzonKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3VtZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMSAvKiBQYXJhbSAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZENoYXJUb0J1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNCAvKiBFc2NhcGVOZXh0ICovOlxyXG4gICAgICAgICAgICAgICAgYWRkQ2hhclRvQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxIC8qIFBhcmFtICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICcoJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMiAvKiBQYXJhbVJlZ0V4cCAqLztcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21SZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoVkFMSURfUEFSQU1fUkUudGVzdChjaGFyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZENoYXJUb0J1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3VtZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMCAvKiBTdGF0aWMgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ28gYmFjayBvbmUgY2hhcmFjdGVyIGlmIHdlIHdlcmUgbm90IG1vZGlmeWluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyICE9PSAnKicgJiYgY2hhciAhPT0gJz8nICYmIGNoYXIgIT09ICcrJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMiAvKiBQYXJhbVJlZ0V4cCAqLzpcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGlzIGl0IHdvcnRoIGhhbmRsaW5nIG5lc3RlZCByZWdleHA/IGxpa2UgOnAoPzpwcmVmaXhfKFteL10rKV9zdWZmaXgpXHJcbiAgICAgICAgICAgICAgICAvLyBpdCBhbHJlYWR5IHdvcmtzIGJ5IGVzY2FwaW5nIHRoZSBjbG9zaW5nIClcclxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vcGF0aHMuZXNtLmRldi8/cD1BQU1lSmJpQXdRRWNES2JBb0FBa1A2MFBHMlI2UUF2Z05hQTZBRkFDTTJBQnVRQkIjXHJcbiAgICAgICAgICAgICAgICAvLyBpcyB0aGlzIHJlYWxseSBzb21ldGhpbmcgcGVvcGxlIG5lZWQgc2luY2UgeW91IGNhbiBhbHNvIHdyaXRlXHJcbiAgICAgICAgICAgICAgICAvLyAvcHJlZml4XzpwKClfc3VmZml4XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJyknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHRoZSBlc2NhcGVkIClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tUmVbY3VzdG9tUmUubGVuZ3RoIC0gMV0gPT0gJ1xcXFwnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21SZSA9IGN1c3RvbVJlLnNsaWNlKDAsIC0xKSArIGNoYXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDMgLyogUGFyYW1SZWdFeHBFbmQgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21SZSArPSBjaGFyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMyAvKiBQYXJhbVJlZ0V4cEVuZCAqLzpcclxuICAgICAgICAgICAgICAgIC8vIHNhbWUgYXMgZmluYWxpemluZyBhIHBhcmFtXHJcbiAgICAgICAgICAgICAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IDAgLyogU3RhdGljICovO1xyXG4gICAgICAgICAgICAgICAgLy8gZ28gYmFjayBvbmUgY2hhcmFjdGVyIGlmIHdlIHdlcmUgbm90IG1vZGlmeWluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgIT09ICcqJyAmJiBjaGFyICE9PSAnPycgJiYgY2hhciAhPT0gJysnKVxyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY3Jhc2goJ1Vua25vd24gc3RhdGUnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzdGF0ZSA9PT0gMiAvKiBQYXJhbVJlZ0V4cCAqLylcclxuICAgICAgICBjcmFzaChgVW5maW5pc2hlZCBjdXN0b20gUmVnRXhwIGZvciBwYXJhbSBcIiR7YnVmZmVyfVwiYCk7XHJcbiAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICBmaW5hbGl6ZVNlZ21lbnQoKTtcclxuICAgIC8vIHRva2VuQ2FjaGUuc2V0KHBhdGgsIHRva2VucylcclxuICAgIHJldHVybiB0b2tlbnM7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVSZWNvcmRNYXRjaGVyKHJlY29yZCwgcGFyZW50LCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCBwYXJzZXIgPSB0b2tlbnNUb1BhcnNlcih0b2tlbml6ZVBhdGgocmVjb3JkLnBhdGgpLCBvcHRpb25zKTtcclxuICAgIC8vIHdhcm4gYWdhaW5zdCBwYXJhbXMgd2l0aCB0aGUgc2FtZSBuYW1lXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdLZXlzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHBhcnNlci5rZXlzKSB7XHJcbiAgICAgICAgICAgIGlmIChleGlzdGluZ0tleXMuaGFzKGtleS5uYW1lKSlcclxuICAgICAgICAgICAgICAgIHdhcm4oYEZvdW5kIGR1cGxpY2F0ZWQgcGFyYW1zIHdpdGggbmFtZSBcIiR7a2V5Lm5hbWV9XCIgZm9yIHBhdGggXCIke3JlY29yZC5wYXRofVwiLiBPbmx5IHRoZSBsYXN0IG9uZSB3aWxsIGJlIGF2YWlsYWJsZSBvbiBcIiRyb3V0ZS5wYXJhbXNcIi5gKTtcclxuICAgICAgICAgICAgZXhpc3RpbmdLZXlzLmFkZChrZXkubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgbWF0Y2hlciA9IGFzc2lnbihwYXJzZXIsIHtcclxuICAgICAgICByZWNvcmQsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIC8vIHRoZXNlIG5lZWRzIHRvIGJlIHBvcHVsYXRlZCBieSB0aGUgcGFyZW50XHJcbiAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgIGFsaWFzOiBbXSxcclxuICAgIH0pO1xyXG4gICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgIC8vIGJvdGggYXJlIGFsaWFzZXMgb3IgYm90aCBhcmUgbm90IGFsaWFzZXNcclxuICAgICAgICAvLyB3ZSBkb24ndCB3YW50IHRvIG1peCB0aGVtIGJlY2F1c2UgdGhlIG9yZGVyIGlzIHVzZWQgd2hlblxyXG4gICAgICAgIC8vIHBhc3Npbmcgb3JpZ2luYWxSZWNvcmQgaW4gTWF0Y2hlci5hZGRSb3V0ZVxyXG4gICAgICAgIGlmICghbWF0Y2hlci5yZWNvcmQuYWxpYXNPZiA9PT0gIXBhcmVudC5yZWNvcmQuYWxpYXNPZilcclxuICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobWF0Y2hlcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF0Y2hlcjtcclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIFJvdXRlciBNYXRjaGVyLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICogQHBhcmFtIHJvdXRlcyAtIGFycmF5IG9mIGluaXRpYWwgcm91dGVzXHJcbiAqIEBwYXJhbSBnbG9iYWxPcHRpb25zIC0gZ2xvYmFsIHJvdXRlIG9wdGlvbnNcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlck1hdGNoZXIocm91dGVzLCBnbG9iYWxPcHRpb25zKSB7XHJcbiAgICAvLyBub3JtYWxpemVkIG9yZGVyZWQgYXJyYXkgb2YgbWF0Y2hlcnNcclxuICAgIGNvbnN0IG1hdGNoZXJzID0gW107XHJcbiAgICBjb25zdCBtYXRjaGVyTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgZ2xvYmFsT3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh7IHN0cmljdDogZmFsc2UsIGVuZDogdHJ1ZSwgc2Vuc2l0aXZlOiBmYWxzZSB9LCBnbG9iYWxPcHRpb25zKTtcclxuICAgIGZ1bmN0aW9uIGdldFJlY29yZE1hdGNoZXIobmFtZSkge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyTWFwLmdldChuYW1lKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZFJvdXRlKHJlY29yZCwgcGFyZW50LCBvcmlnaW5hbFJlY29yZCkge1xyXG4gICAgICAgIC8vIHVzZWQgbGF0ZXIgb24gdG8gcmVtb3ZlIGJ5IG5hbWVcclxuICAgICAgICBsZXQgaXNSb290QWRkID0gIW9yaWdpbmFsUmVjb3JkO1xyXG4gICAgICAgIGxldCBtYWluTm9ybWFsaXplZFJlY29yZCA9IG5vcm1hbGl6ZVJvdXRlUmVjb3JkKHJlY29yZCk7XHJcbiAgICAgICAgLy8gd2UgbWlnaHQgYmUgdGhlIGNoaWxkIG9mIGFuIGFsaWFzXHJcbiAgICAgICAgbWFpbk5vcm1hbGl6ZWRSZWNvcmQuYWxpYXNPZiA9IG9yaWdpbmFsUmVjb3JkICYmIG9yaWdpbmFsUmVjb3JkLnJlY29yZDtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gbWVyZ2VPcHRpb25zKGdsb2JhbE9wdGlvbnMsIHJlY29yZCk7XHJcbiAgICAgICAgLy8gZ2VuZXJhdGUgYW4gYXJyYXkgb2YgcmVjb3JkcyB0byBjb3JyZWN0bHkgaGFuZGxlIGFsaWFzZXNcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkUmVjb3JkcyA9IFtcclxuICAgICAgICAgICAgbWFpbk5vcm1hbGl6ZWRSZWNvcmQsXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAoJ2FsaWFzJyBpbiByZWNvcmQpIHtcclxuICAgICAgICAgICAgY29uc3QgYWxpYXNlcyA9IHR5cGVvZiByZWNvcmQuYWxpYXMgPT09ICdzdHJpbmcnID8gW3JlY29yZC5hbGlhc10gOiByZWNvcmQuYWxpYXM7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFJlY29yZHMucHVzaChhc3NpZ24oe30sIG1haW5Ob3JtYWxpemVkUmVjb3JkLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBhbGxvd3MgdXMgdG8gaG9sZCBhIGNvcHkgb2YgdGhlIGBjb21wb25lbnRzYCBvcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAvLyBzbyB0aGF0IGFzeW5jIGNvbXBvbmVudHMgY2FjaGUgaXMgaG9sZCBvbiB0aGUgb3JpZ2luYWwgcmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50czogb3JpZ2luYWxSZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvcmlnaW5hbFJlY29yZC5yZWNvcmQuY29tcG9uZW50c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG1haW5Ob3JtYWxpemVkUmVjb3JkLmNvbXBvbmVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYWxpYXMsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbWlnaHQgYmUgdGhlIGNoaWxkIG9mIGFuIGFsaWFzXHJcbiAgICAgICAgICAgICAgICAgICAgYWxpYXNPZjogb3JpZ2luYWxSZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvcmlnaW5hbFJlY29yZC5yZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBtYWluTm9ybWFsaXplZFJlY29yZCxcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWF0Y2hlcjtcclxuICAgICAgICBsZXQgb3JpZ2luYWxNYXRjaGVyO1xyXG4gICAgICAgIGZvciAoY29uc3Qgbm9ybWFsaXplZFJlY29yZCBvZiBub3JtYWxpemVkUmVjb3Jkcykge1xyXG4gICAgICAgICAgICBsZXQgeyBwYXRoIH0gPSBub3JtYWxpemVkUmVjb3JkO1xyXG4gICAgICAgICAgICAvLyBCdWlsZCB1cCB0aGUgcGF0aCBmb3IgbmVzdGVkIHJvdXRlcyBpZiB0aGUgY2hpbGQgaXNuJ3QgYW4gYWJzb2x1dGVcclxuICAgICAgICAgICAgLy8gcm91dGUuIE9ubHkgYWRkIHRoZSAvIGRlbGltaXRlciBpZiB0aGUgY2hpbGQgcGF0aCBpc24ndCBlbXB0eSBhbmQgaWYgdGhlXHJcbiAgICAgICAgICAgIC8vIHBhcmVudCBwYXRoIGRvZXNuJ3QgaGF2ZSBhIHRyYWlsaW5nIHNsYXNoXHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgcGF0aFswXSAhPT0gJy8nKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudC5yZWNvcmQucGF0aDtcclxuICAgICAgICAgICAgICAgIGxldCBjb25uZWN0aW5nU2xhc2ggPSBwYXJlbnRQYXRoW3BhcmVudFBhdGgubGVuZ3RoIC0gMV0gPT09ICcvJyA/ICcnIDogJy8nO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFJlY29yZC5wYXRoID1cclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQucmVjb3JkLnBhdGggKyAocGF0aCAmJiBjb25uZWN0aW5nU2xhc2ggKyBwYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5vcm1hbGl6ZWRSZWNvcmQucGF0aCA9PT0gJyonKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhdGNoIGFsbCByb3V0ZXMgKFwiKlwiKSBtdXN0IG5vdyBiZSBkZWZpbmVkIHVzaW5nIGEgcGFyYW0gd2l0aCBhIGN1c3RvbSByZWdleHAuXFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NlZSBtb3JlIGF0IGh0dHBzOi8vbmV4dC5yb3V0ZXIudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi8jcmVtb3ZlZC1zdGFyLW9yLWNhdGNoLWFsbC1yb3V0ZXMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBvYmplY3QgYmVmb3JlIGhhbmQgc28gaXQgY2FuIGJlIHBhc3NlZCB0byBjaGlsZHJlblxyXG4gICAgICAgICAgICBtYXRjaGVyID0gY3JlYXRlUm91dGVSZWNvcmRNYXRjaGVyKG5vcm1hbGl6ZWRSZWNvcmQsIHBhcmVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50ICYmIHBhdGhbMF0gPT09ICcvJylcclxuICAgICAgICAgICAgICAgIGNoZWNrTWlzc2luZ1BhcmFtc0luQWJzb2x1dGVQYXRoKG1hdGNoZXIsIHBhcmVudCk7XHJcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBhbiBhbGlhcyB3ZSBtdXN0IHRlbGwgdGhlIG9yaWdpbmFsIHJlY29yZCB0aGF0IHdlIGV4aXN0XHJcbiAgICAgICAgICAgIC8vIHNvIHdlIGNhbiBiZSByZW1vdmVkXHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbFJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxSZWNvcmQuYWxpYXMucHVzaChtYXRjaGVyKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja1NhbWVQYXJhbXMob3JpZ2luYWxSZWNvcmQsIG1hdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCB0aGUgZmlyc3QgcmVjb3JkIGlzIHRoZSBvcmlnaW5hbCBhbmQgb3RoZXJzIGFyZSBhbGlhc2VzXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbE1hdGNoZXIgPSBvcmlnaW5hbE1hdGNoZXIgfHwgbWF0Y2hlcjtcclxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbE1hdGNoZXIgIT09IG1hdGNoZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxNYXRjaGVyLmFsaWFzLnB1c2gobWF0Y2hlcik7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIHJvdXRlIGlmIG5hbWVkIGFuZCBvbmx5IGZvciB0aGUgdG9wIHJlY29yZCAoYXZvaWQgaW4gbmVzdGVkIGNhbGxzKVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyB3b3JrcyBiZWNhdXNlIHRoZSBvcmlnaW5hbCByZWNvcmQgaXMgdGhlIGZpcnN0IG9uZVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUm9vdEFkZCAmJiByZWNvcmQubmFtZSAmJiAhaXNBbGlhc1JlY29yZChtYXRjaGVyKSlcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVSb3V0ZShyZWNvcmQubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCdjaGlsZHJlbicgaW4gbWFpbk5vcm1hbGl6ZWRSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGlsZHJlbiA9IG1haW5Ob3JtYWxpemVkUmVjb3JkLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZFJvdXRlKGNoaWxkcmVuW2ldLCBtYXRjaGVyLCBvcmlnaW5hbFJlY29yZCAmJiBvcmlnaW5hbFJlY29yZC5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgd2FzIG5vIG9yaWdpbmFsIHJlY29yZCwgdGhlbiB0aGUgZmlyc3Qgb25lIHdhcyBub3QgYW4gYWxpYXMgYW5kIGFsbFxyXG4gICAgICAgICAgICAvLyBvdGhlciBhbGlhcyAoaWYgYW55KSBuZWVkIHRvIHJlZmVyZW5jZSB0aGlzIHJlY29yZCB3aGVuIGFkZGluZyBjaGlsZHJlblxyXG4gICAgICAgICAgICBvcmlnaW5hbFJlY29yZCA9IG9yaWdpbmFsUmVjb3JkIHx8IG1hdGNoZXI7XHJcbiAgICAgICAgICAgIGluc2VydE1hdGNoZXIobWF0Y2hlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvcmlnaW5hbE1hdGNoZXJcclxuICAgICAgICAgICAgPyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSBvdGhlciBtYXRjaGVycyBhcmUgYWxpYXNlcywgdGhleSBzaG91bGQgYmUgcmVtb3ZlZCBieSB0aGUgb3JpZ2luYWwgbWF0Y2hlclxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlUm91dGUob3JpZ2luYWxNYXRjaGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IG5vb3A7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVSb3V0ZShtYXRjaGVyUmVmKSB7XHJcbiAgICAgICAgaWYgKGlzUm91dGVOYW1lKG1hdGNoZXJSZWYpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXIgPSBtYXRjaGVyTWFwLmdldChtYXRjaGVyUmVmKTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoZXIpIHtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXJNYXAuZGVsZXRlKG1hdGNoZXJSZWYpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcnMuc3BsaWNlKG1hdGNoZXJzLmluZGV4T2YobWF0Y2hlciksIDEpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlci5jaGlsZHJlbi5mb3JFYWNoKHJlbW92ZVJvdXRlKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXIuYWxpYXMuZm9yRWFjaChyZW1vdmVSb3V0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IG1hdGNoZXJzLmluZGV4T2YobWF0Y2hlclJlZik7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXJSZWYucmVjb3JkLm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlck1hcC5kZWxldGUobWF0Y2hlclJlZi5yZWNvcmQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVyUmVmLmNoaWxkcmVuLmZvckVhY2gocmVtb3ZlUm91dGUpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlclJlZi5hbGlhcy5mb3JFYWNoKHJlbW92ZVJvdXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldFJvdXRlcygpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnM7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpbnNlcnRNYXRjaGVyKG1hdGNoZXIpIHtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2kgaXMnLCB7IGkgfSlcclxuICAgICAgICB3aGlsZSAoaSA8IG1hdGNoZXJzLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICBjb21wYXJlUGF0aFBhcnNlclNjb3JlKG1hdGNoZXIsIG1hdGNoZXJzW2ldKSA+PSAwKVxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0VORCBpIGlzJywgeyBpIH0pXHJcbiAgICAgICAgLy8gd2hpbGUgKGkgPCBtYXRjaGVycy5sZW5ndGggJiYgbWF0Y2hlci5zY29yZSA8PSBtYXRjaGVyc1tpXS5zY29yZSkgaSsrXHJcbiAgICAgICAgbWF0Y2hlcnMuc3BsaWNlKGksIDAsIG1hdGNoZXIpO1xyXG4gICAgICAgIC8vIG9ubHkgYWRkIHRoZSBvcmlnaW5hbCByZWNvcmQgdG8gdGhlIG5hbWUgbWFwXHJcbiAgICAgICAgaWYgKG1hdGNoZXIucmVjb3JkLm5hbWUgJiYgIWlzQWxpYXNSZWNvcmQobWF0Y2hlcikpXHJcbiAgICAgICAgICAgIG1hdGNoZXJNYXAuc2V0KG1hdGNoZXIucmVjb3JkLm5hbWUsIG1hdGNoZXIpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVzb2x2ZShsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uKSB7XHJcbiAgICAgICAgbGV0IG1hdGNoZXI7XHJcbiAgICAgICAgbGV0IHBhcmFtcyA9IHt9O1xyXG4gICAgICAgIGxldCBwYXRoO1xyXG4gICAgICAgIGxldCBuYW1lO1xyXG4gICAgICAgIGlmICgnbmFtZScgaW4gbG9jYXRpb24gJiYgbG9jYXRpb24ubmFtZSkge1xyXG4gICAgICAgICAgICBtYXRjaGVyID0gbWF0Y2hlck1hcC5nZXQobG9jYXRpb24ubmFtZSk7XHJcbiAgICAgICAgICAgIGlmICghbWF0Y2hlcilcclxuICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZVJvdXRlckVycm9yKDEgLyogTUFUQ0hFUl9OT1RfRk9VTkQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBuYW1lID0gbWF0Y2hlci5yZWNvcmQubmFtZTtcclxuICAgICAgICAgICAgcGFyYW1zID0gYXNzaWduKFxyXG4gICAgICAgICAgICAvLyBwYXJhbXNGcm9tTG9jYXRpb24gaXMgYSBuZXcgb2JqZWN0XHJcbiAgICAgICAgICAgIHBhcmFtc0Zyb21Mb2NhdGlvbihjdXJyZW50TG9jYXRpb24ucGFyYW1zLCBcclxuICAgICAgICAgICAgLy8gb25seSBrZWVwIHBhcmFtcyB0aGF0IGV4aXN0IGluIHRoZSByZXNvbHZlZCBsb2NhdGlvblxyXG4gICAgICAgICAgICAvLyBUT0RPOiBvbmx5IGtlZXAgb3B0aW9uYWwgcGFyYW1zIGNvbWluZyBmcm9tIGEgcGFyZW50IHJlY29yZFxyXG4gICAgICAgICAgICBtYXRjaGVyLmtleXMuZmlsdGVyKGsgPT4gIWsub3B0aW9uYWwpLm1hcChrID0+IGsubmFtZSkpLCBsb2NhdGlvbi5wYXJhbXMpO1xyXG4gICAgICAgICAgICAvLyB0aHJvd3MgaWYgY2Fubm90IGJlIHN0cmluZ2lmaWVkXHJcbiAgICAgICAgICAgIHBhdGggPSBtYXRjaGVyLnN0cmluZ2lmeShwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgncGF0aCcgaW4gbG9jYXRpb24pIHtcclxuICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZXNvbHZlIHRoZSBwYXRoIHdpdGggdGhlIG1hdGNoZXIgYXMgaXQgd2FzIHByb3ZpZGVkXHJcbiAgICAgICAgICAgIC8vIHRoaXMgYWxzbyBhbGxvd3MgdGhlIHVzZXIgdG8gY29udHJvbCB0aGUgZW5jb2RpbmdcclxuICAgICAgICAgICAgcGF0aCA9IGxvY2F0aW9uLnBhdGg7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXBhdGguc3RhcnRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBUaGUgTWF0Y2hlciBjYW5ub3QgcmVzb2x2ZSByZWxhdGl2ZSBwYXRocyBidXQgcmVjZWl2ZWQgXCIke3BhdGh9XCIuIFVubGVzcyB5b3UgZGlyZWN0bHkgY2FsbGVkIFxcYG1hdGNoZXIucmVzb2x2ZShcIiR7cGF0aH1cIilcXGAsIHRoaXMgaXMgcHJvYmFibHkgYSBidWcgaW4gdnVlLXJvdXRlci4gUGxlYXNlIG9wZW4gYW4gaXNzdWUgYXQgaHR0cHM6Ly9uZXctaXNzdWUudnVlanMub3JnLz9yZXBvPXZ1ZWpzL3Z1ZS1yb3V0ZXItbmV4dC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXRjaGVyID0gbWF0Y2hlcnMuZmluZChtID0+IG0ucmUudGVzdChwYXRoKSk7XHJcbiAgICAgICAgICAgIC8vIG1hdGNoZXIgc2hvdWxkIGhhdmUgYSB2YWx1ZSBhZnRlciB0aGUgbG9vcFxyXG4gICAgICAgICAgICBpZiAobWF0Y2hlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogZGV2IHdhcm5pbmcgb2YgdW51c2VkIHBhcmFtcyBpZiBwcm92aWRlZFxyXG4gICAgICAgICAgICAgICAgLy8gd2Uga25vdyB0aGUgbWF0Y2hlciB3b3JrcyBiZWNhdXNlIHdlIHRlc3RlZCB0aGUgcmVnZXhwXHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBtYXRjaGVyLnBhcnNlKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG1hdGNoZXIucmVjb3JkLm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbG9jYXRpb24gaXMgYSByZWxhdGl2ZSBwYXRoXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBtYXRjaCBieSBuYW1lIG9yIHBhdGggb2YgY3VycmVudCByb3V0ZVxyXG4gICAgICAgICAgICBtYXRjaGVyID0gY3VycmVudExvY2F0aW9uLm5hbWVcclxuICAgICAgICAgICAgICAgID8gbWF0Y2hlck1hcC5nZXQoY3VycmVudExvY2F0aW9uLm5hbWUpXHJcbiAgICAgICAgICAgICAgICA6IG1hdGNoZXJzLmZpbmQobSA9PiBtLnJlLnRlc3QoY3VycmVudExvY2F0aW9uLnBhdGgpKTtcclxuICAgICAgICAgICAgaWYgKCFtYXRjaGVyKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlUm91dGVyRXJyb3IoMSAvKiBNQVRDSEVSX05PVF9GT1VORCAqLywge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBuYW1lID0gbWF0Y2hlci5yZWNvcmQubmFtZTtcclxuICAgICAgICAgICAgLy8gc2luY2Ugd2UgYXJlIG5hdmlnYXRpbmcgdG8gdGhlIHNhbWUgbG9jYXRpb24sIHdlIGRvbid0IG5lZWQgdG8gcGljayB0aGVcclxuICAgICAgICAgICAgLy8gcGFyYW1zIGxpa2Ugd2hlbiBgbmFtZWAgaXMgcHJvdmlkZWRcclxuICAgICAgICAgICAgcGFyYW1zID0gYXNzaWduKHt9LCBjdXJyZW50TG9jYXRpb24ucGFyYW1zLCBsb2NhdGlvbi5wYXJhbXMpO1xyXG4gICAgICAgICAgICBwYXRoID0gbWF0Y2hlci5zdHJpbmdpZnkocGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWF0Y2hlZCA9IFtdO1xyXG4gICAgICAgIGxldCBwYXJlbnRNYXRjaGVyID0gbWF0Y2hlcjtcclxuICAgICAgICB3aGlsZSAocGFyZW50TWF0Y2hlcikge1xyXG4gICAgICAgICAgICAvLyByZXZlcnNlZCBvcmRlciBzbyBwYXJlbnRzIGFyZSBhdCB0aGUgYmVnaW5uaW5nXHJcbiAgICAgICAgICAgIG1hdGNoZWQudW5zaGlmdChwYXJlbnRNYXRjaGVyLnJlY29yZCk7XHJcbiAgICAgICAgICAgIHBhcmVudE1hdGNoZXIgPSBwYXJlbnRNYXRjaGVyLnBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgcGF0aCxcclxuICAgICAgICAgICAgcGFyYW1zLFxyXG4gICAgICAgICAgICBtYXRjaGVkLFxyXG4gICAgICAgICAgICBtZXRhOiBtZXJnZU1ldGFGaWVsZHMobWF0Y2hlZCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8vIGFkZCBpbml0aWFsIHJvdXRlc1xyXG4gICAgcm91dGVzLmZvckVhY2gocm91dGUgPT4gYWRkUm91dGUocm91dGUpKTtcclxuICAgIHJldHVybiB7IGFkZFJvdXRlLCByZXNvbHZlLCByZW1vdmVSb3V0ZSwgZ2V0Um91dGVzLCBnZXRSZWNvcmRNYXRjaGVyIH07XHJcbn1cclxuZnVuY3Rpb24gcGFyYW1zRnJvbUxvY2F0aW9uKHBhcmFtcywga2V5cykge1xyXG4gICAgbGV0IG5ld1BhcmFtcyA9IHt9O1xyXG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcclxuICAgICAgICBpZiAoa2V5IGluIHBhcmFtcylcclxuICAgICAgICAgICAgbmV3UGFyYW1zW2tleV0gPSBwYXJhbXNba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdQYXJhbXM7XHJcbn1cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZXMgYSBSb3V0ZVJlY29yZFJhdy4gQ3JlYXRlcyBhIGNvcHlcclxuICpcclxuICogQHBhcmFtIHJlY29yZFxyXG4gKiBAcmV0dXJucyB0aGUgbm9ybWFsaXplZCB2ZXJzaW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVSb3V0ZVJlY29yZChyZWNvcmQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcGF0aDogcmVjb3JkLnBhdGgsXHJcbiAgICAgICAgcmVkaXJlY3Q6IHJlY29yZC5yZWRpcmVjdCxcclxuICAgICAgICBuYW1lOiByZWNvcmQubmFtZSxcclxuICAgICAgICBtZXRhOiByZWNvcmQubWV0YSB8fCB7fSxcclxuICAgICAgICBhbGlhc09mOiB1bmRlZmluZWQsXHJcbiAgICAgICAgYmVmb3JlRW50ZXI6IHJlY29yZC5iZWZvcmVFbnRlcixcclxuICAgICAgICBwcm9wczogbm9ybWFsaXplUmVjb3JkUHJvcHMocmVjb3JkKSxcclxuICAgICAgICBjaGlsZHJlbjogcmVjb3JkLmNoaWxkcmVuIHx8IFtdLFxyXG4gICAgICAgIGluc3RhbmNlczoge30sXHJcbiAgICAgICAgbGVhdmVHdWFyZHM6IFtdLFxyXG4gICAgICAgIHVwZGF0ZUd1YXJkczogW10sXHJcbiAgICAgICAgZW50ZXJDYWxsYmFja3M6IHt9LFxyXG4gICAgICAgIGNvbXBvbmVudHM6ICdjb21wb25lbnRzJyBpbiByZWNvcmRcclxuICAgICAgICAgICAgPyByZWNvcmQuY29tcG9uZW50cyB8fCB7fVxyXG4gICAgICAgICAgICA6IHsgZGVmYXVsdDogcmVjb3JkLmNvbXBvbmVudCB9LFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogTm9ybWFsaXplIHRoZSBvcHRpb25hbCBgcHJvcHNgIGluIGEgcmVjb3JkIHRvIGFsd2F5cyBiZSBhbiBvYmplY3Qgc2ltaWxhciB0b1xyXG4gKiBjb21wb25lbnRzLiBBbHNvIGFjY2VwdCBhIGJvb2xlYW4gZm9yIGNvbXBvbmVudHMuXHJcbiAqIEBwYXJhbSByZWNvcmRcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlY29yZFByb3BzKHJlY29yZCkge1xyXG4gICAgY29uc3QgcHJvcHNPYmplY3QgPSB7fTtcclxuICAgIC8vIHByb3BzIGRvZXMgbm90IGV4aXN0IG9uIHJlZGlyZWN0IHJlY29yZHMgYnV0IHdlIGNhbiBzZXQgZmFsc2UgZGlyZWN0bHlcclxuICAgIGNvbnN0IHByb3BzID0gcmVjb3JkLnByb3BzIHx8IGZhbHNlO1xyXG4gICAgaWYgKCdjb21wb25lbnQnIGluIHJlY29yZCkge1xyXG4gICAgICAgIHByb3BzT2JqZWN0LmRlZmF1bHQgPSBwcm9wcztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIE5PVEU6IHdlIGNvdWxkIGFsc28gYWxsb3cgYSBmdW5jdGlvbiB0byBiZSBhcHBsaWVkIHRvIGV2ZXJ5IGNvbXBvbmVudC5cclxuICAgICAgICAvLyBXb3VsZCBuZWVkIHVzZXIgZmVlZGJhY2sgZm9yIHVzZSBjYXNlc1xyXG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gcmVjb3JkLmNvbXBvbmVudHMpXHJcbiAgICAgICAgICAgIHByb3BzT2JqZWN0W25hbWVdID0gdHlwZW9mIHByb3BzID09PSAnYm9vbGVhbicgPyBwcm9wcyA6IHByb3BzW25hbWVdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BzT2JqZWN0O1xyXG59XHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSByZWNvcmQgb3IgYW55IG9mIGl0cyBwYXJlbnQgaXMgYW4gYWxpYXNcclxuICogQHBhcmFtIHJlY29yZFxyXG4gKi9cclxuZnVuY3Rpb24gaXNBbGlhc1JlY29yZChyZWNvcmQpIHtcclxuICAgIHdoaWxlIChyZWNvcmQpIHtcclxuICAgICAgICBpZiAocmVjb3JkLnJlY29yZC5hbGlhc09mKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICByZWNvcmQgPSByZWNvcmQucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbi8qKlxyXG4gKiBNZXJnZSBtZXRhIGZpZWxkcyBvZiBhbiBhcnJheSBvZiByZWNvcmRzXHJcbiAqXHJcbiAqIEBwYXJhbSBtYXRjaGVkIC0gYXJyYXkgb2YgbWF0Y2hlZCByZWNvcmRzXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZU1ldGFGaWVsZHMobWF0Y2hlZCkge1xyXG4gICAgcmV0dXJuIG1hdGNoZWQucmVkdWNlKChtZXRhLCByZWNvcmQpID0+IGFzc2lnbihtZXRhLCByZWNvcmQubWV0YSksIHt9KTtcclxufVxyXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIHBhcnRpYWxPcHRpb25zKSB7XHJcbiAgICBsZXQgb3B0aW9ucyA9IHt9O1xyXG4gICAgZm9yIChsZXQga2V5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgb3B0aW9uc1trZXldID1cclxuICAgICAgICAgICAga2V5IGluIHBhcnRpYWxPcHRpb25zID8gcGFydGlhbE9wdGlvbnNba2V5XSA6IGRlZmF1bHRzW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVQYXJhbShhLCBiKSB7XHJcbiAgICByZXR1cm4gKGEubmFtZSA9PT0gYi5uYW1lICYmXHJcbiAgICAgICAgYS5vcHRpb25hbCA9PT0gYi5vcHRpb25hbCAmJlxyXG4gICAgICAgIGEucmVwZWF0YWJsZSA9PT0gYi5yZXBlYXRhYmxlKTtcclxufVxyXG5mdW5jdGlvbiBjaGVja1NhbWVQYXJhbXMoYSwgYikge1xyXG4gICAgZm9yIChsZXQga2V5IG9mIGEua2V5cykge1xyXG4gICAgICAgIGlmICghYi5rZXlzLmZpbmQoaXNTYW1lUGFyYW0uYmluZChudWxsLCBrZXkpKSlcclxuICAgICAgICAgICAgcmV0dXJuIHdhcm4oYEFsaWFzIFwiJHtiLnJlY29yZC5wYXRofVwiIGFuZCB0aGUgb3JpZ2luYWwgcmVjb3JkOiBcIiR7YS5yZWNvcmQucGF0aH1cIiBzaG91bGQgaGF2ZSB0aGUgZXhhY3Qgc2FtZSBwYXJhbSBuYW1lZCBcIiR7a2V5Lm5hbWV9XCJgKTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGtleSBvZiBiLmtleXMpIHtcclxuICAgICAgICBpZiAoIWEua2V5cy5maW5kKGlzU2FtZVBhcmFtLmJpbmQobnVsbCwga2V5KSkpXHJcbiAgICAgICAgICAgIHJldHVybiB3YXJuKGBBbGlhcyBcIiR7Yi5yZWNvcmQucGF0aH1cIiBhbmQgdGhlIG9yaWdpbmFsIHJlY29yZDogXCIke2EucmVjb3JkLnBhdGh9XCIgc2hvdWxkIGhhdmUgdGhlIGV4YWN0IHNhbWUgcGFyYW0gbmFtZWQgXCIke2tleS5uYW1lfVwiYCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2hlY2tNaXNzaW5nUGFyYW1zSW5BYnNvbHV0ZVBhdGgocmVjb3JkLCBwYXJlbnQpIHtcclxuICAgIGZvciAobGV0IGtleSBvZiBwYXJlbnQua2V5cykge1xyXG4gICAgICAgIGlmICghcmVjb3JkLmtleXMuZmluZChpc1NhbWVQYXJhbS5iaW5kKG51bGwsIGtleSkpKVxyXG4gICAgICAgICAgICByZXR1cm4gd2FybihgQWJzb2x1dGUgcGF0aCBcIiR7cmVjb3JkLnJlY29yZC5wYXRofVwiIHNob3VsZCBoYXZlIHRoZSBleGFjdCBzYW1lIHBhcmFtIG5hbWVkIFwiJHtrZXkubmFtZX1cIiBhcyBpdHMgcGFyZW50IFwiJHtwYXJlbnQucmVjb3JkLnBhdGh9XCIuYCk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEVuY29kaW5nIFJ1bGVzIOKQoyA9IFNwYWNlIFBhdGg6IOKQoyBcIiA8ID4gIyA/IHsgfSBRdWVyeTog4pCjIFwiIDwgPiAjICYgPSBIYXNoOiDikKMgXCJcclxuICogPCA+IGBcclxuICpcclxuICogT24gdG9wIG9mIHRoYXQsIHRoZSBSRkMzOTg2IChodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTIuMilcclxuICogZGVmaW5lcyBzb21lIGV4dHJhIGNoYXJhY3RlcnMgdG8gYmUgZW5jb2RlZC4gTW9zdCBicm93c2VycyBkbyBub3QgZW5jb2RlIHRoZW1cclxuICogaW4gZW5jb2RlVVJJIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvdXJsL2lzc3Vlcy8zNjksIHNvIGl0IG1heSBiZSBzYWZlciB0b1xyXG4gKiBhbHNvIGVuY29kZSBgIScoKSpgLiBMZWF2aW5nIHVuZW5jb2RlZCBvbmx5IEFTQ0lJIGFscGhhbnVtZXJpYyhgYS16QS1aMC05YClcclxuICogcGx1cyBgLS5ffmAuIFRoaXMgZXh0cmEgc2FmZXR5IHNob3VsZCBiZSBhcHBsaWVkIHRvIHF1ZXJ5IGJ5IHBhdGNoaW5nIHRoZVxyXG4gKiBzdHJpbmcgcmV0dXJuZWQgYnkgZW5jb2RlVVJJQ29tcG9uZW50IGVuY29kZVVSSSBhbHNvIGVuY29kZXMgYFtcXF1eYC4gYFxcYFxyXG4gKiBzaG91bGQgYmUgZW5jb2RlZCB0byBhdm9pZCBhbWJpZ3VpdHkuIEJyb3dzZXJzIChJRSwgRkYsIEMpIHRyYW5zZm9ybSBhIGBcXGBcclxuICogaW50byBhIGAvYCBpZiBkaXJlY3RseSB0eXBlZCBpbi4gVGhlIF9iYWNrdGlja18gKGBgYGBgKSBzaG91bGQgYWxzbyBiZVxyXG4gKiBlbmNvZGVkIGV2ZXJ5d2hlcmUgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGxpa2UgRkYgZW5jb2RlIGl0IHdoZW4gZGlyZWN0bHlcclxuICogd3JpdHRlbiB3aGlsZSBvdGhlcnMgZG9uJ3QuIFNhZmFyaSBhbmQgSUUgZG9uJ3QgZW5jb2RlIGBgXCI8Pnt9YGBgIGluIGhhc2guXHJcbiAqL1xyXG4vLyBjb25zdCBFWFRSQV9SRVNFUlZFRF9SRSA9IC9bIScoKSpdL2dcclxuLy8gY29uc3QgZW5jb2RlUmVzZXJ2ZWRSZXBsYWNlciA9IChjOiBzdHJpbmcpID0+ICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNilcclxuY29uc3QgSEFTSF9SRSA9IC8jL2c7IC8vICUyM1xyXG5jb25zdCBBTVBFUlNBTkRfUkUgPSAvJi9nOyAvLyAlMjZcclxuY29uc3QgU0xBU0hfUkUgPSAvXFwvL2c7IC8vICUyRlxyXG5jb25zdCBFUVVBTF9SRSA9IC89L2c7IC8vICUzRFxyXG5jb25zdCBJTV9SRSA9IC9cXD8vZzsgLy8gJTNGXHJcbi8qKlxyXG4gKiBOT1RFOiBJdCdzIG5vdCBjbGVhciB0byBtZSBpZiB3ZSBzaG91bGQgZW5jb2RlIHRoZSArIHN5bWJvbCBpbiBxdWVyaWVzLCBpdFxyXG4gKiBzZWVtcyB0byBiZSBsZXNzIGZsZXhpYmxlIHRoYW4gbm90IGRvaW5nIHNvIGFuZCBJIGNhbid0IGZpbmQgb3V0IHRoZSBsZWdhY3lcclxuICogc3lzdGVtcyByZXF1aXJpbmcgdGhpcyBmb3IgcmVndWxhciByZXF1ZXN0cyBsaWtlIHRleHQvaHRtbC4gSW4gdGhlIHN0YW5kYXJkLFxyXG4gKiB0aGUgZW5jb2Rpbmcgb2YgdGhlIHBsdXMgY2hhcmFjdGVyIGlzIG9ubHkgbWVudGlvbmVkIGZvclxyXG4gKiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcclxuICogKGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsZW5jb2RlZC1wYXJzaW5nKSBhbmQgbW9zdCBicm93c2VycyBzZWVtcyBsb1xyXG4gKiBsZWF2ZSB0aGUgcGx1cyBjaGFyYWN0ZXIgYXMgaXMgaW4gcXVlcmllcy4gVG8gYmUgbW9yZSBmbGV4aWJsZSwgd2UgYWxsb3cgdGhlXHJcbiAqIHBsdXMgY2hhcmFjdGVyIG9uIHRoZSBxdWVyeSBidXQgaXQgY2FuIGFsc28gYmUgbWFudWFsbHkgZW5jb2RlZCBieSB0aGUgdXNlci5cclxuICpcclxuICogUmVzb3VyY2VzOlxyXG4gKiAtIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsZW5jb2RlZC1wYXJzaW5nXHJcbiAqIC0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTYzNDI3MS91cmwtZW5jb2RpbmctdGhlLXNwYWNlLWNoYXJhY3Rlci1vci0yMFxyXG4gKi9cclxuLy8gY29uc3QgUExVU19SRSA9IC9cXCsvZyAvLyAlM0ZcclxuY29uc3QgRU5DX0JSQUNLRVRfT1BFTl9SRSA9IC8lNUIvZzsgLy8gW1xyXG5jb25zdCBFTkNfQlJBQ0tFVF9DTE9TRV9SRSA9IC8lNUQvZzsgLy8gXVxyXG5jb25zdCBFTkNfQ0FSRVRfUkUgPSAvJTVFL2c7IC8vIF5cclxuY29uc3QgRU5DX0JBQ0tUSUNLX1JFID0gLyU2MC9nOyAvLyBgXHJcbmNvbnN0IEVOQ19DVVJMWV9PUEVOX1JFID0gLyU3Qi9nOyAvLyB7XHJcbmNvbnN0IEVOQ19QSVBFX1JFID0gLyU3Qy9nOyAvLyB8XHJcbmNvbnN0IEVOQ19DVVJMWV9DTE9TRV9SRSA9IC8lN0QvZzsgLy8gfVxyXG4vKipcclxuICogRW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQgb24gdGhlIHBhdGgsIHNlYXJjaCBhbmQgaGFzaFxyXG4gKiBzZWN0aW9ucyBvZiB0aGUgVVJMLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqIEByZXR1cm5zIGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21tb25FbmNvZGUodGV4dCkge1xyXG4gICAgcmV0dXJuIGVuY29kZVVSSSgnJyArIHRleHQpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX1BJUEVfUkUsICd8JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQlJBQ0tFVF9PUEVOX1JFLCAnWycpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0JSQUNLRVRfQ0xPU0VfUkUsICddJyk7XHJcbn1cclxuLyoqXHJcbiAqIEVuY29kZSBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkIG9uIHRoZSBoYXNoIHNlY3Rpb24gb2YgdGhlIFVSTC5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqIEByZXR1cm5zIGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVIYXNoKHRleHQpIHtcclxuICAgIHJldHVybiBjb21tb25FbmNvZGUodGV4dClcclxuICAgICAgICAucmVwbGFjZShFTkNfQ1VSTFlfT1BFTl9SRSwgJ3snKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DVVJMWV9DTE9TRV9SRSwgJ30nKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DQVJFVF9SRSwgJ14nKTtcclxufVxyXG4vKipcclxuICogRW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQgcXVlcnkgdmFsdWVzIG9uIHRoZSBxdWVyeVxyXG4gKiBzZWN0aW9uIG9mIHRoZSBVUkwuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGVuY29kZVxyXG4gKiBAcmV0dXJucyBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZW5jb2RlUXVlcnlWYWx1ZSh0ZXh0KSB7XHJcbiAgICByZXR1cm4gY29tbW9uRW5jb2RlKHRleHQpXHJcbiAgICAgICAgLnJlcGxhY2UoSEFTSF9SRSwgJyUyMycpXHJcbiAgICAgICAgLnJlcGxhY2UoQU1QRVJTQU5EX1JFLCAnJTI2JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQkFDS1RJQ0tfUkUsICdgJylcclxuICAgICAgICAucmVwbGFjZShFTkNfQ1VSTFlfT1BFTl9SRSwgJ3snKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DVVJMWV9DTE9TRV9SRSwgJ30nKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DQVJFVF9SRSwgJ14nKTtcclxufVxyXG4vKipcclxuICogTGlrZSBgZW5jb2RlUXVlcnlWYWx1ZWAgYnV0IGFsc28gZW5jb2RlcyB0aGUgYD1gIGNoYXJhY3Rlci5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVRdWVyeUtleSh0ZXh0KSB7XHJcbiAgICByZXR1cm4gZW5jb2RlUXVlcnlWYWx1ZSh0ZXh0KS5yZXBsYWNlKEVRVUFMX1JFLCAnJTNEJyk7XHJcbn1cclxuLyoqXHJcbiAqIEVuY29kZSBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkIG9uIHRoZSBwYXRoIHNlY3Rpb24gb2YgdGhlIFVSTC5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqIEByZXR1cm5zIGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVQYXRoKHRleHQpIHtcclxuICAgIHJldHVybiBjb21tb25FbmNvZGUodGV4dCkucmVwbGFjZShIQVNIX1JFLCAnJTIzJykucmVwbGFjZShJTV9SRSwgJyUzRicpO1xyXG59XHJcbi8qKlxyXG4gKiBFbmNvZGUgY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZW5jb2RlZCBvbiB0aGUgcGF0aCBzZWN0aW9uIG9mIHRoZSBVUkwgYXMgYVxyXG4gKiBwYXJhbS4gVGhpcyBmdW5jdGlvbiBlbmNvZGVzIGV2ZXJ5dGhpbmcge0BsaW5rIGVuY29kZVBhdGh9IGRvZXMgcGx1cyB0aGVcclxuICogc2xhc2ggKGAvYCkgY2hhcmFjdGVyLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICogQHJldHVybnMgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZVBhcmFtKHRleHQpIHtcclxuICAgIHJldHVybiBlbmNvZGVQYXRoKHRleHQpLnJlcGxhY2UoU0xBU0hfUkUsICclMkYnKTtcclxufVxyXG4vKipcclxuICogRGVjb2RlIHRleHQgdXNpbmcgYGRlY29kZVVSSUNvbXBvbmVudGAuIFJldHVybnMgdGhlIG9yaWdpbmFsIHRleHQgaWYgaXRcclxuICogZmFpbHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGRlY29kZVxyXG4gKiBAcmV0dXJucyBkZWNvZGVkIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZGVjb2RlKHRleHQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCgnJyArIHRleHQpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBFcnJvciBkZWNvZGluZyBcIiR7dGV4dH1cIi4gVXNpbmcgb3JpZ2luYWwgdmFsdWVgKTtcclxuICAgIH1cclxuICAgIHJldHVybiAnJyArIHRleHQ7XHJcbn1cblxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgYSBxdWVyeVN0cmluZyBpbnRvIGEge0BsaW5rIExvY2F0aW9uUXVlcnl9IG9iamVjdC4gQWNjZXB0IGJvdGgsIGFcclxuICogdmVyc2lvbiB3aXRoIHRoZSBsZWFkaW5nIGA/YCBhbmQgd2l0aG91dCBTaG91bGQgd29yayBhcyBVUkxTZWFyY2hQYXJhbXNcclxuXG4gKiBAaW50ZXJuYWxcclxuICpcclxuICogQHBhcmFtIHNlYXJjaCAtIHNlYXJjaCBzdHJpbmcgdG8gcGFyc2VcclxuICogQHJldHVybnMgYSBxdWVyeSBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlUXVlcnkoc2VhcmNoKSB7XHJcbiAgICBjb25zdCBxdWVyeSA9IHt9O1xyXG4gICAgLy8gYXZvaWQgY3JlYXRpbmcgYW4gb2JqZWN0IHdpdGggYW4gZW1wdHkga2V5IGFuZCBlbXB0eSB2YWx1ZVxyXG4gICAgLy8gYmVjYXVzZSBvZiBzcGxpdCgnJicpXHJcbiAgICBpZiAoc2VhcmNoID09PSAnJyB8fCBzZWFyY2ggPT09ICc/JylcclxuICAgICAgICByZXR1cm4gcXVlcnk7XHJcbiAgICBjb25zdCBoYXNMZWFkaW5nSU0gPSBzZWFyY2hbMF0gPT09ICc/JztcclxuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IChoYXNMZWFkaW5nSU0gPyBzZWFyY2guc2xpY2UoMSkgOiBzZWFyY2gpLnNwbGl0KCcmJyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlYXJjaFBhcmFtcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IHNlYXJjaFBhcmFtID0gc2VhcmNoUGFyYW1zW2ldO1xyXG4gICAgICAgIC8vIGFsbG93IHRoZSA9IGNoYXJhY3RlclxyXG4gICAgICAgIGxldCBlcVBvcyA9IHNlYXJjaFBhcmFtLmluZGV4T2YoJz0nKTtcclxuICAgICAgICBsZXQga2V5ID0gZGVjb2RlKGVxUG9zIDwgMCA/IHNlYXJjaFBhcmFtIDogc2VhcmNoUGFyYW0uc2xpY2UoMCwgZXFQb3MpKTtcclxuICAgICAgICBsZXQgdmFsdWUgPSBlcVBvcyA8IDAgPyBudWxsIDogZGVjb2RlKHNlYXJjaFBhcmFtLnNsaWNlKGVxUG9zICsgMSkpO1xyXG4gICAgICAgIGlmIChrZXkgaW4gcXVlcnkpIHtcclxuICAgICAgICAgICAgLy8gYW4gZXh0cmEgdmFyaWFibGUgZm9yIHRzIHR5cGVzXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSBxdWVyeVtrZXldO1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY3VycmVudFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gcXVlcnlba2V5XSA9IFtjdXJyZW50VmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZS5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcXVlcnk7XHJcbn1cclxuLyoqXHJcbiAqIFN0cmluZ2lmaWVzIGEge0BsaW5rIExvY2F0aW9uUXVlcnlSYXd9IG9iamVjdC4gTGlrZSBgVVJMU2VhcmNoUGFyYW1zYCwgaXRcclxuICogZG9lc24ndCBwcmVwZW5kIGEgYD9gXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKlxyXG4gKiBAcGFyYW0gcXVlcnkgLSBxdWVyeSBvYmplY3QgdG8gc3RyaW5naWZ5XHJcbiAqIEByZXR1cm5zIHN0cmluZyB2ZXJzaW9uIG9mIHRoZSBxdWVyeSB3aXRob3V0IHRoZSBsZWFkaW5nIGA/YFxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkocXVlcnkpIHtcclxuICAgIGxldCBzZWFyY2ggPSAnJztcclxuICAgIGZvciAobGV0IGtleSBpbiBxdWVyeSkge1xyXG4gICAgICAgIGlmIChzZWFyY2gubGVuZ3RoKVxyXG4gICAgICAgICAgICBzZWFyY2ggKz0gJyYnO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcclxuICAgICAgICBrZXkgPSBlbmNvZGVRdWVyeUtleShrZXkpO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgbnVsbCBhZGRzIHRoZSB2YWx1ZVxyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIHNlYXJjaCArPSBrZXk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBrZWVwIG51bGwgdmFsdWVzXHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IEFycmF5LmlzQXJyYXkodmFsdWUpXHJcbiAgICAgICAgICAgID8gdmFsdWUubWFwKHYgPT4gdiAmJiBlbmNvZGVRdWVyeVZhbHVlKHYpKVxyXG4gICAgICAgICAgICA6IFt2YWx1ZSAmJiBlbmNvZGVRdWVyeVZhbHVlKHZhbHVlKV07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gb25seSBhcHBlbmQgJiB3aXRoIGkgPiAwXHJcbiAgICAgICAgICAgIHNlYXJjaCArPSAoaSA/ICcmJyA6ICcnKSArIGtleTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlc1tpXSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgc2VhcmNoICs9ICgnPScgKyB2YWx1ZXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzZWFyY2g7XHJcbn1cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgYSB7QGxpbmsgTG9jYXRpb25RdWVyeVJhd30gaW50byBhIHtAbGluayBMb2NhdGlvblF1ZXJ5fSBieSBjYXN0aW5nXHJcbiAqIG51bWJlcnMgaW50byBzdHJpbmdzLCByZW1vdmluZyBrZXlzIHdpdGggYW4gdW5kZWZpbmVkIHZhbHVlIGFuZCByZXBsYWNpbmdcclxuICogdW5kZWZpbmVkIHdpdGggbnVsbCBpbiBhcnJheXNcclxuICpcclxuICogQHBhcmFtIHF1ZXJ5IC0gcXVlcnkgb2JqZWN0IHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyBhIG5vcm1hbGl6ZWQgcXVlcnkgb2JqZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVRdWVyeShxdWVyeSkge1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZFF1ZXJ5ID0ge307XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gcXVlcnkpIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSBxdWVyeVtrZXldO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRRdWVyeVtrZXldID0gQXJyYXkuaXNBcnJheSh2YWx1ZSlcclxuICAgICAgICAgICAgICAgID8gdmFsdWUubWFwKHYgPT4gKHYgPT0gbnVsbCA/IG51bGwgOiAnJyArIHYpKVxyXG4gICAgICAgICAgICAgICAgOiB2YWx1ZSA9PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIDogJycgKyB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9ybWFsaXplZFF1ZXJ5O1xyXG59XG5cbi8qKlxyXG4gKiBDcmVhdGUgYSBsaXN0IG9mIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSByZXNldC4gVXNlZCB0byBjcmVhdGUgYmVmb3JlIGFuZCBhZnRlciBuYXZpZ2F0aW9uIGd1YXJkcyBsaXN0XHJcbiAqL1xyXG5mdW5jdGlvbiB1c2VDYWxsYmFja3MoKSB7XHJcbiAgICBsZXQgaGFuZGxlcnMgPSBbXTtcclxuICAgIGZ1bmN0aW9uIGFkZChoYW5kbGVyKSB7XHJcbiAgICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gaGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcclxuICAgICAgICAgICAgaWYgKGkgPiAtMSlcclxuICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XHJcbiAgICAgICAgaGFuZGxlcnMgPSBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWRkLFxyXG4gICAgICAgIGxpc3Q6ICgpID0+IGhhbmRsZXJzLFxyXG4gICAgICAgIHJlc2V0LFxyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiByZWdpc3Rlckd1YXJkKGxpc3QsIGd1YXJkKSB7XHJcbiAgICBjb25zdCByZW1vdmVGcm9tTGlzdCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGxpc3QuaW5kZXhPZihndWFyZCk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgIGxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH07XHJcbiAgICBvblVubW91bnRlZChyZW1vdmVGcm9tTGlzdCk7XHJcbiAgICBvbkRlYWN0aXZhdGVkKHJlbW92ZUZyb21MaXN0KTtcclxuICAgIG9uQWN0aXZhdGVkKCgpID0+IHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGxpc3QuaW5kZXhPZihndWFyZCk7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMClcclxuICAgICAgICAgICAgbGlzdC5wdXNoKGd1YXJkKTtcclxuICAgIH0pO1xyXG4gICAgbGlzdC5wdXNoKGd1YXJkKTtcclxufVxyXG4vKipcclxuICogQWRkIGEgbmF2aWdhdGlvbiBndWFyZCB0aGF0IHRyaWdnZXJzIHdoZW5ldmVyIHRoZSBjb21wb25lbnQgZm9yIHRoZSBjdXJyZW50XHJcbiAqIGxvY2F0aW9uIGlzIGFib3V0IHRvIGJlIGxlZnQuIFNpbWlsYXIgdG8ge0BsaW5rIGJlZm9yZVJvdXRlTGVhdmV9IGJ1dCBjYW4gYmVcclxuICogdXNlZCBpbiBhbnkgY29tcG9uZW50LiBUaGUgZ3VhcmQgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gbGVhdmVHdWFyZCAtIHtAbGluayBOYXZpZ2F0aW9uR3VhcmR9XHJcbiAqL1xyXG5mdW5jdGlvbiBvbkJlZm9yZVJvdXRlTGVhdmUobGVhdmVHdWFyZCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZ2V0Q3VycmVudEluc3RhbmNlKCkpIHtcclxuICAgICAgICB3YXJuKCdvbkJlZm9yZVJvdXRlTGVhdmUgbXVzdCBiZSBjYWxsZWQgYXQgdGhlIHRvcCBvZiBhIHNldHVwIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYWN0aXZlUmVjb3JkID0gaW5qZWN0KG1hdGNoZWRSb3V0ZUtleSwge30pLnZhbHVlO1xyXG4gICAgaWYgKCFhY3RpdmVSZWNvcmQpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2Fybignb25CZWZvcmVSb3V0ZUxlYXZlIG11c3QgYmUgY2FsbGVkIGF0IHRoZSB0b3Agb2YgYSBzZXR1cCBmdW5jdGlvbicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyR3VhcmQoYWN0aXZlUmVjb3JkLmxlYXZlR3VhcmRzLCBsZWF2ZUd1YXJkKTtcclxufVxyXG4vKipcclxuICogQWRkIGEgbmF2aWdhdGlvbiBndWFyZCB0aGF0IHRyaWdnZXJzIHdoZW5ldmVyIHRoZSBjdXJyZW50IGxvY2F0aW9uIGlzIGFib3V0XHJcbiAqIHRvIGJlIHVwZGF0ZWQuIFNpbWlsYXIgdG8ge0BsaW5rIGJlZm9yZVJvdXRlVXBkYXRlfSBidXQgY2FuIGJlIHVzZWQgaW4gYW55XHJcbiAqIGNvbXBvbmVudC4gVGhlIGd1YXJkIGlzIHJlbW92ZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cclxuICpcclxuICogQHBhcmFtIHVwZGF0ZUd1YXJkIC0ge0BsaW5rIE5hdmlnYXRpb25HdWFyZH1cclxuICovXHJcbmZ1bmN0aW9uIG9uQmVmb3JlUm91dGVVcGRhdGUodXBkYXRlR3VhcmQpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWdldEN1cnJlbnRJbnN0YW5jZSgpKSB7XHJcbiAgICAgICAgd2Fybignb25CZWZvcmVSb3V0ZVVwZGF0ZSBtdXN0IGJlIGNhbGxlZCBhdCB0aGUgdG9wIG9mIGEgc2V0dXAgZnVuY3Rpb24nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBhY3RpdmVSZWNvcmQgPSBpbmplY3QobWF0Y2hlZFJvdXRlS2V5LCB7fSkudmFsdWU7XHJcbiAgICBpZiAoIWFjdGl2ZVJlY29yZCkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB3YXJuKCdvbkJlZm9yZVJvdXRlVXBkYXRlIG11c3QgYmUgY2FsbGVkIGF0IHRoZSB0b3Agb2YgYSBzZXR1cCBmdW5jdGlvbicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyR3VhcmQoYWN0aXZlUmVjb3JkLnVwZGF0ZUd1YXJkcywgdXBkYXRlR3VhcmQpO1xyXG59XHJcbmZ1bmN0aW9uIGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tLCByZWNvcmQsIG5hbWUpIHtcclxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGVudGVyQ2FsbGJhY2tBcnJheSB0byBwcmV2ZW50IHB1c2hpbmcgY2FsbGJhY2tzIGlmIGEgbmV3IG5hdmlnYXRpb24gdG9vayBwbGFjZVxyXG4gICAgY29uc3QgZW50ZXJDYWxsYmFja0FycmF5ID0gcmVjb3JkICYmXHJcbiAgICAgICAgLy8gbmFtZSBpcyBkZWZpbmVkIGlmIHJlY29yZCBpcyBiZWNhdXNlIG9mIHRoZSBmdW5jdGlvbiBvdmVybG9hZFxyXG4gICAgICAgIChyZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gPSByZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gfHwgW10pO1xyXG4gICAgcmV0dXJuICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBuZXh0ID0gKHZhbGlkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh2YWxpZCA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICByZWplY3QoY3JlYXRlUm91dGVyRXJyb3IoNCAvKiBOQVZJR0FUSU9OX0FCT1JURUQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh2YWxpZCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QodmFsaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUm91dGVMb2NhdGlvbih2YWxpZCkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChjcmVhdGVSb3V0ZXJFcnJvcigyIC8qIE5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiB0byxcclxuICAgICAgICAgICAgICAgICAgICB0bzogdmFsaWQsXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50ZXJDYWxsYmFja0FycmF5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2luY2UgZW50ZXJDYWxsYmFja0FycmF5IGlzIHRydXRoeSwgYm90aCByZWNvcmQgYW5kIG5hbWUgYWxzbyBhcmVcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gPT09IGVudGVyQ2FsbGJhY2tBcnJheSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWxpZCA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICBlbnRlckNhbGxiYWNrQXJyYXkucHVzaCh2YWxpZCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIHdyYXBwaW5nIHdpdGggUHJvbWlzZS5yZXNvbHZlIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYm90aCBhc3luYyBhbmQgc3luYyBndWFyZHNcclxuICAgICAgICBjb25zdCBndWFyZFJldHVybiA9IGd1YXJkLmNhbGwocmVjb3JkICYmIHJlY29yZC5pbnN0YW5jZXNbbmFtZV0sIHRvLCBmcm9tLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBjYW5Pbmx5QmVDYWxsZWRPbmNlKG5leHQsIHRvLCBmcm9tKSA6IG5leHQpO1xyXG4gICAgICAgIGxldCBndWFyZENhbGwgPSBQcm9taXNlLnJlc29sdmUoZ3VhcmRSZXR1cm4pO1xyXG4gICAgICAgIGlmIChndWFyZC5sZW5ndGggPCAzKVxyXG4gICAgICAgICAgICBndWFyZENhbGwgPSBndWFyZENhbGwudGhlbihuZXh0KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGd1YXJkLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBUaGUgXCJuZXh0XCIgY2FsbGJhY2sgd2FzIG5ldmVyIGNhbGxlZCBpbnNpZGUgb2YgJHtndWFyZC5uYW1lID8gJ1wiJyArIGd1YXJkLm5hbWUgKyAnXCInIDogJyd9OlxcbiR7Z3VhcmQudG9TdHJpbmcoKX1cXG4uIElmIHlvdSBhcmUgcmV0dXJuaW5nIGEgdmFsdWUgaW5zdGVhZCBvZiBjYWxsaW5nIFwibmV4dFwiLCBtYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZSBcIm5leHRcIiBwYXJhbWV0ZXIgZnJvbSB5b3VyIGZ1bmN0aW9uLmA7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3VhcmRSZXR1cm4gPT09ICdvYmplY3QnICYmICd0aGVuJyBpbiBndWFyZFJldHVybikge1xyXG4gICAgICAgICAgICAgICAgZ3VhcmRDYWxsID0gZ3VhcmRDYWxsLnRoZW4ocmVzb2x2ZWRWYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZTogX2NhbGxlZCBpcyBhZGRlZCBhdCBjYW5Pbmx5QmVDYWxsZWRPbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0Ll9jYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBuYXZpZ2F0aW9uIGd1YXJkJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogdGVzdCBtZSFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChndWFyZFJldHVybiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlOiBfY2FsbGVkIGlzIGFkZGVkIGF0IGNhbk9ubHlCZUNhbGxlZE9uY2VcclxuICAgICAgICAgICAgICAgIGlmICghbmV4dC5fY2FsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIG5hdmlnYXRpb24gZ3VhcmQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGd1YXJkQ2FsbC5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY2FuT25seUJlQ2FsbGVkT25jZShuZXh0LCB0bywgZnJvbSkge1xyXG4gICAgbGV0IGNhbGxlZCA9IDA7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChjYWxsZWQrKyA9PT0gMSlcclxuICAgICAgICAgICAgd2FybihgVGhlIFwibmV4dFwiIGNhbGxiYWNrIHdhcyBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgaW4gb25lIG5hdmlnYXRpb24gZ3VhcmQgd2hlbiBnb2luZyBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHt0by5mdWxsUGF0aH1cIi4gSXQgc2hvdWxkIGJlIGNhbGxlZCBleGFjdGx5IG9uZSB0aW1lIGluIGVhY2ggbmF2aWdhdGlvbiBndWFyZC4gVGhpcyB3aWxsIGZhaWwgaW4gcHJvZHVjdGlvbi5gKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlOiB3ZSBwdXQgaXQgaW4gdGhlIG9yaWdpbmFsIG9uZSBiZWNhdXNlIGl0J3MgZWFzaWVyIHRvIGNoZWNrXHJcbiAgICAgICAgbmV4dC5fY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoY2FsbGVkID09PSAxKVxyXG4gICAgICAgICAgICBuZXh0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RDb21wb25lbnRzR3VhcmRzKG1hdGNoZWQsIGd1YXJkVHlwZSwgdG8sIGZyb20pIHtcclxuICAgIGNvbnN0IGd1YXJkcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCByZWNvcmQgb2YgbWF0Y2hlZCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiByZWNvcmQuY29tcG9uZW50cykge1xyXG4gICAgICAgICAgICBsZXQgcmF3Q29tcG9uZW50ID0gcmVjb3JkLmNvbXBvbmVudHNbbmFtZV07XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmF3Q29tcG9uZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiByYXdDb21wb25lbnQgIT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiByYXdDb21wb25lbnQgIT09ICdmdW5jdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGluIHJlY29yZCB3aXRoIHBhdGggXCIke3JlY29yZC5wYXRofVwiIGlzIG5vdGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgIGEgdmFsaWQgY29tcG9uZW50LiBSZWNlaXZlZCBcIiR7U3RyaW5nKHJhd0NvbXBvbmVudCl9XCIuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhyb3cgdG8gZW5zdXJlIHdlIHN0b3AgaGVyZSBidXQgd2FybiB0byBlbnN1cmUgdGhlIG1lc3NhZ2UgaXNuJ3RcclxuICAgICAgICAgICAgICAgICAgICAvLyBtaXNzZWQgYnkgdGhlIHVzZXJcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcm91dGUgY29tcG9uZW50Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgndGhlbicgaW4gcmF3Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2FybiBpZiB1c2VyIHdyb3RlIGltcG9ydCgnL2NvbXBvbmVudC52dWUnKSBpbnN0ZWFkIG9mICgpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0KCcuL2NvbXBvbmVudC52dWUnKVxyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBpbiByZWNvcmQgd2l0aCBwYXRoIFwiJHtyZWNvcmQucGF0aH1cIiBpcyBhIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgUHJvbWlzZSBpbnN0ZWFkIG9mIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgUHJvbWlzZS4gRGlkIHlvdSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHdyaXRlIFwiaW1wb3J0KCcuL015UGFnZS52dWUnKVwiIGluc3RlYWQgb2YgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcIigpID0+IGltcG9ydCgnLi9NeVBhZ2UudnVlJylcIiA/IFRoaXMgd2lsbCBicmVhayBpbiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHByb2R1Y3Rpb24gaWYgbm90IGZpeGVkLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9taXNlID0gcmF3Q29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd0NvbXBvbmVudCA9ICgpID0+IHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2tpcCB1cGRhdGUgYW5kIGxlYXZlIGd1YXJkcyBpZiB0aGUgcm91dGUgY29tcG9uZW50IGlzIG5vdCBtb3VudGVkXHJcbiAgICAgICAgICAgIGlmIChndWFyZFR5cGUgIT09ICdiZWZvcmVSb3V0ZUVudGVyJyAmJiAhcmVjb3JkLmluc3RhbmNlc1tuYW1lXSlcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAoaXNSb3V0ZUNvbXBvbmVudChyYXdDb21wb25lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBfX3ZjY09wdHMgaXMgYWRkZWQgYnkgdnVlLWNsYXNzLWNvbXBvbmVudCBhbmQgY29udGFpbiB0aGUgcmVndWxhciBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHJhd0NvbXBvbmVudC5fX3ZjY09wdHMgfHwgcmF3Q29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3VhcmQgPSBvcHRpb25zW2d1YXJkVHlwZV07XHJcbiAgICAgICAgICAgICAgICBndWFyZCAmJiBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSwgcmVjb3JkLCBuYW1lKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydCByZXF1ZXN0aW5nIHRoZSBjaHVuayBhbHJlYWR5XHJcbiAgICAgICAgICAgICAgICBsZXQgY29tcG9uZW50UHJvbWlzZSA9IHJhd0NvbXBvbmVudCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhKCdjYXRjaCcgaW4gY29tcG9uZW50UHJvbWlzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgXCIke25hbWV9XCIgaW4gcmVjb3JkIHdpdGggcGF0aCBcIiR7cmVjb3JkLnBhdGh9XCIgaXMgYSBmdW5jdGlvbiB0aGF0IGRvZXMgbm90IHJldHVybiBhIFByb21pc2UuIElmIHlvdSB3ZXJlIHBhc3NpbmcgYSBmdW5jdGlvbmFsIGNvbXBvbmVudCwgbWFrZSBzdXJlIHRvIGFkZCBhIFwiZGlzcGxheU5hbWVcIiB0byB0aGUgY29tcG9uZW50LiBUaGlzIHdpbGwgYnJlYWsgaW4gcHJvZHVjdGlvbiBpZiBub3QgZml4ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb21wb25lbnRQcm9taXNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIGVycm9yIGlmIGFueVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFByb21pc2UgPSBjb21wb25lbnRQcm9taXNlLmNhdGNoKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGVyciA9PiBlcnIgJiYgd2FybihlcnIpIDogY29uc29sZS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBndWFyZHMucHVzaCgoKSA9PiBjb21wb25lbnRQcm9taXNlLnRoZW4ocmVzb2x2ZWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYENvdWxkbid0IHJlc29sdmUgY29tcG9uZW50IFwiJHtuYW1lfVwiIGF0IFwiJHtyZWNvcmQucGF0aH1cImApKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZENvbXBvbmVudCA9IGlzRVNNb2R1bGUocmVzb2x2ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzb2x2ZWQuZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlc29sdmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIHJlc29sdmVkIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZC5jb21wb25lbnRzW25hbWVdID0gcmVzb2x2ZWRDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZTogdGhlIG9wdGlvbnMgdHlwZXMgYXJlIG5vdCBwcm9wYWdhdGVkIHRvIENvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gcmVzb2x2ZWRDb21wb25lbnRbZ3VhcmRUeXBlXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3VhcmQgJiYgZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20sIHJlY29yZCwgbmFtZSkoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBndWFyZHM7XHJcbn1cclxuLyoqXHJcbiAqIEFsbG93cyBkaWZmZXJlbnRpYXRpbmcgbGF6eSBjb21wb25lbnRzIGZyb20gZnVuY3Rpb25hbCBjb21wb25lbnRzIGFuZCB2dWUtY2xhc3MtY29tcG9uZW50XHJcbiAqIEBwYXJhbSBjb21wb25lbnRcclxuICovXHJcbmZ1bmN0aW9uIGlzUm91dGVDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBjb21wb25lbnQgPT09ICdvYmplY3QnIHx8XHJcbiAgICAgICAgJ2Rpc3BsYXlOYW1lJyBpbiBjb21wb25lbnQgfHxcclxuICAgICAgICAncHJvcHMnIGluIGNvbXBvbmVudCB8fFxyXG4gICAgICAgICdfX3ZjY09wdHMnIGluIGNvbXBvbmVudCk7XHJcbn1cblxuLy8gVE9ETzogd2UgY291bGQgYWxsb3cgY3VycmVudFJvdXRlIGFzIGEgcHJvcCB0byBleHBvc2UgYGlzQWN0aXZlYCBhbmRcclxuLy8gYGlzRXhhY3RBY3RpdmVgIGJlaGF2aW9yIHNob3VsZCBnbyB0aHJvdWdoIGFuIFJGQ1xyXG5mdW5jdGlvbiB1c2VMaW5rKHByb3BzKSB7XHJcbiAgICBjb25zdCByb3V0ZXIgPSBpbmplY3Qocm91dGVyS2V5KTtcclxuICAgIGNvbnN0IGN1cnJlbnRSb3V0ZSA9IGluamVjdChyb3V0ZUxvY2F0aW9uS2V5KTtcclxuICAgIGNvbnN0IHJvdXRlID0gY29tcHV0ZWQoKCkgPT4gcm91dGVyLnJlc29sdmUodW5yZWYocHJvcHMudG8pKSk7XHJcbiAgICBjb25zdCBhY3RpdmVSZWNvcmRJbmRleCA9IGNvbXB1dGVkKCgpID0+IHtcclxuICAgICAgICBsZXQgeyBtYXRjaGVkIH0gPSByb3V0ZS52YWx1ZTtcclxuICAgICAgICBsZXQgeyBsZW5ndGggfSA9IG1hdGNoZWQ7XHJcbiAgICAgICAgY29uc3Qgcm91dGVNYXRjaGVkID0gbWF0Y2hlZFtsZW5ndGggLSAxXTtcclxuICAgICAgICBsZXQgY3VycmVudE1hdGNoZWQgPSBjdXJyZW50Um91dGUubWF0Y2hlZDtcclxuICAgICAgICBpZiAoIXJvdXRlTWF0Y2hlZCB8fCAhY3VycmVudE1hdGNoZWQubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gY3VycmVudE1hdGNoZWQuZmluZEluZGV4KGlzU2FtZVJvdXRlUmVjb3JkLmJpbmQobnVsbCwgcm91dGVNYXRjaGVkKSk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcclxuICAgICAgICAvLyBwb3NzaWJsZSBwYXJlbnQgcmVjb3JkXHJcbiAgICAgICAgbGV0IHBhcmVudFJlY29yZFBhdGggPSBnZXRPcmlnaW5hbFBhdGgobWF0Y2hlZFtsZW5ndGggLSAyXSk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAvLyB3ZSBhcmUgZGVhbGluZyB3aXRoIG5lc3RlZCByb3V0ZXNcclxuICAgICAgICBsZW5ndGggPiAxICYmXHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgYW5kIG1hdGNoZWQgcm91dGUgaGF2ZSB0aGUgc2FtZSBwYXRoLCB0aGlzIGxpbmsgaXNcclxuICAgICAgICAgICAgLy8gcmVmZXJyaW5nIHRvIHRoZSBlbXB0eSBjaGlsZC4gT3Igd2UgY3VycmVudGx5IGFyZSBvbiBhIGRpZmZlcmVudFxyXG4gICAgICAgICAgICAvLyBjaGlsZCBvZiB0aGUgc2FtZSBwYXJlbnRcclxuICAgICAgICAgICAgZ2V0T3JpZ2luYWxQYXRoKHJvdXRlTWF0Y2hlZCkgPT09IHBhcmVudFJlY29yZFBhdGggJiZcclxuICAgICAgICAgICAgLy8gYXZvaWQgY29tcGFyaW5nIHRoZSBjaGlsZCB3aXRoIGl0cyBwYXJlbnRcclxuICAgICAgICAgICAgY3VycmVudE1hdGNoZWRbY3VycmVudE1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aCAhPT0gcGFyZW50UmVjb3JkUGF0aFxyXG4gICAgICAgICAgICA/IGN1cnJlbnRNYXRjaGVkLmZpbmRJbmRleChpc1NhbWVSb3V0ZVJlY29yZC5iaW5kKG51bGwsIG1hdGNoZWRbbGVuZ3RoIC0gMl0pKVxyXG4gICAgICAgICAgICA6IGluZGV4KTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBhY3RpdmVSZWNvcmRJbmRleC52YWx1ZSA+IC0xICYmXHJcbiAgICAgICAgaW5jbHVkZXNQYXJhbXMoY3VycmVudFJvdXRlLnBhcmFtcywgcm91dGUudmFsdWUucGFyYW1zKSk7XHJcbiAgICBjb25zdCBpc0V4YWN0QWN0aXZlID0gY29tcHV0ZWQoKCkgPT4gYWN0aXZlUmVjb3JkSW5kZXgudmFsdWUgPiAtMSAmJlxyXG4gICAgICAgIGFjdGl2ZVJlY29yZEluZGV4LnZhbHVlID09PSBjdXJyZW50Um91dGUubWF0Y2hlZC5sZW5ndGggLSAxICYmXHJcbiAgICAgICAgaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtcyhjdXJyZW50Um91dGUucGFyYW1zLCByb3V0ZS52YWx1ZS5wYXJhbXMpKTtcclxuICAgIGZ1bmN0aW9uIG5hdmlnYXRlKGUgPSB7fSkge1xyXG4gICAgICAgIGlmIChndWFyZEV2ZW50KGUpKVxyXG4gICAgICAgICAgICByZXR1cm4gcm91dGVyW3VucmVmKHByb3BzLnJlcGxhY2UpID8gJ3JlcGxhY2UnIDogJ3B1c2gnXSh1bnJlZihwcm9wcy50bykpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcm91dGUsXHJcbiAgICAgICAgaHJlZjogY29tcHV0ZWQoKCkgPT4gcm91dGUudmFsdWUuaHJlZiksXHJcbiAgICAgICAgaXNBY3RpdmUsXHJcbiAgICAgICAgaXNFeGFjdEFjdGl2ZSxcclxuICAgICAgICBuYXZpZ2F0ZSxcclxuICAgIH07XHJcbn1cclxuY29uc3QgUm91dGVyTGlua0ltcGwgPSAvKiNfX1BVUkVfXyovIGRlZmluZUNvbXBvbmVudCh7XHJcbiAgICBuYW1lOiAnUm91dGVyTGluaycsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIHRvOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgICAgICAvLyBpbmFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICAgICAgZXhhY3RBY3RpdmVDbGFzczogU3RyaW5nLFxyXG4gICAgICAgIGN1c3RvbTogQm9vbGVhbixcclxuICAgICAgICBhcmlhQ3VycmVudFZhbHVlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgZGVmYXVsdDogJ3BhZ2UnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGF0dHJzIH0pIHtcclxuICAgICAgICBjb25zdCBsaW5rID0gcmVhY3RpdmUodXNlTGluayhwcm9wcykpO1xyXG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gaW5qZWN0KHJvdXRlcktleSk7XHJcbiAgICAgICAgY29uc3QgZWxDbGFzcyA9IGNvbXB1dGVkKCgpID0+ICh7XHJcbiAgICAgICAgICAgIFtnZXRMaW5rQ2xhc3MocHJvcHMuYWN0aXZlQ2xhc3MsIG9wdGlvbnMubGlua0FjdGl2ZUNsYXNzLCAncm91dGVyLWxpbmstYWN0aXZlJyldOiBsaW5rLmlzQWN0aXZlLFxyXG4gICAgICAgICAgICAvLyBbZ2V0TGlua0NsYXNzKFxyXG4gICAgICAgICAgICAvLyAgIHByb3BzLmluYWN0aXZlQ2xhc3MsXHJcbiAgICAgICAgICAgIC8vICAgb3B0aW9ucy5saW5rSW5hY3RpdmVDbGFzcyxcclxuICAgICAgICAgICAgLy8gICAncm91dGVyLWxpbmstaW5hY3RpdmUnXHJcbiAgICAgICAgICAgIC8vICldOiAhbGluay5pc0V4YWN0QWN0aXZlLFxyXG4gICAgICAgICAgICBbZ2V0TGlua0NsYXNzKHByb3BzLmV4YWN0QWN0aXZlQ2xhc3MsIG9wdGlvbnMubGlua0V4YWN0QWN0aXZlQ2xhc3MsICdyb3V0ZXItbGluay1leGFjdC1hY3RpdmUnKV06IGxpbmsuaXNFeGFjdEFjdGl2ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQobGluayk7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5jdXN0b21cclxuICAgICAgICAgICAgICAgID8gY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIDogaCgnYScsIGFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY3VycmVudCc6IGxpbmsuaXNFeGFjdEFjdGl2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHByb3BzLmFyaWFDdXJyZW50VmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGxpbmsubmF2aWdhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogbGluay5ocmVmLFxyXG4gICAgICAgICAgICAgICAgfSwgYXR0cnMsIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzczogZWxDbGFzcy52YWx1ZSxcclxuICAgICAgICAgICAgICAgIH0pLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xyXG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2VcclxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcclxuLyoqXHJcbiAqIENvbXBvbmVudCB0byByZW5kZXIgYSBsaW5rIHRoYXQgdHJpZ2dlcnMgYSBuYXZpZ2F0aW9uIG9uIGNsaWNrLlxyXG4gKi9cclxuY29uc3QgUm91dGVyTGluayA9IFJvdXRlckxpbmtJbXBsO1xyXG5mdW5jdGlvbiBndWFyZEV2ZW50KGUpIHtcclxuICAgIC8vIGRvbid0IHJlZGlyZWN0IHdpdGggY29udHJvbCBrZXlzXHJcbiAgICBpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIC8vIGRvbid0IHJlZGlyZWN0IHdoZW4gcHJldmVudERlZmF1bHQgY2FsbGVkXHJcbiAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrXHJcbiAgICBpZiAoZS5idXR0b24gIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbiAhPT0gMClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBkb24ndCByZWRpcmVjdCBpZiBgdGFyZ2V0PVwiX2JsYW5rXCJgXHJcbiAgICAvLyBAdHMtaWdub3JlIGdldEF0dHJpYnV0ZSBkb2VzIGV4aXN0XHJcbiAgICBpZiAoZS5jdXJyZW50VGFyZ2V0ICYmIGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUpIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlIGdldEF0dHJpYnV0ZSBleGlzdHNcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKTtcclxuICAgICAgICBpZiAoL1xcYl9ibGFua1xcYi9pLnRlc3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZFxyXG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaW5jbHVkZXNQYXJhbXMob3V0ZXIsIGlubmVyKSB7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gaW5uZXIpIHtcclxuICAgICAgICBsZXQgaW5uZXJWYWx1ZSA9IGlubmVyW2tleV07XHJcbiAgICAgICAgbGV0IG91dGVyVmFsdWUgPSBvdXRlcltrZXldO1xyXG4gICAgICAgIGlmICh0eXBlb2YgaW5uZXJWYWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKGlubmVyVmFsdWUgIT09IG91dGVyVmFsdWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob3V0ZXJWYWx1ZSkgfHxcclxuICAgICAgICAgICAgICAgIG91dGVyVmFsdWUubGVuZ3RoICE9PSBpbm5lclZhbHVlLmxlbmd0aCB8fFxyXG4gICAgICAgICAgICAgICAgaW5uZXJWYWx1ZS5zb21lKCh2YWx1ZSwgaSkgPT4gdmFsdWUgIT09IG91dGVyVmFsdWVbaV0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbi8qKlxyXG4gKiBHZXQgdGhlIG9yaWdpbmFsIHBhdGggdmFsdWUgb2YgYSByZWNvcmQgYnkgZm9sbG93aW5nIGl0cyBhbGlhc09mXHJcbiAqIEBwYXJhbSByZWNvcmRcclxuICovXHJcbmZ1bmN0aW9uIGdldE9yaWdpbmFsUGF0aChyZWNvcmQpIHtcclxuICAgIHJldHVybiByZWNvcmQgPyAocmVjb3JkLmFsaWFzT2YgPyByZWNvcmQuYWxpYXNPZi5wYXRoIDogcmVjb3JkLnBhdGgpIDogJyc7XHJcbn1cclxuLyoqXHJcbiAqIFV0aWxpdHkgY2xhc3MgdG8gZ2V0IHRoZSBhY3RpdmUgY2xhc3MgYmFzZWQgb24gZGVmYXVsdHMuXHJcbiAqIEBwYXJhbSBwcm9wQ2xhc3NcclxuICogQHBhcmFtIGdsb2JhbENsYXNzXHJcbiAqIEBwYXJhbSBkZWZhdWx0Q2xhc3NcclxuICovXHJcbmNvbnN0IGdldExpbmtDbGFzcyA9IChwcm9wQ2xhc3MsIGdsb2JhbENsYXNzLCBkZWZhdWx0Q2xhc3MpID0+IHByb3BDbGFzcyAhPSBudWxsXHJcbiAgICA/IHByb3BDbGFzc1xyXG4gICAgOiBnbG9iYWxDbGFzcyAhPSBudWxsXHJcbiAgICAgICAgPyBnbG9iYWxDbGFzc1xyXG4gICAgICAgIDogZGVmYXVsdENsYXNzO1xuXG5jb25zdCBSb3V0ZXJWaWV3SW1wbCA9IC8qI19fUFVSRV9fKi8gZGVmaW5lQ29tcG9uZW50KHtcclxuICAgIG5hbWU6ICdSb3V0ZXJWaWV3JyxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgbmFtZToge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJvdXRlOiBPYmplY3QsXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgYXR0cnMsIHNsb3RzIH0pIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkRlcHJlY2F0ZWRVc2FnZSgpO1xyXG4gICAgICAgIGNvbnN0IGluamVjdGVkUm91dGUgPSBpbmplY3Qocm91dGVMb2NhdGlvbktleSk7XHJcbiAgICAgICAgY29uc3QgZGVwdGggPSBpbmplY3Qodmlld0RlcHRoS2V5LCAwKTtcclxuICAgICAgICBjb25zdCBtYXRjaGVkUm91dGVSZWYgPSBjb21wdXRlZCgoKSA9PiAocHJvcHMucm91dGUgfHwgaW5qZWN0ZWRSb3V0ZSkubWF0Y2hlZFtkZXB0aF0pO1xyXG4gICAgICAgIHByb3ZpZGUodmlld0RlcHRoS2V5LCBkZXB0aCArIDEpO1xyXG4gICAgICAgIHByb3ZpZGUobWF0Y2hlZFJvdXRlS2V5LCBtYXRjaGVkUm91dGVSZWYpO1xyXG4gICAgICAgIGNvbnN0IHZpZXdSZWYgPSByZWYoKTtcclxuICAgICAgICAvLyB3YXRjaCBhdCB0aGUgc2FtZSB0aW1lIHRoZSBjb21wb25lbnQgaW5zdGFuY2UsIHRoZSByb3V0ZSByZWNvcmQgd2UgYXJlXHJcbiAgICAgICAgLy8gcmVuZGVyaW5nLCBhbmQgdGhlIG5hbWVcclxuICAgICAgICB3YXRjaCgoKSA9PiBbdmlld1JlZi52YWx1ZSwgbWF0Y2hlZFJvdXRlUmVmLnZhbHVlLCBwcm9wcy5uYW1lXSwgKFtpbnN0YW5jZSwgdG8sIG5hbWVdLCBbb2xkSW5zdGFuY2UsIGZyb20sIG9sZE5hbWVdKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNvcHkgcmV1c2VkIGluc3RhbmNlc1xyXG4gICAgICAgICAgICBpZiAodG8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCB1cGRhdGUgdGhlIGluc3RhbmNlIGZvciBuZXcgaW5zdGFuY2VzIGFzIHdlbGwgYXMgcmV1c2VkXHJcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZXMgd2hlbiBuYXZpZ2F0aW5nIHRvIGEgbmV3IHJvdXRlXHJcbiAgICAgICAgICAgICAgICB0by5pbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgaXMgcmV1c2VkIGZvciBhIGRpZmZlcmVudCByb3V0ZSBvciBuYW1lIHNvXHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBjb3B5IGFueSBzYXZlZCB1cGRhdGUgb3IgbGVhdmUgZ3VhcmRzXHJcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSAmJiBpbnN0YW5jZSA9PT0gb2xkSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0by5sZWF2ZUd1YXJkcyA9IGZyb20ubGVhdmVHdWFyZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgdG8udXBkYXRlR3VhcmRzID0gZnJvbS51cGRhdGVHdWFyZHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdHJpZ2dlciBiZWZvcmVSb3V0ZUVudGVyIG5leHQgY2FsbGJhY2tzXHJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSAmJlxyXG4gICAgICAgICAgICAgICAgdG8gJiZcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGluc3RhbmNlIGJ1dCB0byBhbmQgZnJvbSBhcmUgdGhlIHNhbWUgdGhpcyBtaWdodCBiZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IHZpc2l0XHJcbiAgICAgICAgICAgICAgICAoIWZyb20gfHwgIWlzU2FtZVJvdXRlUmVjb3JkKHRvLCBmcm9tKSB8fCAhb2xkSW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAodG8uZW50ZXJDYWxsYmFja3NbbmFtZV0gfHwgW10pLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHsgZmx1c2g6ICdwb3N0JyB9KTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByb3V0ZSA9IHByb3BzLnJvdXRlIHx8IGluamVjdGVkUm91dGU7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRSb3V0ZSA9IG1hdGNoZWRSb3V0ZVJlZi52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgVmlld0NvbXBvbmVudCA9IG1hdGNoZWRSb3V0ZSAmJiBtYXRjaGVkUm91dGUuY29tcG9uZW50c1twcm9wcy5uYW1lXTtcclxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGUgdmFsdWUgYXQgdGhlIHRpbWUgd2UgcmVuZGVyIGJlY2F1c2Ugd2hlbiB3ZSB1bm1vdW50LCB3ZVxyXG4gICAgICAgICAgICAvLyBuYXZpZ2F0ZWQgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gc28gdGhlIHZhbHVlIGlzIGRpZmZlcmVudFxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TmFtZSA9IHByb3BzLm5hbWU7XHJcbiAgICAgICAgICAgIGlmICghVmlld0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsb3RzLmRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICA/IHNsb3RzLmRlZmF1bHQoeyBDb21wb25lbnQ6IFZpZXdDb21wb25lbnQsIHJvdXRlIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3BzIGZyb20gcm91dGUgY29uZmlndXJhdGlvblxyXG4gICAgICAgICAgICBjb25zdCByb3V0ZVByb3BzT3B0aW9uID0gbWF0Y2hlZFJvdXRlLnByb3BzW3Byb3BzLm5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCByb3V0ZVByb3BzID0gcm91dGVQcm9wc09wdGlvblxyXG4gICAgICAgICAgICAgICAgPyByb3V0ZVByb3BzT3B0aW9uID09PSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgPyByb3V0ZS5wYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiByb3V0ZVByb3BzT3B0aW9uID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcm91dGVQcm9wc09wdGlvbihyb3V0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiByb3V0ZVByb3BzT3B0aW9uXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uVm5vZGVVbm1vdW50ZWQgPSB2bm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGluc3RhbmNlIHJlZmVyZW5jZSB0byBwcmV2ZW50IGxlYWtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZS5jb21wb25lbnQuaXNVbm1vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkUm91dGUuaW5zdGFuY2VzW2N1cnJlbnROYW1lXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGgoVmlld0NvbXBvbmVudCwgYXNzaWduKHt9LCByb3V0ZVByb3BzLCBhdHRycywge1xyXG4gICAgICAgICAgICAgICAgb25Wbm9kZVVubW91bnRlZCxcclxuICAgICAgICAgICAgICAgIHJlZjogdmlld1JlZixcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAvLyBwYXNzIHRoZSB2bm9kZSB0byB0aGUgc2xvdCBhcyBhIHByb3AuXHJcbiAgICAgICAgICAgIC8vIGggYW5kIDxjb21wb25lbnQgOmlzPVwiLi4uXCI+IGJvdGggYWNjZXB0IHZub2Rlc1xyXG4gICAgICAgICAgICBzbG90cy5kZWZhdWx0XHJcbiAgICAgICAgICAgICAgICA/IHNsb3RzLmRlZmF1bHQoeyBDb21wb25lbnQ6IGNvbXBvbmVudCwgcm91dGUgfSlcclxuICAgICAgICAgICAgICAgIDogY29tcG9uZW50KTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XHJcbi8vIGV4cG9ydCB0aGUgcHVibGljIHR5cGUgZm9yIGgvdHN4IGluZmVyZW5jZVxyXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xyXG4vKipcclxuICogQ29tcG9uZW50IHRvIGRpc3BsYXkgdGhlIGN1cnJlbnQgcm91dGUgdGhlIHVzZXIgaXMgYXQuXHJcbiAqL1xyXG5jb25zdCBSb3V0ZXJWaWV3ID0gUm91dGVyVmlld0ltcGw7XHJcbi8vIHdhcm4gYWdhaW5zdCBkZXByZWNhdGVkIHVzYWdlIHdpdGggPHRyYW5zaXRpb24+ICYgPGtlZXAtYWxpdmU+XHJcbi8vIGR1ZSB0byBmdW5jdGlvbmFsIGNvbXBvbmVudCBiZWluZyBubyBsb25nZXIgZWFnZXIgaW4gVnVlIDNcclxuZnVuY3Rpb24gd2FybkRlcHJlY2F0ZWRVc2FnZSgpIHtcclxuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICBjb25zdCBwYXJlbnROYW1lID0gaW5zdGFuY2UucGFyZW50ICYmIGluc3RhbmNlLnBhcmVudC50eXBlLm5hbWU7XHJcbiAgICBpZiAocGFyZW50TmFtZSAmJlxyXG4gICAgICAgIChwYXJlbnROYW1lID09PSAnS2VlcEFsaXZlJyB8fCBwYXJlbnROYW1lLmluY2x1ZGVzKCdUcmFuc2l0aW9uJykpKSB7XHJcbiAgICAgICAgY29uc3QgY29tcCA9IHBhcmVudE5hbWUgPT09ICdLZWVwQWxpdmUnID8gJ2tlZXAtYWxpdmUnIDogJ3RyYW5zaXRpb24nO1xyXG4gICAgICAgIHdhcm4oYDxyb3V0ZXItdmlldz4gY2FuIG5vIGxvbmdlciBiZSB1c2VkIGRpcmVjdGx5IGluc2lkZSA8dHJhbnNpdGlvbj4gb3IgPGtlZXAtYWxpdmU+LlxcbmAgK1xyXG4gICAgICAgICAgICBgVXNlIHNsb3QgcHJvcHMgaW5zdGVhZDpcXG5cXG5gICtcclxuICAgICAgICAgICAgYDxyb3V0ZXItdmlldyB2LXNsb3Q9XCJ7IENvbXBvbmVudCB9XCI+XFxuYCArXHJcbiAgICAgICAgICAgIGAgIDwke2NvbXB9PlxcbmAgK1xyXG4gICAgICAgICAgICBgICAgIDxjb21wb25lbnQgOmlzPVwiQ29tcG9uZW50XCIgLz5cXG5gICtcclxuICAgICAgICAgICAgYCAgPC8ke2NvbXB9PlxcbmAgK1xyXG4gICAgICAgICAgICBgPC9yb3V0ZXItdmlldz5gKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIFJvdXRlciBpbnN0YW5jZSB0aGF0IGNhbiBiZSB1c2VkIGJ5IGEgVnVlIGFwcC5cclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgLSB7QGxpbmsgUm91dGVyT3B0aW9uc31cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihvcHRpb25zKSB7XHJcbiAgICBjb25zdCBtYXRjaGVyID0gY3JlYXRlUm91dGVyTWF0Y2hlcihvcHRpb25zLnJvdXRlcywgb3B0aW9ucyk7XHJcbiAgICBsZXQgcGFyc2VRdWVyeSQxID0gb3B0aW9ucy5wYXJzZVF1ZXJ5IHx8IHBhcnNlUXVlcnk7XHJcbiAgICBsZXQgc3RyaW5naWZ5UXVlcnkkMSA9IG9wdGlvbnMuc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7XHJcbiAgICBsZXQgeyBzY3JvbGxCZWhhdmlvciB9ID0gb3B0aW9ucztcclxuICAgIGxldCByb3V0ZXJIaXN0b3J5ID0gb3B0aW9ucy5oaXN0b3J5O1xyXG4gICAgY29uc3QgYmVmb3JlR3VhcmRzID0gdXNlQ2FsbGJhY2tzKCk7XHJcbiAgICBjb25zdCBiZWZvcmVSZXNvbHZlR3VhcmRzID0gdXNlQ2FsbGJhY2tzKCk7XHJcbiAgICBjb25zdCBhZnRlckd1YXJkcyA9IHVzZUNhbGxiYWNrcygpO1xyXG4gICAgY29uc3QgY3VycmVudFJvdXRlID0gc2hhbGxvd1JlZihTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKTtcclxuICAgIGxldCBwZW5kaW5nTG9jYXRpb24gPSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEO1xyXG4gICAgLy8gbGVhdmUgdGhlIHNjcm9sbFJlc3RvcmF0aW9uIGlmIG5vIHNjcm9sbEJlaGF2aW9yIGlzIHByb3ZpZGVkXHJcbiAgICBpZiAoaXNCcm93c2VyICYmIHNjcm9sbEJlaGF2aW9yICYmICdzY3JvbGxSZXN0b3JhdGlvbicgaW4gaGlzdG9yeSkge1xyXG4gICAgICAgIGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJztcclxuICAgIH1cclxuICAgIGNvbnN0IG5vcm1hbGl6ZVBhcmFtcyA9IGFwcGx5VG9QYXJhbXMuYmluZChudWxsLCBwYXJhbVZhbHVlID0+ICcnICsgcGFyYW1WYWx1ZSk7XHJcbiAgICBjb25zdCBlbmNvZGVQYXJhbXMgPSBhcHBseVRvUGFyYW1zLmJpbmQobnVsbCwgZW5jb2RlUGFyYW0pO1xyXG4gICAgY29uc3QgZGVjb2RlUGFyYW1zID0gYXBwbHlUb1BhcmFtcy5iaW5kKG51bGwsIGRlY29kZSk7XHJcbiAgICBmdW5jdGlvbiBhZGRSb3V0ZShwYXJlbnRPclJvdXRlLCByb3V0ZSkge1xyXG4gICAgICAgIGxldCBwYXJlbnQ7XHJcbiAgICAgICAgbGV0IHJlY29yZDtcclxuICAgICAgICBpZiAoaXNSb3V0ZU5hbWUocGFyZW50T3JSb3V0ZSkpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbWF0Y2hlci5nZXRSZWNvcmRNYXRjaGVyKHBhcmVudE9yUm91dGUpO1xyXG4gICAgICAgICAgICByZWNvcmQgPSByb3V0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlY29yZCA9IHBhcmVudE9yUm91dGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXRjaGVyLmFkZFJvdXRlKHJlY29yZCwgcGFyZW50KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZVJvdXRlKG5hbWUpIHtcclxuICAgICAgICBsZXQgcmVjb3JkTWF0Y2hlciA9IG1hdGNoZXIuZ2V0UmVjb3JkTWF0Y2hlcihuYW1lKTtcclxuICAgICAgICBpZiAocmVjb3JkTWF0Y2hlcikge1xyXG4gICAgICAgICAgICBtYXRjaGVyLnJlbW92ZVJvdXRlKHJlY29yZE1hdGNoZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgQ2Fubm90IHJlbW92ZSBub24tZXhpc3RlbnQgcm91dGUgXCIke1N0cmluZyhuYW1lKX1cImApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldFJvdXRlcygpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlci5nZXRSb3V0ZXMoKS5tYXAocm91dGVNYXRjaGVyID0+IHJvdXRlTWF0Y2hlci5yZWNvcmQpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaGFzUm91dGUobmFtZSkge1xyXG4gICAgICAgIHJldHVybiAhIW1hdGNoZXIuZ2V0UmVjb3JkTWF0Y2hlcihuYW1lKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlc29sdmUocmF3TG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbikge1xyXG4gICAgICAgIC8vIGNvbnN0IG9iamVjdExvY2F0aW9uID0gcm91dGVyTG9jYXRpb25Bc09iamVjdChyYXdMb2NhdGlvbilcclxuICAgICAgICAvLyB3ZSBjcmVhdGUgYSBjb3B5IHRvIG1vZGlmeSBpdCBsYXRlclxyXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbiA9IGFzc2lnbih7fSwgY3VycmVudExvY2F0aW9uIHx8IGN1cnJlbnRSb3V0ZS52YWx1ZSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByYXdMb2NhdGlvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgbGV0IGxvY2F0aW9uTm9ybWFsaXplZCA9IHBhcnNlVVJMKHBhcnNlUXVlcnkkMSwgcmF3TG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbi5wYXRoKTtcclxuICAgICAgICAgICAgbGV0IG1hdGNoZWRSb3V0ZSA9IG1hdGNoZXIucmVzb2x2ZSh7IHBhdGg6IGxvY2F0aW9uTm9ybWFsaXplZC5wYXRoIH0sIGN1cnJlbnRMb2NhdGlvbik7XHJcbiAgICAgICAgICAgIGxldCBocmVmID0gcm91dGVySGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uTm9ybWFsaXplZC5mdWxsUGF0aCk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChocmVmLnN0YXJ0c1dpdGgoJy8vJykpXHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgTG9jYXRpb24gXCIke3Jhd0xvY2F0aW9ufVwiIHJlc29sdmVkIHRvIFwiJHtocmVmfVwiLiBBIHJlc29sdmVkIGxvY2F0aW9uIGNhbm5vdCBzdGFydCB3aXRoIG11bHRpcGxlIHNsYXNoZXMuYCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghbWF0Y2hlZFJvdXRlLm1hdGNoZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgTm8gbWF0Y2ggZm91bmQgZm9yIGxvY2F0aW9uIHdpdGggcGF0aCBcIiR7cmF3TG9jYXRpb259XCJgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBsb2NhdGlvbk5vcm1hbGl6ZWQgaXMgYWx3YXlzIGEgbmV3IG9iamVjdFxyXG4gICAgICAgICAgICByZXR1cm4gYXNzaWduKGxvY2F0aW9uTm9ybWFsaXplZCwgbWF0Y2hlZFJvdXRlLCB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IGRlY29kZVBhcmFtcyhtYXRjaGVkUm91dGUucGFyYW1zKSxcclxuICAgICAgICAgICAgICAgIGhhc2g6IGRlY29kZShsb2NhdGlvbk5vcm1hbGl6ZWQuaGFzaCksXHJcbiAgICAgICAgICAgICAgICByZWRpcmVjdGVkRnJvbTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgaHJlZixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtYXRjaGVyTG9jYXRpb247XHJcbiAgICAgICAgLy8gcGF0aCBjb3VsZCBiZSByZWxhdGl2ZSBpbiBvYmplY3QgYXMgd2VsbFxyXG4gICAgICAgIGlmICgncGF0aCcgaW4gcmF3TG9jYXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgJ3BhcmFtcycgaW4gcmF3TG9jYXRpb24gJiZcclxuICAgICAgICAgICAgICAgICEoJ25hbWUnIGluIHJhd0xvY2F0aW9uKSAmJlxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMocmF3TG9jYXRpb24ucGFyYW1zKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFBhdGggXCIke3Jhd0xvY2F0aW9uLnBhdGh9XCIgd2FzIHBhc3NlZCB3aXRoIHBhcmFtcyBidXQgdGhleSB3aWxsIGJlIGlnbm9yZWQuIFVzZSBhIG5hbWVkIHJvdXRlIGFsb25nc2lkZSBwYXJhbXMgaW5zdGVhZC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXRjaGVyTG9jYXRpb24gPSBhc3NpZ24oe30sIHJhd0xvY2F0aW9uLCB7XHJcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXJzZVVSTChwYXJzZVF1ZXJ5JDEsIHJhd0xvY2F0aW9uLnBhdGgsIGN1cnJlbnRMb2NhdGlvbi5wYXRoKS5wYXRoLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHBhc3MgZW5jb2RlZCB2YWx1ZXMgdG8gdGhlIG1hdGNoZXIgc28gaXQgY2FuIHByb2R1Y2UgZW5jb2RlZCBwYXRoIGFuZCBmdWxsUGF0aFxyXG4gICAgICAgICAgICBtYXRjaGVyTG9jYXRpb24gPSBhc3NpZ24oe30sIHJhd0xvY2F0aW9uLCB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IGVuY29kZVBhcmFtcyhyYXdMb2NhdGlvbi5wYXJhbXMpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gY3VycmVudCBsb2NhdGlvbiBwYXJhbXMgYXJlIGRlY29kZWQsIHdlIG5lZWQgdG8gZW5jb2RlIHRoZW0gaW4gY2FzZSB0aGVcclxuICAgICAgICAgICAgLy8gbWF0Y2hlciBtZXJnZXMgdGhlIHBhcmFtc1xyXG4gICAgICAgICAgICBjdXJyZW50TG9jYXRpb24ucGFyYW1zID0gZW5jb2RlUGFyYW1zKGN1cnJlbnRMb2NhdGlvbi5wYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWF0Y2hlZFJvdXRlID0gbWF0Y2hlci5yZXNvbHZlKG1hdGNoZXJMb2NhdGlvbiwgY3VycmVudExvY2F0aW9uKTtcclxuICAgICAgICBjb25zdCBoYXNoID0gcmF3TG9jYXRpb24uaGFzaCB8fCAnJztcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGhhc2ggJiYgIWhhc2guc3RhcnRzV2l0aCgnIycpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEEgXFxgaGFzaFxcYCBzaG91bGQgYWx3YXlzIHN0YXJ0IHdpdGggdGhlIGNoYXJhY3RlciBcIiNcIi4gUmVwbGFjZSBcIiR7aGFzaH1cIiB3aXRoIFwiIyR7aGFzaH1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZGVjb2RpbmcgdGhlbSkgdGhlIG1hdGNoZXIgbWlnaHQgaGF2ZSBtZXJnZWQgY3VycmVudCBsb2NhdGlvbiBwYXJhbXMgc29cclxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJ1biB0aGUgZGVjb2RpbmcgYWdhaW5cclxuICAgICAgICBtYXRjaGVkUm91dGUucGFyYW1zID0gbm9ybWFsaXplUGFyYW1zKGRlY29kZVBhcmFtcyhtYXRjaGVkUm91dGUucGFyYW1zKSk7XHJcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSBzdHJpbmdpZnlVUkwoc3RyaW5naWZ5UXVlcnkkMSwgYXNzaWduKHt9LCByYXdMb2NhdGlvbiwge1xyXG4gICAgICAgICAgICBoYXNoOiBlbmNvZGVIYXNoKGhhc2gpLFxyXG4gICAgICAgICAgICBwYXRoOiBtYXRjaGVkUm91dGUucGF0aCxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgbGV0IGhyZWYgPSByb3V0ZXJIaXN0b3J5LmNyZWF0ZUhyZWYoZnVsbFBhdGgpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgaWYgKGhyZWYuc3RhcnRzV2l0aCgnLy8nKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgTG9jYXRpb24gXCIke3Jhd0xvY2F0aW9ufVwiIHJlc29sdmVkIHRvIFwiJHtocmVmfVwiLiBBIHJlc29sdmVkIGxvY2F0aW9uIGNhbm5vdCBzdGFydCB3aXRoIG11bHRpcGxlIHNsYXNoZXMuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIW1hdGNoZWRSb3V0ZS5tYXRjaGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgTm8gbWF0Y2ggZm91bmQgZm9yIGxvY2F0aW9uIHdpdGggcGF0aCBcIiR7J3BhdGgnIGluIHJhd0xvY2F0aW9uID8gcmF3TG9jYXRpb24ucGF0aCA6IHJhd0xvY2F0aW9ufVwiYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFzc2lnbih7XHJcbiAgICAgICAgICAgIGZ1bGxQYXRoLFxyXG4gICAgICAgICAgICAvLyBrZWVwIHRoZSBoYXNoIGVuY29kZWQgc28gZnVsbFBhdGggaXMgZWZmZWN0aXZlbHkgcGF0aCArIGVuY29kZWRRdWVyeSArXHJcbiAgICAgICAgICAgIC8vIGhhc2hcclxuICAgICAgICAgICAgaGFzaCxcclxuICAgICAgICAgICAgcXVlcnk6IFxyXG4gICAgICAgICAgICAvLyBpZiB0aGUgdXNlciBpcyB1c2luZyBhIGN1c3RvbSBxdWVyeSBsaWIgbGlrZSBxcywgd2UgbWlnaHQgaGF2ZVxyXG4gICAgICAgICAgICAvLyBuZXN0ZWQgb2JqZWN0cywgc28gd2Uga2VlcCB0aGUgcXVlcnkgYXMgaXMsIG1lYW5pbmcgaXQgY2FuIGNvbnRhaW5cclxuICAgICAgICAgICAgLy8gbnVtYmVycyBhdCBgJHJvdXRlLnF1ZXJ5YCwgYnV0IGF0IHRoZSBwb2ludCwgdGhlIHVzZXIgd2lsbCBoYXZlIHRvXHJcbiAgICAgICAgICAgIC8vIHVzZSB0aGVpciBvd24gdHlwZSBhbnl3YXkuXHJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyLW5leHQvaXNzdWVzLzMyOCNpc3N1ZWNvbW1lbnQtNjQ5NDgxNTY3XHJcbiAgICAgICAgICAgIHN0cmluZ2lmeVF1ZXJ5JDEgPT09IHN0cmluZ2lmeVF1ZXJ5XHJcbiAgICAgICAgICAgICAgICA/IG5vcm1hbGl6ZVF1ZXJ5KHJhd0xvY2F0aW9uLnF1ZXJ5KVxyXG4gICAgICAgICAgICAgICAgOiByYXdMb2NhdGlvbi5xdWVyeSxcclxuICAgICAgICB9LCBtYXRjaGVkUm91dGUsIHtcclxuICAgICAgICAgICAgcmVkaXJlY3RlZEZyb206IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgaHJlZixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGxvY2F0aW9uQXNPYmplY3QodG8pIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHRvID09PSAnc3RyaW5nJyA/IHsgcGF0aDogdG8gfSA6IGFzc2lnbih7fSwgdG8pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2hlY2tDYW5jZWxlZE5hdmlnYXRpb24odG8sIGZyb20pIHtcclxuICAgICAgICBpZiAocGVuZGluZ0xvY2F0aW9uICE9PSB0bykge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlUm91dGVyRXJyb3IoOCAvKiBOQVZJR0FUSU9OX0NBTkNFTExFRCAqLywge1xyXG4gICAgICAgICAgICAgICAgZnJvbSxcclxuICAgICAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBwdXNoKHRvKSB7XHJcbiAgICAgICAgcmV0dXJuIHB1c2hXaXRoUmVkaXJlY3QodG8pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVwbGFjZSh0bykge1xyXG4gICAgICAgIHJldHVybiBwdXNoKGFzc2lnbihsb2NhdGlvbkFzT2JqZWN0KHRvKSwgeyByZXBsYWNlOiB0cnVlIH0pKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHB1c2hXaXRoUmVkaXJlY3QodG8sIHJlZGlyZWN0ZWRGcm9tKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0TG9jYXRpb24gPSAocGVuZGluZ0xvY2F0aW9uID0gcmVzb2x2ZSh0bykpO1xyXG4gICAgICAgIGNvbnN0IGZyb20gPSBjdXJyZW50Um91dGUudmFsdWU7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRvLnN0YXRlO1xyXG4gICAgICAgIGNvbnN0IGZvcmNlID0gdG8uZm9yY2U7XHJcbiAgICAgICAgLy8gdG8gY291bGQgYmUgYSBzdHJpbmcgd2hlcmUgYHJlcGxhY2VgIGlzIGEgZnVuY3Rpb25cclxuICAgICAgICBjb25zdCByZXBsYWNlID0gdG8ucmVwbGFjZSA9PT0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBsYXN0TWF0Y2hlZCA9IHRhcmdldExvY2F0aW9uLm1hdGNoZWRbdGFyZ2V0TG9jYXRpb24ubWF0Y2hlZC5sZW5ndGggLSAxXTtcclxuICAgICAgICBpZiAobGFzdE1hdGNoZWQgJiYgbGFzdE1hdGNoZWQucmVkaXJlY3QpIHtcclxuICAgICAgICAgICAgY29uc3QgeyByZWRpcmVjdCB9ID0gbGFzdE1hdGNoZWQ7XHJcbiAgICAgICAgICAgIC8vIHRyYW5zZm9ybSBpdCBpbnRvIGFuIG9iamVjdCB0byBwYXNzIHRoZSBvcmlnaW5hbCBSb3V0ZUxvY2FsZU9wdGlvbnNcclxuICAgICAgICAgICAgbGV0IG5ld1RhcmdldExvY2F0aW9uID0gbG9jYXRpb25Bc09iamVjdCh0eXBlb2YgcmVkaXJlY3QgPT09ICdmdW5jdGlvbicgPyByZWRpcmVjdCh0YXJnZXRMb2NhdGlvbikgOiByZWRpcmVjdCk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICEoJ3BhdGgnIGluIG5ld1RhcmdldExvY2F0aW9uKSAmJlxyXG4gICAgICAgICAgICAgICAgISgnbmFtZScgaW4gbmV3VGFyZ2V0TG9jYXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHJlZGlyZWN0IGZvdW5kOlxcbiR7SlNPTi5zdHJpbmdpZnkobmV3VGFyZ2V0TG9jYXRpb24sIG51bGwsIDIpfVxcbiB3aGVuIG5hdmlnYXRpbmcgdG8gXCIke3RhcmdldExvY2F0aW9uLmZ1bGxQYXRofVwiLiBBIHJlZGlyZWN0IG11c3QgY29udGFpbiBhIG5hbWUgb3IgcGF0aC4gVGhpcyB3aWxsIGJyZWFrIGluIHByb2R1Y3Rpb24uYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIHJlZGlyZWN0JykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwdXNoV2l0aFJlZGlyZWN0KGFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICBxdWVyeTogdGFyZ2V0TG9jYXRpb24ucXVlcnksXHJcbiAgICAgICAgICAgICAgICBoYXNoOiB0YXJnZXRMb2NhdGlvbi5oYXNoLFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB0YXJnZXRMb2NhdGlvbi5wYXJhbXMsXHJcbiAgICAgICAgICAgIH0sIG5ld1RhcmdldExvY2F0aW9uLCB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogZGF0YSxcclxuICAgICAgICAgICAgICAgIGZvcmNlLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZSxcclxuICAgICAgICAgICAgfSksIFxyXG4gICAgICAgICAgICAvLyBrZWVwIG9yaWdpbmFsIHJlZGlyZWN0ZWRGcm9tIGlmIGl0IGV4aXN0c1xyXG4gICAgICAgICAgICByZWRpcmVjdGVkRnJvbSB8fCB0YXJnZXRMb2NhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIGl0IHdhcyBhIHJlZGlyZWN0IHdlIGFscmVhZHkgY2FsbGVkIGBwdXNoV2l0aFJlZGlyZWN0YCBhYm92ZVxyXG4gICAgICAgIGNvbnN0IHRvTG9jYXRpb24gPSB0YXJnZXRMb2NhdGlvbjtcclxuICAgICAgICB0b0xvY2F0aW9uLnJlZGlyZWN0ZWRGcm9tID0gcmVkaXJlY3RlZEZyb207XHJcbiAgICAgICAgbGV0IGZhaWx1cmU7XHJcbiAgICAgICAgaWYgKCFmb3JjZSAmJiBpc1NhbWVSb3V0ZUxvY2F0aW9uKHN0cmluZ2lmeVF1ZXJ5JDEsIGZyb20sIHRhcmdldExvY2F0aW9uKSkge1xyXG4gICAgICAgICAgICBmYWlsdXJlID0gY3JlYXRlUm91dGVyRXJyb3IoMTYgLyogTkFWSUdBVElPTl9EVVBMSUNBVEVEICovLCB7IHRvOiB0b0xvY2F0aW9uLCBmcm9tIH0pO1xyXG4gICAgICAgICAgICAvLyB0cmlnZ2VyIHNjcm9sbCB0byBhbGxvdyBzY3JvbGxpbmcgdG8gdGhlIHNhbWUgYW5jaG9yXHJcbiAgICAgICAgICAgIGhhbmRsZVNjcm9sbChmcm9tLCBmcm9tLCBcclxuICAgICAgICAgICAgLy8gdGhpcyBpcyBhIHB1c2gsIHRoZSBvbmx5IHdheSBmb3IgaXQgdG8gYmUgdHJpZ2dlcmVkIGZyb20gYVxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5Lmxpc3RlbiBpcyB3aXRoIGEgcmVkaXJlY3QsIHdoaWNoIG1ha2VzIGl0IGJlY29tZSBhIHB1c1xyXG4gICAgICAgICAgICB0cnVlLCBcclxuICAgICAgICAgICAgLy8gVGhpcyBjYW5ub3QgYmUgdGhlIGZpcnN0IG5hdmlnYXRpb24gYmVjYXVzZSB0aGUgaW5pdGlhbCBsb2NhdGlvblxyXG4gICAgICAgICAgICAvLyBjYW5ub3QgYmUgbWFudWFsbHkgbmF2aWdhdGVkIHRvXHJcbiAgICAgICAgICAgIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChmYWlsdXJlID8gUHJvbWlzZS5yZXNvbHZlKGZhaWx1cmUpIDogbmF2aWdhdGUodG9Mb2NhdGlvbiwgZnJvbSkpXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzTmF2aWdhdGlvbkZhaWx1cmUoZXJyb3IsIDQgLyogTkFWSUdBVElPTl9BQk9SVEVEICovIHxcclxuICAgICAgICAgICAgICAgIDggLyogTkFWSUdBVElPTl9DQU5DRUxMRUQgKi8gfFxyXG4gICAgICAgICAgICAgICAgMiAvKiBOQVZJR0FUSU9OX0dVQVJEX1JFRElSRUNUICovKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHVua25vd24gZXJyb3IsIHJlamVjdHNcclxuICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXJFcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKGZhaWx1cmUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGZhaWx1cmUsIDIgLyogTkFWSUdBVElPTl9HVUFSRF9SRURJUkVDVCAqLykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSByZWRpcmVjdGluZyB0byB0aGUgc2FtZSBsb2NhdGlvbiB3ZSB3ZXJlIGFscmVhZHkgYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTYW1lUm91dGVMb2NhdGlvbihzdHJpbmdpZnlRdWVyeSQxLCByZXNvbHZlKGZhaWx1cmUudG8pLCB0b0xvY2F0aW9uKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgd2UgaGF2ZSBkb25lIGl0IGEgY291cGxlIG9mIHRpbWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHJlZGlyZWN0ZWRGcm9tLl9jb3VudCA9IHJlZGlyZWN0ZWRGcm9tLl9jb3VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb20uX2NvdW50ICsgMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxKSA+IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYERldGVjdGVkIGFuIGluZmluaXRlIHJlZGlyZWN0aW9uIGluIGEgbmF2aWdhdGlvbiBndWFyZCB3aGVuIGdvaW5nIGZyb20gXCIke2Zyb20uZnVsbFBhdGh9XCIgdG8gXCIke3RvTG9jYXRpb24uZnVsbFBhdGh9XCIuIEFib3J0aW5nIHRvIGF2b2lkIGEgU3RhY2sgT3ZlcmZsb3cuIFRoaXMgd2lsbCBicmVhayBpbiBwcm9kdWN0aW9uIGlmIG5vdCBmaXhlZC5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignSW5maW5pdGUgcmVkaXJlY3QgaW4gbmF2aWdhdGlvbiBndWFyZCcpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB1c2hXaXRoUmVkaXJlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgLy8ga2VlcCBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKGxvY2F0aW9uQXNPYmplY3QoZmFpbHVyZS50byksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLCBcclxuICAgICAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgcmVkaXJlY3RlZEZyb20gaWYgYW55XHJcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb20gfHwgdG9Mb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBmYWlsIHdlIGRvbid0IGZpbmFsaXplIHRoZSBuYXZpZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICBmYWlsdXJlID0gZmluYWxpemVOYXZpZ2F0aW9uKHRvTG9jYXRpb24sIGZyb20sIHRydWUsIHJlcGxhY2UsIGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyaWdnZXJBZnRlckVhY2godG9Mb2NhdGlvbiwgZnJvbSwgZmFpbHVyZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgdG8gcmVqZWN0IGFuZCBza2lwIGFsbCBuYXZpZ2F0aW9uIGd1YXJkcyBpZiBhIG5ldyBuYXZpZ2F0aW9uIGhhcHBlbmVkXHJcbiAgICAgKiBAcGFyYW0gdG9cclxuICAgICAqIEBwYXJhbSBmcm9tXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uQW5kUmVqZWN0KHRvLCBmcm9tKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBjaGVja0NhbmNlbGVkTmF2aWdhdGlvbih0bywgZnJvbSk7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yID8gUHJvbWlzZS5yZWplY3QoZXJyb3IpIDogUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiByZWZhY3RvciB0aGUgd2hvbGUgYmVmb3JlIGd1YXJkcyBieSBpbnRlcm5hbGx5IHVzaW5nIHJvdXRlci5iZWZvcmVFYWNoXHJcbiAgICBmdW5jdGlvbiBuYXZpZ2F0ZSh0bywgZnJvbSkge1xyXG4gICAgICAgIGxldCBndWFyZHM7XHJcbiAgICAgICAgY29uc3QgW2xlYXZpbmdSZWNvcmRzLCB1cGRhdGluZ1JlY29yZHMsIGVudGVyaW5nUmVjb3JkcyxdID0gZXh0cmFjdENoYW5naW5nUmVjb3Jkcyh0bywgZnJvbSk7XHJcbiAgICAgICAgLy8gYWxsIGNvbXBvbmVudHMgaGVyZSBoYXZlIGJlZW4gcmVzb2x2ZWQgb25jZSBiZWNhdXNlIHdlIGFyZSBsZWF2aW5nXHJcbiAgICAgICAgZ3VhcmRzID0gZXh0cmFjdENvbXBvbmVudHNHdWFyZHMobGVhdmluZ1JlY29yZHMucmV2ZXJzZSgpLCAnYmVmb3JlUm91dGVMZWF2ZScsIHRvLCBmcm9tKTtcclxuICAgICAgICAvLyBsZWF2aW5nUmVjb3JkcyBpcyBhbHJlYWR5IHJldmVyc2VkXHJcbiAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgbGVhdmluZ1JlY29yZHMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiByZWNvcmQubGVhdmVHdWFyZHMpIHtcclxuICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2sgPSBjaGVja0NhbmNlbGVkTmF2aWdhdGlvbkFuZFJlamVjdC5iaW5kKG51bGwsIHRvLCBmcm9tKTtcclxuICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgLy8gcnVuIHRoZSBxdWV1ZSBvZiBwZXIgcm91dGUgYmVmb3JlUm91dGVMZWF2ZSBndWFyZHNcclxuICAgICAgICByZXR1cm4gKHJ1bkd1YXJkUXVldWUoZ3VhcmRzKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGdsb2JhbCBndWFyZHMgYmVmb3JlRWFjaFxyXG4gICAgICAgICAgICBndWFyZHMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiBiZWZvcmVHdWFyZHMubGlzdCgpKSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bkd1YXJkUXVldWUoZ3VhcmRzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGluIGNvbXBvbmVudHMgYmVmb3JlUm91dGVVcGRhdGVcclxuICAgICAgICAgICAgZ3VhcmRzID0gZXh0cmFjdENvbXBvbmVudHNHdWFyZHModXBkYXRpbmdSZWNvcmRzLCAnYmVmb3JlUm91dGVVcGRhdGUnLCB0bywgZnJvbSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIHVwZGF0aW5nUmVjb3Jkcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiByZWNvcmQudXBkYXRlR3VhcmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgcXVldWUgb2YgcGVyIHJvdXRlIGJlZm9yZUVudGVyIGd1YXJkc1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgdGhlIHJvdXRlIGJlZm9yZUVudGVyXHJcbiAgICAgICAgICAgIGd1YXJkcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiB0by5tYXRjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkbyBub3QgdHJpZ2dlciBiZWZvcmVFbnRlciBvbiByZXVzZWQgdmlld3NcclxuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuYmVmb3JlRW50ZXIgJiYgZnJvbS5tYXRjaGVkLmluZGV4T2YocmVjb3JkKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNvcmQuYmVmb3JlRW50ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYmVmb3JlRW50ZXIgb2YgcmVjb3JkLmJlZm9yZUVudGVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihiZWZvcmVFbnRlciwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4ocmVjb3JkLmJlZm9yZUVudGVyLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgcXVldWUgb2YgcGVyIHJvdXRlIGJlZm9yZUVudGVyIGd1YXJkc1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gTk9URTogYXQgdGhpcyBwb2ludCB0by5tYXRjaGVkIGlzIG5vcm1hbGl6ZWQgYW5kIGRvZXMgbm90IGNvbnRhaW4gYW55ICgpID0+IFByb21pc2U8Q29tcG9uZW50PlxyXG4gICAgICAgICAgICAvLyBjbGVhciBleGlzdGluZyBlbnRlckNhbGxiYWNrcywgdGhlc2UgYXJlIGFkZGVkIGJ5IGV4dHJhY3RDb21wb25lbnRzR3VhcmRzXHJcbiAgICAgICAgICAgIHRvLm1hdGNoZWQuZm9yRWFjaChyZWNvcmQgPT4gKHJlY29yZC5lbnRlckNhbGxiYWNrcyA9IHt9KSk7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGluLWNvbXBvbmVudCBiZWZvcmVSb3V0ZUVudGVyXHJcbiAgICAgICAgICAgIGd1YXJkcyA9IGV4dHJhY3RDb21wb25lbnRzR3VhcmRzKGVudGVyaW5nUmVjb3JkcywgJ2JlZm9yZVJvdXRlRW50ZXInLCB0bywgZnJvbSk7XHJcbiAgICAgICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAgICAgLy8gcnVuIHRoZSBxdWV1ZSBvZiBwZXIgcm91dGUgYmVmb3JlRW50ZXIgZ3VhcmRzXHJcbiAgICAgICAgICAgIHJldHVybiBydW5HdWFyZFF1ZXVlKGd1YXJkcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBnbG9iYWwgZ3VhcmRzIGJlZm9yZVJlc29sdmVcclxuICAgICAgICAgICAgZ3VhcmRzID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3VhcmQgb2YgYmVmb3JlUmVzb2x2ZUd1YXJkcy5saXN0KCkpIHtcclxuICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3VhcmRzLnB1c2goY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2spO1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vIGNhdGNoIGFueSBuYXZpZ2F0aW9uIGNhbmNlbGVkXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIsIDggLyogTkFWSUdBVElPTl9DQU5DRUxMRUQgKi8pXHJcbiAgICAgICAgICAgID8gZXJyXHJcbiAgICAgICAgICAgIDogUHJvbWlzZS5yZWplY3QoZXJyKSkpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdHJpZ2dlckFmdGVyRWFjaCh0bywgZnJvbSwgZmFpbHVyZSkge1xyXG4gICAgICAgIC8vIG5hdmlnYXRpb24gaXMgY29uZmlybWVkLCBjYWxsIGFmdGVyR3VhcmRzXHJcbiAgICAgICAgLy8gVE9ETzogd3JhcCB3aXRoIGVycm9yIGhhbmRsZXJzXHJcbiAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiBhZnRlckd1YXJkcy5saXN0KCkpXHJcbiAgICAgICAgICAgIGd1YXJkKHRvLCBmcm9tLCBmYWlsdXJlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogLSBDbGVhbnMgdXAgYW55IG5hdmlnYXRpb24gZ3VhcmRzXHJcbiAgICAgKiAtIENoYW5nZXMgdGhlIHVybCBpZiBuZWNlc3NhcnlcclxuICAgICAqIC0gQ2FsbHMgdGhlIHNjcm9sbEJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZpbmFsaXplTmF2aWdhdGlvbih0b0xvY2F0aW9uLCBmcm9tLCBpc1B1c2gsIHJlcGxhY2UsIGRhdGEpIHtcclxuICAgICAgICAvLyBhIG1vcmUgcmVjZW50IG5hdmlnYXRpb24gdG9vayBwbGFjZVxyXG4gICAgICAgIGNvbnN0IGVycm9yID0gY2hlY2tDYW5jZWxlZE5hdmlnYXRpb24odG9Mb2NhdGlvbiwgZnJvbSk7XHJcbiAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgLy8gb25seSBjb25zaWRlciBhcyBwdXNoIGlmIGl0J3Mgbm90IHRoZSBmaXJzdCBuYXZpZ2F0aW9uXHJcbiAgICAgICAgY29uc3QgaXNGaXJzdE5hdmlnYXRpb24gPSBmcm9tID09PSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gIWlzQnJvd3NlciA/IHt9IDogaGlzdG9yeS5zdGF0ZTtcclxuICAgICAgICAvLyBjaGFuZ2UgVVJMIG9ubHkgaWYgdGhlIHVzZXIgZGlkIGEgcHVzaC9yZXBsYWNlIGFuZCBpZiBpdCdzIG5vdCB0aGUgaW5pdGlhbCBuYXZpZ2F0aW9uIGJlY2F1c2VcclxuICAgICAgICAvLyBpdCdzIGp1c3QgcmVmbGVjdGluZyB0aGUgdXJsXHJcbiAgICAgICAgaWYgKGlzUHVzaCkge1xyXG4gICAgICAgICAgICAvLyBvbiB0aGUgaW5pdGlhbCBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRvIHJldXNlIHRoZSBzY3JvbGwgcG9zaXRpb24gZnJvbVxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YXRlIGlmIGl0IGV4aXN0c1xyXG4gICAgICAgICAgICBpZiAocmVwbGFjZSB8fCBpc0ZpcnN0TmF2aWdhdGlvbilcclxuICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkucmVwbGFjZSh0b0xvY2F0aW9uLmZ1bGxQYXRoLCBhc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogaXNGaXJzdE5hdmlnYXRpb24gJiYgc3RhdGUgJiYgc3RhdGUuc2Nyb2xsLFxyXG4gICAgICAgICAgICAgICAgfSwgZGF0YSkpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByb3V0ZXJIaXN0b3J5LnB1c2godG9Mb2NhdGlvbi5mdWxsUGF0aCwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFjY2VwdCBjdXJyZW50IG5hdmlnYXRpb25cclxuICAgICAgICBjdXJyZW50Um91dGUudmFsdWUgPSB0b0xvY2F0aW9uO1xyXG4gICAgICAgIGhhbmRsZVNjcm9sbCh0b0xvY2F0aW9uLCBmcm9tLCBpc1B1c2gsIGlzRmlyc3ROYXZpZ2F0aW9uKTtcclxuICAgICAgICBtYXJrQXNSZWFkeSgpO1xyXG4gICAgfVxyXG4gICAgbGV0IHJlbW92ZUhpc3RvcnlMaXN0ZW5lcjtcclxuICAgIC8vIGF0dGFjaCBsaXN0ZW5lciB0byBoaXN0b3J5IHRvIHRyaWdnZXIgbmF2aWdhdGlvbnNcclxuICAgIGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHJlbW92ZUhpc3RvcnlMaXN0ZW5lciA9IHJvdXRlckhpc3RvcnkubGlzdGVuKCh0bywgX2Zyb20sIGluZm8pID0+IHtcclxuICAgICAgICAgICAgLy8gY2Fubm90IGJlIGEgcmVkaXJlY3Qgcm91dGUgYmVjYXVzZSBpdCB3YXMgaW4gaGlzdG9yeVxyXG4gICAgICAgICAgICBjb25zdCB0b0xvY2F0aW9uID0gcmVzb2x2ZSh0byk7XHJcbiAgICAgICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IHRvTG9jYXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IGZyb20gPSBjdXJyZW50Um91dGUudmFsdWU7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBtb3ZlZCB0byB3ZWIgaGlzdG9yeT9cclxuICAgICAgICAgICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICAgICAgc2F2ZVNjcm9sbFBvc2l0aW9uKGdldFNjcm9sbEtleShmcm9tLmZ1bGxQYXRoLCBpbmZvLmRlbHRhKSwgY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5hdmlnYXRlKHRvTG9jYXRpb24sIGZyb20pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnJvciwgNCAvKiBOQVZJR0FUSU9OX0FCT1JURUQgKi8gfCA4IC8qIE5BVklHQVRJT05fQ0FOQ0VMTEVEICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yLCAyIC8qIE5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZG8gbm90IHJlc3RvcmUgaGlzdG9yeSBvbiB1bmtub3duIGRpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmRlbHRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJIaXN0b3J5LmdvKC1pbmZvLmRlbHRhLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGVycm9yIGlzIGFscmVhZHkgaGFuZGxlZCBieSByb3V0ZXIucHVzaCB3ZSBqdXN0IHdhbnQgdG8gYXZvaWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBsb2dnaW5nIHRoZSBlcnJvclxyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXaXRoUmVkaXJlY3QoZXJyb3IudG8sIHRvTG9jYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAvLyBhdm9pZCBhbiB1bmNhdWdodCByZWplY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICApLmNhdGNoKG5vb3ApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIHRoZSB0aGVuIGJyYW5jaFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gZG8gbm90IHJlc3RvcmUgaGlzdG9yeSBvbiB1bmtub3duIGRpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKGluZm8uZGVsdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5nbygtaW5mby5kZWx0YSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gdW5yZWNvZ25pemVkIGVycm9yLCB0cmFuc2ZlciB0byB0aGUgZ2xvYmFsIGhhbmRsZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGZhaWx1cmUpID0+IHtcclxuICAgICAgICAgICAgICAgIGZhaWx1cmUgPVxyXG4gICAgICAgICAgICAgICAgICAgIGZhaWx1cmUgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxpemVOYXZpZ2F0aW9uKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZnRlciBuYXZpZ2F0aW9uLCBhbGwgbWF0Y2hlZCBjb21wb25lbnRzIGFyZSByZXNvbHZlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b0xvY2F0aW9uLCBmcm9tLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAvLyByZXZlcnQgdGhlIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlICYmIGluZm8uZGVsdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5nbygtaW5mby5kZWx0YSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckFmdGVyRWFjaCh0b0xvY2F0aW9uLCBmcm9tLCBmYWlsdXJlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChub29wKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIEluaXRpYWxpemF0aW9uIGFuZCBFcnJvcnNcclxuICAgIGxldCByZWFkeUhhbmRsZXJzID0gdXNlQ2FsbGJhY2tzKCk7XHJcbiAgICBsZXQgZXJyb3JIYW5kbGVycyA9IHVzZUNhbGxiYWNrcygpO1xyXG4gICAgbGV0IHJlYWR5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VyIGVycm9ySGFuZGxlcnMgYWRkZWQgdmlhIG9uRXJyb3IgYW5kIHRocm93cyB0aGUgZXJyb3IgYXMgd2VsbFxyXG4gICAgICogQHBhcmFtIGVycm9yIC0gZXJyb3IgdG8gdGhyb3dcclxuICAgICAqIEByZXR1cm5zIHRoZSBlcnJvciBhcyBhIHJlamVjdGVkIHByb21pc2VcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdHJpZ2dlckVycm9yKGVycm9yKSB7XHJcbiAgICAgICAgbWFya0FzUmVhZHkoZXJyb3IpO1xyXG4gICAgICAgIGVycm9ySGFuZGxlcnMubGlzdCgpLmZvckVhY2goaGFuZGxlciA9PiBoYW5kbGVyKGVycm9yKSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGlzUmVhZHkoKSB7XHJcbiAgICAgICAgaWYgKHJlYWR5ICYmIGN1cnJlbnRSb3V0ZS52YWx1ZSAhPT0gU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRClcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHJlYWR5SGFuZGxlcnMuYWRkKFtyZXNvbHZlLCByZWplY3RdKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWFyayB0aGUgcm91dGVyIGFzIHJlYWR5LCByZXNvbHZpbmcgdGhlIHByb21pc2VkIHJldHVybmVkIGJ5IGlzUmVhZHkoKS4gQ2FuXHJcbiAgICAgKiBvbmx5IGJlIGNhbGxlZCBvbmNlLCBvdGhlcndpc2UgZG9lcyBub3RoaW5nLlxyXG4gICAgICogQHBhcmFtIGVyciAtIG9wdGlvbmFsIGVycm9yXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG1hcmtBc1JlYWR5KGVycikge1xyXG4gICAgICAgIGlmIChyZWFkeSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICBzZXR1cExpc3RlbmVycygpO1xyXG4gICAgICAgIHJlYWR5SGFuZGxlcnNcclxuICAgICAgICAgICAgLmxpc3QoKVxyXG4gICAgICAgICAgICAuZm9yRWFjaCgoW3Jlc29sdmUsIHJlamVjdF0pID0+IChlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSkpO1xyXG4gICAgICAgIHJlYWR5SGFuZGxlcnMucmVzZXQoKTtcclxuICAgIH1cclxuICAgIC8vIFNjcm9sbCBiZWhhdmlvclxyXG4gICAgZnVuY3Rpb24gaGFuZGxlU2Nyb2xsKHRvLCBmcm9tLCBpc1B1c2gsIGlzRmlyc3ROYXZpZ2F0aW9uKSB7XHJcbiAgICAgICAgaWYgKCFpc0Jyb3dzZXIgfHwgIXNjcm9sbEJlaGF2aW9yKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgbGV0IHNjcm9sbFBvc2l0aW9uID0gKCFpc1B1c2ggJiYgZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihnZXRTY3JvbGxLZXkodG8uZnVsbFBhdGgsIDApKSkgfHxcclxuICAgICAgICAgICAgKChpc0ZpcnN0TmF2aWdhdGlvbiB8fCAhaXNQdXNoKSAmJlxyXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5zdGF0ZSAmJlxyXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5zdGF0ZS5zY3JvbGwpIHx8XHJcbiAgICAgICAgICAgIG51bGw7XHJcbiAgICAgICAgcmV0dXJuIG5leHRUaWNrKClcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gc2Nyb2xsQmVoYXZpb3IodG8sIGZyb20sIHNjcm9sbFBvc2l0aW9uKSlcclxuICAgICAgICAgICAgLnRoZW4ocG9zaXRpb24gPT4gcG9zaXRpb24gJiYgc2Nyb2xsVG9Qb3NpdGlvbihwb3NpdGlvbikpXHJcbiAgICAgICAgICAgIC5jYXRjaCh0cmlnZ2VyRXJyb3IpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZ28gPSAoZGVsdGEpID0+IHJvdXRlckhpc3RvcnkuZ28oZGVsdGEpO1xyXG4gICAgbGV0IHN0YXJ0ZWQ7XHJcbiAgICBjb25zdCBpbnN0YWxsZWRBcHBzID0gbmV3IFNldCgpO1xyXG4gICAgY29uc3Qgcm91dGVyID0ge1xyXG4gICAgICAgIGN1cnJlbnRSb3V0ZSxcclxuICAgICAgICBhZGRSb3V0ZSxcclxuICAgICAgICByZW1vdmVSb3V0ZSxcclxuICAgICAgICBoYXNSb3V0ZSxcclxuICAgICAgICBnZXRSb3V0ZXMsXHJcbiAgICAgICAgcmVzb2x2ZSxcclxuICAgICAgICBvcHRpb25zLFxyXG4gICAgICAgIHB1c2gsXHJcbiAgICAgICAgcmVwbGFjZSxcclxuICAgICAgICBnbyxcclxuICAgICAgICBiYWNrOiAoKSA9PiBnbygtMSksXHJcbiAgICAgICAgZm9yd2FyZDogKCkgPT4gZ28oMSksXHJcbiAgICAgICAgYmVmb3JlRWFjaDogYmVmb3JlR3VhcmRzLmFkZCxcclxuICAgICAgICBiZWZvcmVSZXNvbHZlOiBiZWZvcmVSZXNvbHZlR3VhcmRzLmFkZCxcclxuICAgICAgICBhZnRlckVhY2g6IGFmdGVyR3VhcmRzLmFkZCxcclxuICAgICAgICBvbkVycm9yOiBlcnJvckhhbmRsZXJzLmFkZCxcclxuICAgICAgICBpc1JlYWR5LFxyXG4gICAgICAgIGluc3RhbGwoYXBwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XHJcbiAgICAgICAgICAgIGFwcC5jb21wb25lbnQoJ1JvdXRlckxpbmsnLCBSb3V0ZXJMaW5rKTtcclxuICAgICAgICAgICAgYXBwLmNvbXBvbmVudCgnUm91dGVyVmlldycsIFJvdXRlclZpZXcpO1xyXG4gICAgICAgICAgICBhcHAuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHJvdXRlciA9IHJvdXRlcjtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywgJyRyb3V0ZScsIHtcclxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gdW5yZWYoY3VycmVudFJvdXRlKSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaW5pdGlhbCBuYXZpZ2F0aW9uIGlzIG9ubHkgbmVjZXNzYXJ5IG9uIGNsaWVudCwgb24gc2VydmVyIGl0IGRvZXNuJ3RcclxuICAgICAgICAgICAgLy8gbWFrZSBzZW5zZSBiZWNhdXNlIGl0IHdpbGwgY3JlYXRlIGFuIGV4dHJhIHVubmVjZXNzYXJ5IG5hdmlnYXRpb24gYW5kIGNvdWxkXHJcbiAgICAgICAgICAgIC8vIGxlYWQgdG8gcHJvYmxlbXNcclxuICAgICAgICAgICAgaWYgKGlzQnJvd3NlciAmJlxyXG4gICAgICAgICAgICAgICAgLy8gdXNlZCBmb3IgdGhlIGluaXRpYWwgbmF2aWdhdGlvbiBjbGllbnQgc2lkZSB0byBhdm9pZCBwdXNoaW5nXHJcbiAgICAgICAgICAgICAgICAvLyBtdWx0aXBsZSB0aW1lcyB3aGVuIHRoZSByb3V0ZXIgaXMgdXNlZCBpbiBtdWx0aXBsZSBhcHBzXHJcbiAgICAgICAgICAgICAgICAhc3RhcnRlZCAmJlxyXG4gICAgICAgICAgICAgICAgY3VycmVudFJvdXRlLnZhbHVlID09PSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZWUgYWJvdmVcclxuICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcHVzaChyb3V0ZXJIaXN0b3J5LmxvY2F0aW9uKS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ1VuZXhwZWN0ZWQgZXJyb3Igd2hlbiBzdGFydGluZyB0aGUgcm91dGVyOicsIGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByZWFjdGl2ZVJvdXRlID0ge307XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlOiB0aGUga2V5IG1hdGNoZXNcclxuICAgICAgICAgICAgICAgIHJlYWN0aXZlUm91dGVba2V5XSA9IGNvbXB1dGVkKCgpID0+IGN1cnJlbnRSb3V0ZS52YWx1ZVtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhcHAucHJvdmlkZShyb3V0ZXJLZXksIHJvdXRlcik7XHJcbiAgICAgICAgICAgIGFwcC5wcm92aWRlKHJvdXRlTG9jYXRpb25LZXksIHJlYWN0aXZlKHJlYWN0aXZlUm91dGUpKTtcclxuICAgICAgICAgICAgbGV0IHVubW91bnRBcHAgPSBhcHAudW5tb3VudDtcclxuICAgICAgICAgICAgaW5zdGFsbGVkQXBwcy5hZGQoYXBwKTtcclxuICAgICAgICAgICAgYXBwLnVubW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YWxsZWRBcHBzLmRlbGV0ZShhcHApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbGxlZEFwcHMuc2l6ZSA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVIaXN0b3J5TGlzdGVuZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Um91dGUudmFsdWUgPSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByZWFkeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdW5tb3VudEFwcC5jYWxsKHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gcm91dGVyO1xyXG59XHJcbmZ1bmN0aW9uIHJ1bkd1YXJkUXVldWUoZ3VhcmRzKSB7XHJcbiAgICByZXR1cm4gZ3VhcmRzLnJlZHVjZSgocHJvbWlzZSwgZ3VhcmQpID0+IHByb21pc2UudGhlbigoKSA9PiBndWFyZCgpKSwgUHJvbWlzZS5yZXNvbHZlKCkpO1xyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RDaGFuZ2luZ1JlY29yZHModG8sIGZyb20pIHtcclxuICAgIGNvbnN0IGxlYXZpbmdSZWNvcmRzID0gW107XHJcbiAgICBjb25zdCB1cGRhdGluZ1JlY29yZHMgPSBbXTtcclxuICAgIGNvbnN0IGVudGVyaW5nUmVjb3JkcyA9IFtdO1xyXG4gICAgY29uc3QgbGVuID0gTWF0aC5tYXgoZnJvbS5tYXRjaGVkLmxlbmd0aCwgdG8ubWF0Y2hlZC5sZW5ndGgpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHJlY29yZEZyb20gPSBmcm9tLm1hdGNoZWRbaV07XHJcbiAgICAgICAgaWYgKHJlY29yZEZyb20pIHtcclxuICAgICAgICAgICAgaWYgKHRvLm1hdGNoZWQuaW5kZXhPZihyZWNvcmRGcm9tKSA8IDApXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nUmVjb3Jkcy5wdXNoKHJlY29yZEZyb20pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB1cGRhdGluZ1JlY29yZHMucHVzaChyZWNvcmRGcm9tKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVjb3JkVG8gPSB0by5tYXRjaGVkW2ldO1xyXG4gICAgICAgIGlmIChyZWNvcmRUbykge1xyXG4gICAgICAgICAgICAvLyB0aGUgdHlwZSBkb2Vzbid0IG1hdHRlciBiZWNhdXNlIHdlIGFyZSBjb21wYXJpbmcgcGVyIHJlZmVyZW5jZVxyXG4gICAgICAgICAgICBpZiAoZnJvbS5tYXRjaGVkLmluZGV4T2YocmVjb3JkVG8pIDwgMClcclxuICAgICAgICAgICAgICAgIGVudGVyaW5nUmVjb3Jkcy5wdXNoKHJlY29yZFRvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW2xlYXZpbmdSZWNvcmRzLCB1cGRhdGluZ1JlY29yZHMsIGVudGVyaW5nUmVjb3Jkc107XHJcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHJvdXRlciBpbnN0YW5jZS4gRXF1aXZhbGVudCB0byB1c2luZyBgJHJvdXRlcmAgaW5zaWRlXHJcbiAqIHRlbXBsYXRlcy5cclxuICovXHJcbmZ1bmN0aW9uIHVzZVJvdXRlcigpIHtcclxuICAgIHJldHVybiBpbmplY3Qocm91dGVyS2V5KTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgY3VycmVudCByb3V0ZSBsb2NhdGlvbi4gRXF1aXZhbGVudCB0byB1c2luZyBgJHJvdXRlYCBpbnNpZGVcclxuICogdGVtcGxhdGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gdXNlUm91dGUoKSB7XHJcbiAgICByZXR1cm4gaW5qZWN0KHJvdXRlTG9jYXRpb25LZXkpO1xyXG59XG5cbmV4cG9ydCB7IE5hdmlnYXRpb25GYWlsdXJlVHlwZSwgUm91dGVyTGluaywgUm91dGVyVmlldywgU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCBhcyBTVEFSVF9MT0NBVElPTiwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlUm91dGVyLCBjcmVhdGVSb3V0ZXJNYXRjaGVyLCBjcmVhdGVXZWJIYXNoSGlzdG9yeSwgY3JlYXRlV2ViSGlzdG9yeSwgaXNOYXZpZ2F0aW9uRmFpbHVyZSwgb25CZWZvcmVSb3V0ZUxlYXZlLCBvbkJlZm9yZVJvdXRlVXBkYXRlLCBwYXJzZVF1ZXJ5LCBzdHJpbmdpZnlRdWVyeSwgdXNlTGluaywgdXNlUm91dGUsIHVzZVJvdXRlciB9O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwiaW1wb3J0IHsgRU1QVFlfT0JKLCBpc0FycmF5LCBpc01hcCwgaXNJbnRlZ2VyS2V5LCBpc1N5bWJvbCwgZXh0ZW5kLCBoYXNPd24sIGlzT2JqZWN0LCBoYXNDaGFuZ2VkLCBjYXBpdGFsaXplLCB0b1Jhd1R5cGUsIGRlZiwgaXNGdW5jdGlvbiwgTk9PUCB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3QgdGFyZ2V0TWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgZWZmZWN0U3RhY2sgPSBbXTtcclxubGV0IGFjdGl2ZUVmZmVjdDtcclxuY29uc3QgSVRFUkFURV9LRVkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ2l0ZXJhdGUnIDogJycpO1xyXG5jb25zdCBNQVBfS0VZX0lURVJBVEVfS0VZID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdNYXAga2V5IGl0ZXJhdGUnIDogJycpO1xyXG5mdW5jdGlvbiBpc0VmZmVjdChmbikge1xyXG4gICAgcmV0dXJuIGZuICYmIGZuLl9pc0VmZmVjdCA9PT0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBlZmZlY3QoZm4sIG9wdGlvbnMgPSBFTVBUWV9PQkopIHtcclxuICAgIGlmIChpc0VmZmVjdChmbikpIHtcclxuICAgICAgICBmbiA9IGZuLnJhdztcclxuICAgIH1cclxuICAgIGNvbnN0IGVmZmVjdCA9IGNyZWF0ZVJlYWN0aXZlRWZmZWN0KGZuLCBvcHRpb25zKTtcclxuICAgIGlmICghb3B0aW9ucy5sYXp5KSB7XHJcbiAgICAgICAgZWZmZWN0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZWZmZWN0O1xyXG59XHJcbmZ1bmN0aW9uIHN0b3AoZWZmZWN0KSB7XHJcbiAgICBpZiAoZWZmZWN0LmFjdGl2ZSkge1xyXG4gICAgICAgIGNsZWFudXAoZWZmZWN0KTtcclxuICAgICAgICBpZiAoZWZmZWN0Lm9wdGlvbnMub25TdG9wKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdC5vcHRpb25zLm9uU3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlZmZlY3QuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxubGV0IHVpZCA9IDA7XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlRWZmZWN0KGZuLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCBlZmZlY3QgPSBmdW5jdGlvbiByZWFjdGl2ZUVmZmVjdCgpIHtcclxuICAgICAgICBpZiAoIWVmZmVjdC5hY3RpdmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2NoZWR1bGVyID8gdW5kZWZpbmVkIDogZm4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFlZmZlY3RTdGFjay5pbmNsdWRlcyhlZmZlY3QpKSB7XHJcbiAgICAgICAgICAgIGNsZWFudXAoZWZmZWN0KTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZVRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3RTdGFjay5wdXNoKGVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVFZmZlY3QgPSBlZmZlY3Q7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdFN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRUcmFja2luZygpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gZWZmZWN0U3RhY2tbZWZmZWN0U3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZWZmZWN0LmlkID0gdWlkKys7XHJcbiAgICBlZmZlY3QuYWxsb3dSZWN1cnNlID0gISFvcHRpb25zLmFsbG93UmVjdXJzZTtcclxuICAgIGVmZmVjdC5faXNFZmZlY3QgPSB0cnVlO1xyXG4gICAgZWZmZWN0LmFjdGl2ZSA9IHRydWU7XHJcbiAgICBlZmZlY3QucmF3ID0gZm47XHJcbiAgICBlZmZlY3QuZGVwcyA9IFtdO1xyXG4gICAgZWZmZWN0Lm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgcmV0dXJuIGVmZmVjdDtcclxufVxyXG5mdW5jdGlvbiBjbGVhbnVwKGVmZmVjdCkge1xyXG4gICAgY29uc3QgeyBkZXBzIH0gPSBlZmZlY3Q7XHJcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZGVwc1tpXS5kZWxldGUoZWZmZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVwcy5sZW5ndGggPSAwO1xyXG4gICAgfVxyXG59XHJcbmxldCBzaG91bGRUcmFjayA9IHRydWU7XHJcbmNvbnN0IHRyYWNrU3RhY2sgPSBbXTtcclxuZnVuY3Rpb24gcGF1c2VUcmFja2luZygpIHtcclxuICAgIHRyYWNrU3RhY2sucHVzaChzaG91bGRUcmFjayk7XHJcbiAgICBzaG91bGRUcmFjayA9IGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGVuYWJsZVRyYWNraW5nKCkge1xyXG4gICAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcclxuICAgIHNob3VsZFRyYWNrID0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiByZXNldFRyYWNraW5nKCkge1xyXG4gICAgY29uc3QgbGFzdCA9IHRyYWNrU3RhY2sucG9wKCk7XHJcbiAgICBzaG91bGRUcmFjayA9IGxhc3QgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBsYXN0O1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrKHRhcmdldCwgdHlwZSwga2V5KSB7XHJcbiAgICBpZiAoIXNob3VsZFRyYWNrIHx8IGFjdGl2ZUVmZmVjdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XHJcbiAgICBpZiAoIWRlcHNNYXApIHtcclxuICAgICAgICB0YXJnZXRNYXAuc2V0KHRhcmdldCwgKGRlcHNNYXAgPSBuZXcgTWFwKCkpKTtcclxuICAgIH1cclxuICAgIGxldCBkZXAgPSBkZXBzTWFwLmdldChrZXkpO1xyXG4gICAgaWYgKCFkZXApIHtcclxuICAgICAgICBkZXBzTWFwLnNldChrZXksIChkZXAgPSBuZXcgU2V0KCkpKTtcclxuICAgIH1cclxuICAgIGlmICghZGVwLmhhcyhhY3RpdmVFZmZlY3QpKSB7XHJcbiAgICAgICAgZGVwLmFkZChhY3RpdmVFZmZlY3QpO1xyXG4gICAgICAgIGFjdGl2ZUVmZmVjdC5kZXBzLnB1c2goZGVwKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGFjdGl2ZUVmZmVjdC5vcHRpb25zLm9uVHJhY2spIHtcclxuICAgICAgICAgICAgYWN0aXZlRWZmZWN0Lm9wdGlvbnMub25UcmFjayh7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3Q6IGFjdGl2ZUVmZmVjdCxcclxuICAgICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICBrZXlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHRyaWdnZXIodGFyZ2V0LCB0eXBlLCBrZXksIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgb2xkVGFyZ2V0KSB7XHJcbiAgICBjb25zdCBkZXBzTWFwID0gdGFyZ2V0TWFwLmdldCh0YXJnZXQpO1xyXG4gICAgaWYgKCFkZXBzTWFwKSB7XHJcbiAgICAgICAgLy8gbmV2ZXIgYmVlbiB0cmFja2VkXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZWZmZWN0cyA9IG5ldyBTZXQoKTtcclxuICAgIGNvbnN0IGFkZCA9IChlZmZlY3RzVG9BZGQpID0+IHtcclxuICAgICAgICBpZiAoZWZmZWN0c1RvQWRkKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdHNUb0FkZC5mb3JFYWNoKGVmZmVjdCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0ICE9PSBhY3RpdmVFZmZlY3QgfHwgZWZmZWN0LmFsbG93UmVjdXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdHMuYWRkKGVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpZiAodHlwZSA9PT0gXCJjbGVhclwiIC8qIENMRUFSICovKSB7XHJcbiAgICAgICAgLy8gY29sbGVjdGlvbiBiZWluZyBjbGVhcmVkXHJcbiAgICAgICAgLy8gdHJpZ2dlciBhbGwgZWZmZWN0cyBmb3IgdGFyZ2V0XHJcbiAgICAgICAgZGVwc01hcC5mb3JFYWNoKGFkZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChrZXkgPT09ICdsZW5ndGgnICYmIGlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgIGRlcHNNYXAuZm9yRWFjaCgoZGVwLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2xlbmd0aCcgfHwga2V5ID49IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhZGQoZGVwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gc2NoZWR1bGUgcnVucyBmb3IgU0VUIHwgQUREIHwgREVMRVRFXHJcbiAgICAgICAgaWYgKGtleSAhPT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWxzbyBydW4gZm9yIGl0ZXJhdGlvbiBrZXkgb24gQUREIHwgREVMRVRFIHwgTWFwLlNFVFxyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiYWRkXCIgLyogQUREICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGQoZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGQoZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzSW50ZWdlcktleShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3IGluZGV4IGFkZGVkIHRvIGFycmF5IC0+IGxlbmd0aCBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KCdsZW5ndGgnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImRlbGV0ZVwiIC8qIERFTEVURSAqLzpcclxuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInNldFwiIC8qIFNFVCAqLzpcclxuICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBydW4gPSAoZWZmZWN0KSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBlZmZlY3Qub3B0aW9ucy5vblRyaWdnZXIpIHtcclxuICAgICAgICAgICAgZWZmZWN0Lm9wdGlvbnMub25UcmlnZ2VyKHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdCxcclxuICAgICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgb2xkVGFyZ2V0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWZmZWN0Lm9wdGlvbnMuc2NoZWR1bGVyKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdC5vcHRpb25zLnNjaGVkdWxlcihlZmZlY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZWZmZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGVmZmVjdHMuZm9yRWFjaChydW4pO1xyXG59XG5cbmNvbnN0IGJ1aWx0SW5TeW1ib2xzID0gbmV3IFNldChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpXHJcbiAgICAubWFwKGtleSA9PiBTeW1ib2xba2V5XSlcclxuICAgIC5maWx0ZXIoaXNTeW1ib2wpKTtcclxuY29uc3QgZ2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIoKTtcclxuY29uc3Qgc2hhbGxvd0dldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKGZhbHNlLCB0cnVlKTtcclxuY29uc3QgcmVhZG9ubHlHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcih0cnVlKTtcclxuY29uc3Qgc2hhbGxvd1JlYWRvbmx5R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIodHJ1ZSwgdHJ1ZSk7XHJcbmNvbnN0IGFycmF5SW5zdHJ1bWVudGF0aW9ucyA9IHt9O1xyXG5bJ2luY2x1ZGVzJywgJ2luZGV4T2YnLCAnbGFzdEluZGV4T2YnXS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICBjb25zdCBtZXRob2QgPSBBcnJheS5wcm90b3R5cGVba2V5XTtcclxuICAgIGFycmF5SW5zdHJ1bWVudGF0aW9uc1trZXldID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICBjb25zdCBhcnIgPSB0b1Jhdyh0aGlzKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRyYWNrKGFyciwgXCJnZXRcIiAvKiBHRVQgKi8sIGkgKyAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHdlIHJ1biB0aGUgbWV0aG9kIHVzaW5nIHRoZSBvcmlnaW5hbCBhcmdzIGZpcnN0ICh3aGljaCBtYXkgYmUgcmVhY3RpdmUpXHJcbiAgICAgICAgY29uc3QgcmVzID0gbWV0aG9kLmFwcGx5KGFyciwgYXJncyk7XHJcbiAgICAgICAgaWYgKHJlcyA9PT0gLTEgfHwgcmVzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAvLyBpZiB0aGF0IGRpZG4ndCB3b3JrLCBydW4gaXQgYWdhaW4gdXNpbmcgcmF3IHZhbHVlcy5cclxuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseShhcnIsIGFyZ3MubWFwKHRvUmF3KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pO1xyXG5bJ3B1c2gnLCAncG9wJywgJ3NoaWZ0JywgJ3Vuc2hpZnQnLCAnc3BsaWNlJ10uZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgY29uc3QgbWV0aG9kID0gQXJyYXkucHJvdG90eXBlW2tleV07XHJcbiAgICBhcnJheUluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbn0pO1xyXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXIoaXNSZWFkb25seSA9IGZhbHNlLCBzaGFsbG93ID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBnZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhaXNSZWFkb25seTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogSVNfUkVBRE9OTFkgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUkFXICovICYmXHJcbiAgICAgICAgICAgIHJlY2VpdmVyID09PSAoaXNSZWFkb25seSA/IHJlYWRvbmx5TWFwIDogcmVhY3RpdmVNYXApLmdldCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRhcmdldElzQXJyYXkgPSBpc0FycmF5KHRhcmdldCk7XHJcbiAgICAgICAgaWYgKHRhcmdldElzQXJyYXkgJiYgaGFzT3duKGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQoYXJyYXlJbnN0cnVtZW50YXRpb25zLCBrZXksIHJlY2VpdmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcclxuICAgICAgICBpZiAoaXNTeW1ib2woa2V5KVxyXG4gICAgICAgICAgICA/IGJ1aWx0SW5TeW1ib2xzLmhhcyhrZXkpXHJcbiAgICAgICAgICAgIDoga2V5ID09PSBgX19wcm90b19fYCB8fCBrZXkgPT09IGBfX3ZfaXNSZWZgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNSZWFkb25seSkge1xyXG4gICAgICAgICAgICB0cmFjayh0YXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhbGxvdykge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNSZWYocmVzKSkge1xyXG4gICAgICAgICAgICAvLyByZWYgdW53cmFwcGluZyAtIGRvZXMgbm90IGFwcGx5IGZvciBBcnJheSArIGludGVnZXIga2V5LlxyXG4gICAgICAgICAgICBjb25zdCBzaG91bGRVbndyYXAgPSAhdGFyZ2V0SXNBcnJheSB8fCAhaXNJbnRlZ2VyS2V5KGtleSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzaG91bGRVbndyYXAgPyByZXMudmFsdWUgOiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc09iamVjdChyZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgcmV0dXJuZWQgdmFsdWUgaW50byBhIHByb3h5IGFzIHdlbGwuIHdlIGRvIHRoZSBpc09iamVjdCBjaGVja1xyXG4gICAgICAgICAgICAvLyBoZXJlIHRvIGF2b2lkIGludmFsaWQgdmFsdWUgd2FybmluZy4gQWxzbyBuZWVkIHRvIGxhenkgYWNjZXNzIHJlYWRvbmx5XHJcbiAgICAgICAgICAgIC8vIGFuZCByZWFjdGl2ZSBoZXJlIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kuXHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5ID8gcmVhZG9ubHkocmVzKSA6IHJlYWN0aXZlKHJlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IHNldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlU2V0dGVyKCk7XHJcbmNvbnN0IHNoYWxsb3dTZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcih0cnVlKTtcclxuZnVuY3Rpb24gY3JlYXRlU2V0dGVyKHNoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSB7XHJcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcclxuICAgICAgICBpZiAoIXNoYWxsb3cpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGFkS2V5ID0gaXNBcnJheSh0YXJnZXQpICYmIGlzSW50ZWdlcktleShrZXkpXHJcbiAgICAgICAgICAgID8gTnVtYmVyKGtleSkgPCB0YXJnZXQubGVuZ3RoXHJcbiAgICAgICAgICAgIDogaGFzT3duKHRhcmdldCwga2V5KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcclxuICAgICAgICAvLyBkb24ndCB0cmlnZ2VyIGlmIHRhcmdldCBpcyBzb21ldGhpbmcgdXAgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiBvZiBvcmlnaW5hbFxyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHRvUmF3KHJlY2VpdmVyKSkge1xyXG4gICAgICAgICAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCBrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XHJcbiAgICBjb25zdCBoYWRLZXkgPSBoYXNPd24odGFyZ2V0LCBrZXkpO1xyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKHJlc3VsdCAmJiBoYWRLZXkpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiAvKiBERUxFVEUgKi8sIGtleSwgdW5kZWZpbmVkLCBvbGRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGhhcyh0YXJnZXQsIGtleSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFpc1N5bWJvbChrZXkpIHx8ICFidWlsdEluU3ltYm9scy5oYXMoa2V5KSkge1xyXG4gICAgICAgIHRyYWNrKHRhcmdldCwgXCJoYXNcIiAvKiBIQVMgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XHJcbiAgICB0cmFjayh0YXJnZXQsIFwiaXRlcmF0ZVwiIC8qIElURVJBVEUgKi8sIGlzQXJyYXkodGFyZ2V0KSA/ICdsZW5ndGgnIDogSVRFUkFURV9LRVkpO1xyXG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xyXG59XHJcbmNvbnN0IG11dGFibGVIYW5kbGVycyA9IHtcclxuICAgIGdldCxcclxuICAgIHNldCxcclxuICAgIGRlbGV0ZVByb3BlcnR5LFxyXG4gICAgaGFzLFxyXG4gICAgb3duS2V5c1xyXG59O1xyXG5jb25zdCByZWFkb25seUhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiByZWFkb25seUdldCxcclxuICAgIHNldCh0YXJnZXQsIGtleSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBTZXQgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRGVsZXRlIG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycyA9IGV4dGVuZCh7fSwgbXV0YWJsZUhhbmRsZXJzLCB7XHJcbiAgICBnZXQ6IHNoYWxsb3dHZXQsXHJcbiAgICBzZXQ6IHNoYWxsb3dTZXRcclxufSk7XHJcbi8vIFByb3BzIGhhbmRsZXJzIGFyZSBzcGVjaWFsIGluIHRoZSBzZW5zZSB0aGF0IGl0IHNob3VsZCBub3QgdW53cmFwIHRvcC1sZXZlbFxyXG4vLyByZWZzIChpbiBvcmRlciB0byBhbGxvdyByZWZzIHRvIGJlIGV4cGxpY2l0bHkgcGFzc2VkIGRvd24pLCBidXQgc2hvdWxkXHJcbi8vIHJldGFpbiB0aGUgcmVhY3Rpdml0eSBvZiB0aGUgbm9ybWFsIHJlYWRvbmx5IG9iamVjdC5cclxuY29uc3Qgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMgPSBleHRlbmQoe30sIHJlYWRvbmx5SGFuZGxlcnMsIHtcclxuICAgIGdldDogc2hhbGxvd1JlYWRvbmx5R2V0XHJcbn0pO1xuXG5jb25zdCB0b1JlYWN0aXZlID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFjdGl2ZSh2YWx1ZSkgOiB2YWx1ZTtcclxuY29uc3QgdG9SZWFkb25seSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhZG9ubHkodmFsdWUpIDogdmFsdWU7XHJcbmNvbnN0IHRvU2hhbGxvdyA9ICh2YWx1ZSkgPT4gdmFsdWU7XHJcbmNvbnN0IGdldFByb3RvID0gKHYpID0+IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yodik7XHJcbmZ1bmN0aW9uIGdldCQxKHRhcmdldCwga2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UsIGlzU2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICAvLyAjMTc3MjogcmVhZG9ubHkocmVhY3RpdmUoTWFwKSkgc2hvdWxkIHJldHVybiByZWFkb25seSArIHJlYWN0aXZlIHZlcnNpb25cclxuICAgIC8vIG9mIHRoZSB2YWx1ZVxyXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJnZXRcIiAvKiBHRVQgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCByYXdLZXkpO1xyXG4gICAgY29uc3QgeyBoYXMgfSA9IGdldFByb3RvKHJhd1RhcmdldCk7XHJcbiAgICBjb25zdCB3cmFwID0gaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiB0b1JlYWN0aXZlO1xyXG4gICAgaWYgKGhhcy5jYWxsKHJhd1RhcmdldCwga2V5KSkge1xyXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIHJhd0tleSkpIHtcclxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KHJhd0tleSkpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhcyQxKGtleSwgaXNSZWFkb25seSA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiAvKiBIQVMgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaGFzXCIgLyogSEFTICovLCByYXdLZXkpO1xyXG4gICAgcmV0dXJuIGtleSA9PT0gcmF3S2V5XHJcbiAgICAgICAgPyB0YXJnZXQuaGFzKGtleSlcclxuICAgICAgICA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XHJcbn1cclxuZnVuY3Rpb24gc2l6ZSh0YXJnZXQsIGlzUmVhZG9ubHkgPSBmYWxzZSkge1xyXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayh0b1Jhdyh0YXJnZXQpLCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XHJcbiAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCAnc2l6ZScsIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkKHZhbHVlKSB7XHJcbiAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xyXG4gICAgY29uc3QgcHJvdG8gPSBnZXRQcm90byh0YXJnZXQpO1xyXG4gICAgY29uc3QgaGFkS2V5ID0gcHJvdG8uaGFzLmNhbGwodGFyZ2V0LCB2YWx1ZSk7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuYWRkKHZhbHVlKTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCB2YWx1ZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBzZXQkMShrZXksIHZhbHVlKSB7XHJcbiAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xyXG4gICAgY29uc3QgeyBoYXMsIGdldCB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcclxuICAgIGxldCBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgIGtleSA9IHRvUmF3KGtleSk7XHJcbiAgICAgICAgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9IGdldC5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRhcmdldC5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIEFERCAqLywga2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiAvKiBTRVQgKi8sIGtleSwgdmFsdWUsIG9sZFZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gZGVsZXRlRW50cnkoa2V5KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XHJcbiAgICBsZXQgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQgPyBnZXQuY2FsbCh0YXJnZXQsIGtleSkgOiB1bmRlZmluZWQ7XHJcbiAgICAvLyBmb3J3YXJkIHRoZSBvcGVyYXRpb24gYmVmb3JlIHF1ZXVlaW5nIHJlYWN0aW9uc1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmRlbGV0ZShrZXkpO1xyXG4gICAgaWYgKGhhZEtleSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImRlbGV0ZVwiIC8qIERFTEVURSAqLywga2V5LCB1bmRlZmluZWQsIG9sZFZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IGhhZEl0ZW1zID0gdGFyZ2V0LnNpemUgIT09IDA7XHJcbiAgICBjb25zdCBvbGRUYXJnZXQgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICA/IGlzTWFwKHRhcmdldClcclxuICAgICAgICAgICAgPyBuZXcgTWFwKHRhcmdldClcclxuICAgICAgICAgICAgOiBuZXcgU2V0KHRhcmdldClcclxuICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIC8vIGZvcndhcmQgdGhlIG9wZXJhdGlvbiBiZWZvcmUgcXVldWVpbmcgcmVhY3Rpb25zXHJcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuY2xlYXIoKTtcclxuICAgIGlmIChoYWRJdGVtcykge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImNsZWFyXCIgLyogQ0xFQVIgKi8sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbGRUYXJnZXQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVGb3JFYWNoKGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpIHtcclxuICAgICAgICBjb25zdCBvYnNlcnZlZCA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gb2JzZXJ2ZWRbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHdyYXAgPSBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IHRvUmVhY3RpdmU7XHJcbiAgICAgICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGltcG9ydGFudDogbWFrZSBzdXJlIHRoZSBjYWxsYmFjayBpc1xyXG4gICAgICAgICAgICAvLyAxLiBpbnZva2VkIHdpdGggdGhlIHJlYWN0aXZlIG1hcCBhcyBgdGhpc2AgYW5kIDNyZCBhcmdcclxuICAgICAgICAgICAgLy8gMi4gdGhlIHZhbHVlIHJlY2VpdmVkIHNob3VsZCBiZSBhIGNvcnJlc3BvbmRpbmcgcmVhY3RpdmUvcmVhZG9ubHkuXHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHdyYXAodmFsdWUpLCB3cmFwKGtleSksIG9ic2VydmVkKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBpc1JlYWRvbmx5LCBpc1NoYWxsb3cpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldElzTWFwID0gaXNNYXAocmF3VGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBpc1BhaXIgPSBtZXRob2QgPT09ICdlbnRyaWVzJyB8fCAobWV0aG9kID09PSBTeW1ib2wuaXRlcmF0b3IgJiYgdGFyZ2V0SXNNYXApO1xyXG4gICAgICAgIGNvbnN0IGlzS2V5T25seSA9IG1ldGhvZCA9PT0gJ2tleXMnICYmIHRhcmdldElzTWFwO1xyXG4gICAgICAgIGNvbnN0IGlubmVySXRlcmF0b3IgPSB0YXJnZXRbbWV0aG9kXSguLi5hcmdzKTtcclxuICAgICAgICBjb25zdCB3cmFwID0gaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiB0b1JlYWN0aXZlO1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmXHJcbiAgICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIgLyogSVRFUkFURSAqLywgaXNLZXlPbmx5ID8gTUFQX0tFWV9JVEVSQVRFX0tFWSA6IElURVJBVEVfS0VZKTtcclxuICAgICAgICAvLyByZXR1cm4gYSB3cmFwcGVkIGl0ZXJhdG9yIHdoaWNoIHJldHVybnMgb2JzZXJ2ZWQgdmVyc2lvbnMgb2YgdGhlXHJcbiAgICAgICAgLy8gdmFsdWVzIGVtaXR0ZWQgZnJvbSB0aGUgcmVhbCBpdGVyYXRvclxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC8vIGl0ZXJhdG9yIHByb3RvY29sXHJcbiAgICAgICAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpbm5lckl0ZXJhdG9yLm5leHQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlLCBkb25lIH1cclxuICAgICAgICAgICAgICAgICAgICA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlzUGFpciA/IFt3cmFwKHZhbHVlWzBdKSwgd3JhcCh2YWx1ZVsxXSldIDogd3JhcCh2YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxyXG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVhZG9ubHlNZXRob2QodHlwZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBhcmdzWzBdID8gYG9uIGtleSBcIiR7YXJnc1swXX1cIiBgIDogYGA7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtjYXBpdGFsaXplKHR5cGUpfSBvcGVyYXRpb24gJHtrZXl9ZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdG9SYXcodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gXCJkZWxldGVcIiAvKiBERUxFVEUgKi8gPyBmYWxzZSA6IHRoaXM7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IG11dGFibGVJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgZ2V0KGtleSkge1xyXG4gICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXkpO1xyXG4gICAgfSxcclxuICAgIGdldCBzaXplKCkge1xyXG4gICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xyXG4gICAgfSxcclxuICAgIGhhczogaGFzJDEsXHJcbiAgICBhZGQsXHJcbiAgICBzZXQ6IHNldCQxLFxyXG4gICAgZGVsZXRlOiBkZWxldGVFbnRyeSxcclxuICAgIGNsZWFyLFxyXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaChmYWxzZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgZ2V0KGtleSkge1xyXG4gICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIGZhbHNlLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gc2l6ZSh0aGlzKTtcclxuICAgIH0sXHJcbiAgICBoYXM6IGhhcyQxLFxyXG4gICAgYWRkLFxyXG4gICAgc2V0OiBzZXQkMSxcclxuICAgIGRlbGV0ZTogZGVsZXRlRW50cnksXHJcbiAgICBjbGVhcixcclxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIHRydWUpXHJcbn07XHJcbmNvbnN0IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyA9IHtcclxuICAgIGdldChrZXkpIHtcclxuICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBoYXMoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGhhcyQxLmNhbGwodGhpcywga2V5LCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogQUREICovKSxcclxuICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiAvKiBTRVQgKi8pLFxyXG4gICAgZGVsZXRlOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImRlbGV0ZVwiIC8qIERFTEVURSAqLyksXHJcbiAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIENMRUFSICovKSxcclxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2godHJ1ZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IGl0ZXJhdG9yTWV0aG9kcyA9IFsna2V5cycsICd2YWx1ZXMnLCAnZW50cmllcycsIFN5bWJvbC5pdGVyYXRvcl07XHJcbml0ZXJhdG9yTWV0aG9kcy5mb3JFYWNoKG1ldGhvZCA9PiB7XHJcbiAgICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIHRydWUsIGZhbHNlKTtcclxuICAgIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGZhbHNlLCB0cnVlKTtcclxufSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihpc1JlYWRvbmx5LCBzaGFsbG93KSB7XHJcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0gc2hhbGxvd1xyXG4gICAgICAgID8gc2hhbGxvd0luc3RydW1lbnRhdGlvbnNcclxuICAgICAgICA6IGlzUmVhZG9ubHlcclxuICAgICAgICAgICAgPyByZWFkb25seUluc3RydW1lbnRhdGlvbnNcclxuICAgICAgICAgICAgOiBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucztcclxuICAgIHJldHVybiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhaXNSZWFkb25seTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogSVNfUkVBRE9OTFkgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUkFXICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBSZWZsZWN0LmdldChoYXNPd24oaW5zdHJ1bWVudGF0aW9ucywga2V5KSAmJiBrZXkgaW4gdGFyZ2V0XHJcbiAgICAgICAgICAgID8gaW5zdHJ1bWVudGF0aW9uc1xyXG4gICAgICAgICAgICA6IHRhcmdldCwga2V5LCByZWNlaXZlcik7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IG11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgdHJ1ZSlcclxufTtcclxuY29uc3QgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCBmYWxzZSlcclxufTtcclxuZnVuY3Rpb24gY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSkge1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChyYXdLZXkgIT09IGtleSAmJiBoYXMuY2FsbCh0YXJnZXQsIHJhd0tleSkpIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gdG9SYXdUeXBlKHRhcmdldCk7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBSZWFjdGl2ZSAke3R5cGV9IGNvbnRhaW5zIGJvdGggdGhlIHJhdyBhbmQgcmVhY3RpdmUgYCArXHJcbiAgICAgICAgICAgIGB2ZXJzaW9ucyBvZiB0aGUgc2FtZSBvYmplY3Qke3R5cGUgPT09IGBNYXBgID8gYCBhcyBrZXlzYCA6IGBgfSwgYCArXHJcbiAgICAgICAgICAgIGB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIGAgK1xyXG4gICAgICAgICAgICBgQXZvaWQgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gdGhlIHJhdyBhbmQgcmVhY3RpdmUgdmVyc2lvbnMgYCArXHJcbiAgICAgICAgICAgIGBvZiBhbiBvYmplY3QgYW5kIG9ubHkgdXNlIHRoZSByZWFjdGl2ZSB2ZXJzaW9uIGlmIHBvc3NpYmxlLmApO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IHJlYWN0aXZlTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgcmVhZG9ubHlNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5mdW5jdGlvbiB0YXJnZXRUeXBlTWFwKHJhd1R5cGUpIHtcclxuICAgIHN3aXRjaCAocmF3VHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ09iamVjdCc6XHJcbiAgICAgICAgY2FzZSAnQXJyYXknOlxyXG4gICAgICAgICAgICByZXR1cm4gMSAvKiBDT01NT04gKi87XHJcbiAgICAgICAgY2FzZSAnTWFwJzpcclxuICAgICAgICBjYXNlICdTZXQnOlxyXG4gICAgICAgIGNhc2UgJ1dlYWtNYXAnOlxyXG4gICAgICAgIGNhc2UgJ1dlYWtTZXQnOlxyXG4gICAgICAgICAgICByZXR1cm4gMiAvKiBDT0xMRUNUSU9OICovO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiAwIC8qIElOVkFMSUQgKi87XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0VHlwZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlW1wiX192X3NraXBcIiAvKiBTS0lQICovXSB8fCAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSlcclxuICAgICAgICA/IDAgLyogSU5WQUxJRCAqL1xyXG4gICAgICAgIDogdGFyZ2V0VHlwZU1hcCh0b1Jhd1R5cGUodmFsdWUpKTtcclxufVxyXG5mdW5jdGlvbiByZWFjdGl2ZSh0YXJnZXQpIHtcclxuICAgIC8vIGlmIHRyeWluZyB0byBvYnNlcnZlIGEgcmVhZG9ubHkgcHJveHksIHJldHVybiB0aGUgcmVhZG9ubHkgdmVyc2lvbi5cclxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0W1wiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqL10pIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIG11dGFibGVIYW5kbGVycywgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyk7XHJcbn1cclxuLy8gUmV0dXJuIGEgcmVhY3RpdmUtY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290IGxldmVsXHJcbi8vIHByb3BlcnRpZXMgYXJlIHJlYWN0aXZlLCBhbmQgZG9lcyBOT1QgdW53cmFwIHJlZnMgbm9yIHJlY3Vyc2l2ZWx5IGNvbnZlcnRcclxuLy8gcmV0dXJuZWQgcHJvcGVydGllcy5cclxuZnVuY3Rpb24gc2hhbGxvd1JlYWN0aXZlKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIHNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzLCBzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzKTtcclxufVxyXG5mdW5jdGlvbiByZWFkb25seSh0YXJnZXQpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIHRydWUsIHJlYWRvbmx5SGFuZGxlcnMsIHJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzKTtcclxufVxyXG4vLyBSZXR1cm4gYSByZWFjdGl2ZS1jb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QsIHdoZXJlIG9ubHkgdGhlIHJvb3QgbGV2ZWxcclxuLy8gcHJvcGVydGllcyBhcmUgcmVhZG9ubHksIGFuZCBkb2VzIE5PVCB1bndyYXAgcmVmcyBub3IgcmVjdXJzaXZlbHkgY29udmVydFxyXG4vLyByZXR1cm5lZCBwcm9wZXJ0aWVzLlxyXG4vLyBUaGlzIGlzIHVzZWQgZm9yIGNyZWF0aW5nIHRoZSBwcm9wcyBwcm94eSBvYmplY3QgZm9yIHN0YXRlZnVsIGNvbXBvbmVudHMuXHJcbmZ1bmN0aW9uIHNoYWxsb3dSZWFkb25seSh0YXJnZXQpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIHRydWUsIHNoYWxsb3dSZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBpc1JlYWRvbmx5LCBiYXNlSGFuZGxlcnMsIGNvbGxlY3Rpb25IYW5kbGVycykge1xyXG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYHZhbHVlIGNhbm5vdCBiZSBtYWRlIHJlYWN0aXZlOiAke1N0cmluZyh0YXJnZXQpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLy8gdGFyZ2V0IGlzIGFscmVhZHkgYSBQcm94eSwgcmV0dXJuIGl0LlxyXG4gICAgLy8gZXhjZXB0aW9uOiBjYWxsaW5nIHJlYWRvbmx5KCkgb24gYSByZWFjdGl2ZSBvYmplY3RcclxuICAgIGlmICh0YXJnZXRbXCJfX3ZfcmF3XCIgLyogUkFXICovXSAmJlxyXG4gICAgICAgICEoaXNSZWFkb25seSAmJiB0YXJnZXRbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovXSkpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLy8gdGFyZ2V0IGFscmVhZHkgaGFzIGNvcnJlc3BvbmRpbmcgUHJveHlcclxuICAgIGNvbnN0IHByb3h5TWFwID0gaXNSZWFkb25seSA/IHJlYWRvbmx5TWFwIDogcmVhY3RpdmVNYXA7XHJcbiAgICBjb25zdCBleGlzdGluZ1Byb3h5ID0gcHJveHlNYXAuZ2V0KHRhcmdldCk7XHJcbiAgICBpZiAoZXhpc3RpbmdQcm94eSkge1xyXG4gICAgICAgIHJldHVybiBleGlzdGluZ1Byb3h5O1xyXG4gICAgfVxyXG4gICAgLy8gb25seSBhIHdoaXRlbGlzdCBvZiB2YWx1ZSB0eXBlcyBjYW4gYmUgb2JzZXJ2ZWQuXHJcbiAgICBjb25zdCB0YXJnZXRUeXBlID0gZ2V0VGFyZ2V0VHlwZSh0YXJnZXQpO1xyXG4gICAgaWYgKHRhcmdldFR5cGUgPT09IDAgLyogSU5WQUxJRCAqLykge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eSh0YXJnZXQsIHRhcmdldFR5cGUgPT09IDIgLyogQ09MTEVDVElPTiAqLyA/IGNvbGxlY3Rpb25IYW5kbGVycyA6IGJhc2VIYW5kbGVycyk7XHJcbiAgICBwcm94eU1hcC5zZXQodGFyZ2V0LCBwcm94eSk7XHJcbiAgICByZXR1cm4gcHJveHk7XHJcbn1cclxuZnVuY3Rpb24gaXNSZWFjdGl2ZSh2YWx1ZSkge1xyXG4gICAgaWYgKGlzUmVhZG9ubHkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUmVhY3RpdmUodmFsdWVbXCJfX3ZfcmF3XCIgLyogUkFXICovXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovXSk7XHJcbn1cclxuZnVuY3Rpb24gaXNSZWFkb25seSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqL10pO1xyXG59XHJcbmZ1bmN0aW9uIGlzUHJveHkodmFsdWUpIHtcclxuICAgIHJldHVybiBpc1JlYWN0aXZlKHZhbHVlKSB8fCBpc1JlYWRvbmx5KHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiB0b1JhdyhvYnNlcnZlZCkge1xyXG4gICAgcmV0dXJuICgob2JzZXJ2ZWQgJiYgdG9SYXcob2JzZXJ2ZWRbXCJfX3ZfcmF3XCIgLyogUkFXICovXSkpIHx8IG9ic2VydmVkKTtcclxufVxyXG5mdW5jdGlvbiBtYXJrUmF3KHZhbHVlKSB7XHJcbiAgICBkZWYodmFsdWUsIFwiX192X3NraXBcIiAvKiBTS0lQICovLCB0cnVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxuXG5jb25zdCBjb252ZXJ0ID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSA/IHJlYWN0aXZlKHZhbCkgOiB2YWw7XHJcbmZ1bmN0aW9uIGlzUmVmKHIpIHtcclxuICAgIHJldHVybiBCb29sZWFuKHIgJiYgci5fX3ZfaXNSZWYgPT09IHRydWUpO1xyXG59XHJcbmZ1bmN0aW9uIHJlZih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gc2hhbGxvd1JlZih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSwgdHJ1ZSk7XHJcbn1cclxuY2xhc3MgUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihfcmF3VmFsdWUsIF9zaGFsbG93ID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLl9yYXdWYWx1ZSA9IF9yYXdWYWx1ZTtcclxuICAgICAgICB0aGlzLl9zaGFsbG93ID0gX3NoYWxsb3c7XHJcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gX3NoYWxsb3cgPyBfcmF3VmFsdWUgOiBjb252ZXJ0KF9yYXdWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgdHJhY2sodG9SYXcodGhpcyksIFwiZ2V0XCIgLyogR0VUICovLCAndmFsdWUnKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgaWYgKGhhc0NoYW5nZWQodG9SYXcobmV3VmFsKSwgdGhpcy5fcmF3VmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jhd1ZhbHVlID0gbmV3VmFsO1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX3NoYWxsb3cgPyBuZXdWYWwgOiBjb252ZXJ0KG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIHRyaWdnZXIodG9SYXcodGhpcyksIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnLCBuZXdWYWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWYocmF3VmFsdWUsIHNoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgaWYgKGlzUmVmKHJhd1ZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUmVmSW1wbChyYXdWYWx1ZSwgc2hhbGxvdyk7XHJcbn1cclxuZnVuY3Rpb24gdHJpZ2dlclJlZihyZWYpIHtcclxuICAgIHRyaWdnZXIodG9SYXcocmVmKSwgXCJzZXRcIiAvKiBTRVQgKi8sICd2YWx1ZScsIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHJlZi52YWx1ZSA6IHZvaWQgMCk7XHJcbn1cclxuZnVuY3Rpb24gdW5yZWYocmVmKSB7XHJcbiAgICByZXR1cm4gaXNSZWYocmVmKSA/IHJlZi52YWx1ZSA6IHJlZjtcclxufVxyXG5jb25zdCBzaGFsbG93VW53cmFwSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6ICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IHVucmVmKFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikpLFxyXG4gICAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XHJcbiAgICAgICAgaWYgKGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIG9sZFZhbHVlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gcHJveHlSZWZzKG9iamVjdFdpdGhSZWZzKSB7XHJcbiAgICByZXR1cm4gaXNSZWFjdGl2ZShvYmplY3RXaXRoUmVmcylcclxuICAgICAgICA/IG9iamVjdFdpdGhSZWZzXHJcbiAgICAgICAgOiBuZXcgUHJveHkob2JqZWN0V2l0aFJlZnMsIHNoYWxsb3dVbndyYXBIYW5kbGVycyk7XHJcbn1cclxuY2xhc3MgQ3VzdG9tUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihmYWN0b3J5KSB7XHJcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IHsgZ2V0LCBzZXQgfSA9IGZhY3RvcnkoKCkgPT4gdHJhY2sodGhpcywgXCJnZXRcIiAvKiBHRVQgKi8sICd2YWx1ZScpLCAoKSA9PiB0cmlnZ2VyKHRoaXMsIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnKSk7XHJcbiAgICAgICAgdGhpcy5fZ2V0ID0gZ2V0O1xyXG4gICAgICAgIHRoaXMuX3NldCA9IHNldDtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KCk7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0KG5ld1ZhbCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3VzdG9tUmVmKGZhY3RvcnkpIHtcclxuICAgIHJldHVybiBuZXcgQ3VzdG9tUmVmSW1wbChmYWN0b3J5KTtcclxufVxyXG5mdW5jdGlvbiB0b1JlZnMob2JqZWN0KSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1Byb3h5KG9iamVjdCkpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oYHRvUmVmcygpIGV4cGVjdHMgYSByZWFjdGl2ZSBvYmplY3QgYnV0IHJlY2VpdmVkIGEgcGxhaW4gb25lLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmV0ID0gaXNBcnJheShvYmplY3QpID8gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpIDoge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcclxuICAgICAgICByZXRba2V5XSA9IHRvUmVmKG9iamVjdCwga2V5KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuY2xhc3MgT2JqZWN0UmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfb2JqZWN0LCBfa2V5KSB7XHJcbiAgICAgICAgdGhpcy5fb2JqZWN0ID0gX29iamVjdDtcclxuICAgICAgICB0aGlzLl9rZXkgPSBfa2V5O1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb2JqZWN0W3RoaXMuX2tleV07XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgdGhpcy5fb2JqZWN0W3RoaXMuX2tleV0gPSBuZXdWYWw7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdG9SZWYob2JqZWN0LCBrZXkpIHtcclxuICAgIHJldHVybiBpc1JlZihvYmplY3Rba2V5XSlcclxuICAgICAgICA/IG9iamVjdFtrZXldXHJcbiAgICAgICAgOiBuZXcgT2JqZWN0UmVmSW1wbChvYmplY3QsIGtleSk7XHJcbn1cblxuY2xhc3MgQ29tcHV0ZWRSZWZJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGdldHRlciwgX3NldHRlciwgaXNSZWFkb25seSkge1xyXG4gICAgICAgIHRoaXMuX3NldHRlciA9IF9zZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVmZmVjdCA9IGVmZmVjdChnZXR0ZXIsIHtcclxuICAgICAgICAgICAgbGF6eTogdHJ1ZSxcclxuICAgICAgICAgICAgc2NoZWR1bGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2RpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodG9SYXcodGhpcyksIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXNbXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovXSA9IGlzUmVhZG9ubHk7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5lZmZlY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJhY2sodG9SYXcodGhpcyksIFwiZ2V0XCIgLyogR0VUICovLCAndmFsdWUnKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9zZXR0ZXIobmV3VmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNvbXB1dGVkKGdldHRlck9yT3B0aW9ucykge1xyXG4gICAgbGV0IGdldHRlcjtcclxuICAgIGxldCBzZXR0ZXI7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihnZXR0ZXJPck9wdGlvbnMpKSB7XHJcbiAgICAgICAgZ2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zO1xyXG4gICAgICAgIHNldHRlciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICA/ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgdmFsdWUgaXMgcmVhZG9ubHknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IE5PT1A7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuZ2V0O1xyXG4gICAgICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IENvbXB1dGVkUmVmSW1wbChnZXR0ZXIsIHNldHRlciwgaXNGdW5jdGlvbihnZXR0ZXJPck9wdGlvbnMpIHx8ICFnZXR0ZXJPck9wdGlvbnMuc2V0KTtcclxufVxuXG5leHBvcnQgeyBJVEVSQVRFX0tFWSwgY29tcHV0ZWQsIGN1c3RvbVJlZiwgZWZmZWN0LCBlbmFibGVUcmFja2luZywgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIG1hcmtSYXcsIHBhdXNlVHJhY2tpbmcsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHJlc2V0VHJhY2tpbmcsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzdG9wLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJhY2ssIHRyaWdnZXIsIHRyaWdnZXJSZWYsIHVucmVmIH07XG4iLCJpbXBvcnQgeyBwYXVzZVRyYWNraW5nLCByZXNldFRyYWNraW5nLCBpc1JlZiwgdG9SYXcsIHNoYWxsb3dSZWFjdGl2ZSwgdHJpZ2dlciwgaXNSZWFjdGl2ZSwgZWZmZWN0LCBzdG9wLCBpc1Byb3h5LCByZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCB0cmFjaywgcHJveHlSZWZzLCBjb21wdXRlZCBhcyBjb21wdXRlZCQxLCByZWYsIGlzUmVhZG9ubHkgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuZXhwb3J0IHsgY3VzdG9tUmVmLCBpc1Byb3h5LCBpc1JlYWN0aXZlLCBpc1JlYWRvbmx5LCBpc1JlZiwgbWFya1JhdywgcHJveHlSZWZzLCByZWFjdGl2ZSwgcmVhZG9ubHksIHJlZiwgc2hhbGxvd1JlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHNoYWxsb3dSZWYsIHRvUmF3LCB0b1JlZiwgdG9SZWZzLCB0cmlnZ2VyUmVmLCB1bnJlZiB9IGZyb20gJ0B2dWUvcmVhY3Rpdml0eSc7XG5pbXBvcnQgeyBpc1N0cmluZywgaXNGdW5jdGlvbiwgaXNQcm9taXNlLCBpc0FycmF5LCBleHRlbmQsIEVNUFRZX09CSiwgdG9IYW5kbGVyS2V5LCB0b051bWJlciwgaHlwaGVuYXRlLCBjYW1lbGl6ZSwgaXNPbiwgaGFzT3duLCBpc01vZGVsTGlzdGVuZXIsIGRlZiwgaXNSZXNlcnZlZFByb3AsIEVNUFRZX0FSUiwgaXNPYmplY3QsIGNhcGl0YWxpemUsIHRvUmF3VHlwZSwgbWFrZU1hcCwgcmVtb3ZlLCBOT09QLCBoYXNDaGFuZ2VkLCBpc1NldCwgaXNNYXAsIGludm9rZUFycmF5Rm5zLCBOTywgZ2V0R2xvYmFsVGhpcywgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVN0eWxlLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5leHBvcnQgeyBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXkgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN0YWNrID0gW107XHJcbmZ1bmN0aW9uIHB1c2hXYXJuaW5nQ29udGV4dCh2bm9kZSkge1xyXG4gICAgc3RhY2sucHVzaCh2bm9kZSk7XHJcbn1cclxuZnVuY3Rpb24gcG9wV2FybmluZ0NvbnRleHQoKSB7XHJcbiAgICBzdGFjay5wb3AoKTtcclxufVxyXG5mdW5jdGlvbiB3YXJuKG1zZywgLi4uYXJncykge1xyXG4gICAgLy8gYXZvaWQgcHJvcHMgZm9ybWF0dGluZyBvciB3YXJuIGhhbmRsZXIgdHJhY2tpbmcgZGVwcyB0aGF0IG1pZ2h0IGJlIG11dGF0ZWRcclxuICAgIC8vIGR1cmluZyBwYXRjaCwgbGVhZGluZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXHJcbiAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IHN0YWNrLmxlbmd0aCA/IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLmNvbXBvbmVudCA6IG51bGw7XHJcbiAgICBjb25zdCBhcHBXYXJuSGFuZGxlciA9IGluc3RhbmNlICYmIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLndhcm5IYW5kbGVyO1xyXG4gICAgY29uc3QgdHJhY2UgPSBnZXRDb21wb25lbnRUcmFjZSgpO1xyXG4gICAgaWYgKGFwcFdhcm5IYW5kbGVyKSB7XHJcbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGFwcFdhcm5IYW5kbGVyLCBpbnN0YW5jZSwgMTEgLyogQVBQX1dBUk5fSEFORExFUiAqLywgW1xyXG4gICAgICAgICAgICBtc2cgKyBhcmdzLmpvaW4oJycpLFxyXG4gICAgICAgICAgICBpbnN0YW5jZSAmJiBpbnN0YW5jZS5wcm94eSxcclxuICAgICAgICAgICAgdHJhY2VcclxuICAgICAgICAgICAgICAgIC5tYXAoKHsgdm5vZGUgfSkgPT4gYGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIHZub2RlLnR5cGUpfT5gKVxyXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpLFxyXG4gICAgICAgICAgICB0cmFjZVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgd2FybkFyZ3MgPSBbYFtWdWUgd2Fybl06ICR7bXNnfWAsIC4uLmFyZ3NdO1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmICh0cmFjZS5sZW5ndGggJiZcclxuICAgICAgICAgICAgLy8gYXZvaWQgc3BhbW1pbmcgY29uc29sZSBkdXJpbmcgdGVzdHNcclxuICAgICAgICAgICAgIWZhbHNlKSB7XHJcbiAgICAgICAgICAgIHdhcm5BcmdzLnB1c2goYFxcbmAsIC4uLmZvcm1hdFRyYWNlKHRyYWNlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUud2FybiguLi53YXJuQXJncyk7XHJcbiAgICB9XHJcbiAgICByZXNldFRyYWNraW5nKCk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50VHJhY2UoKSB7XHJcbiAgICBsZXQgY3VycmVudFZOb2RlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICBpZiAoIWN1cnJlbnRWTm9kZSkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIC8vIHdlIGNhbid0IGp1c3QgdXNlIHRoZSBzdGFjayBiZWNhdXNlIGl0IHdpbGwgYmUgaW5jb21wbGV0ZSBkdXJpbmcgdXBkYXRlc1xyXG4gICAgLy8gdGhhdCBkaWQgbm90IHN0YXJ0IGZyb20gdGhlIHJvb3QuIFJlLWNvbnN0cnVjdCB0aGUgcGFyZW50IGNoYWluIHVzaW5nXHJcbiAgICAvLyBpbnN0YW5jZSBwYXJlbnQgcG9pbnRlcnMuXHJcbiAgICBjb25zdCBub3JtYWxpemVkU3RhY2sgPSBbXTtcclxuICAgIHdoaWxlIChjdXJyZW50Vk5vZGUpIHtcclxuICAgICAgICBjb25zdCBsYXN0ID0gbm9ybWFsaXplZFN0YWNrWzBdO1xyXG4gICAgICAgIGlmIChsYXN0ICYmIGxhc3Qudm5vZGUgPT09IGN1cnJlbnRWTm9kZSkge1xyXG4gICAgICAgICAgICBsYXN0LnJlY3Vyc2VDb3VudCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbm9ybWFsaXplZFN0YWNrLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdm5vZGU6IGN1cnJlbnRWTm9kZSxcclxuICAgICAgICAgICAgICAgIHJlY3Vyc2VDb3VudDogMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyZW50SW5zdGFuY2UgPSBjdXJyZW50Vk5vZGUuY29tcG9uZW50ICYmIGN1cnJlbnRWTm9kZS5jb21wb25lbnQucGFyZW50O1xyXG4gICAgICAgIGN1cnJlbnRWTm9kZSA9IHBhcmVudEluc3RhbmNlICYmIHBhcmVudEluc3RhbmNlLnZub2RlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRTdGFjaztcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBmb3JtYXRUcmFjZSh0cmFjZSkge1xyXG4gICAgY29uc3QgbG9ncyA9IFtdO1xyXG4gICAgdHJhY2UuZm9yRWFjaCgoZW50cnksIGkpID0+IHtcclxuICAgICAgICBsb2dzLnB1c2goLi4uKGkgPT09IDAgPyBbXSA6IFtgXFxuYF0pLCAuLi5mb3JtYXRUcmFjZUVudHJ5KGVudHJ5KSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBsb2dzO1xyXG59XHJcbmZ1bmN0aW9uIGZvcm1hdFRyYWNlRW50cnkoeyB2bm9kZSwgcmVjdXJzZUNvdW50IH0pIHtcclxuICAgIGNvbnN0IHBvc3RmaXggPSByZWN1cnNlQ291bnQgPiAwID8gYC4uLiAoJHtyZWN1cnNlQ291bnR9IHJlY3Vyc2l2ZSBjYWxscylgIDogYGA7XHJcbiAgICBjb25zdCBpc1Jvb3QgPSB2bm9kZS5jb21wb25lbnQgPyB2bm9kZS5jb21wb25lbnQucGFyZW50ID09IG51bGwgOiBmYWxzZTtcclxuICAgIGNvbnN0IG9wZW4gPSBgIGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUodm5vZGUuY29tcG9uZW50LCB2bm9kZS50eXBlLCBpc1Jvb3QpfWA7XHJcbiAgICBjb25zdCBjbG9zZSA9IGA+YCArIHBvc3RmaXg7XHJcbiAgICByZXR1cm4gdm5vZGUucHJvcHNcclxuICAgICAgICA/IFtvcGVuLCAuLi5mb3JtYXRQcm9wcyh2bm9kZS5wcm9wcyksIGNsb3NlXVxyXG4gICAgICAgIDogW29wZW4gKyBjbG9zZV07XHJcbn1cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gZm9ybWF0UHJvcHMocHJvcHMpIHtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcclxuICAgIGtleXMuc2xpY2UoMCwgMykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIHJlcy5wdXNoKC4uLmZvcm1hdFByb3Aoa2V5LCBwcm9wc1trZXldKSk7XHJcbiAgICB9KTtcclxuICAgIGlmIChrZXlzLmxlbmd0aCA+IDMpIHtcclxuICAgICAgICByZXMucHVzaChgIC4uLmApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBmb3JtYXRQcm9wKGtleSwgdmFsdWUsIHJhdykge1xyXG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHxcclxuICAgICAgICB2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09JHt2YWx1ZX1gXTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgIHZhbHVlID0gZm9ybWF0UHJvcChrZXksIHRvUmF3KHZhbHVlLnZhbHVlKSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09UmVmPGAsIHZhbHVlLCBgPmBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gW2Ake2tleX09Zm4ke3ZhbHVlLm5hbWUgPyBgPCR7dmFsdWUubmFtZX0+YCA6IGBgfWBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09YCwgdmFsdWVdO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MgPSB7XHJcbiAgICBbXCJiY1wiIC8qIEJFRk9SRV9DUkVBVEUgKi9dOiAnYmVmb3JlQ3JlYXRlIGhvb2snLFxyXG4gICAgW1wiY1wiIC8qIENSRUFURUQgKi9dOiAnY3JlYXRlZCBob29rJyxcclxuICAgIFtcImJtXCIgLyogQkVGT1JFX01PVU5UICovXTogJ2JlZm9yZU1vdW50IGhvb2snLFxyXG4gICAgW1wibVwiIC8qIE1PVU5URUQgKi9dOiAnbW91bnRlZCBob29rJyxcclxuICAgIFtcImJ1XCIgLyogQkVGT1JFX1VQREFURSAqL106ICdiZWZvcmVVcGRhdGUgaG9vaycsXHJcbiAgICBbXCJ1XCIgLyogVVBEQVRFRCAqL106ICd1cGRhdGVkJyxcclxuICAgIFtcImJ1bVwiIC8qIEJFRk9SRV9VTk1PVU5UICovXTogJ2JlZm9yZVVubW91bnQgaG9vaycsXHJcbiAgICBbXCJ1bVwiIC8qIFVOTU9VTlRFRCAqL106ICd1bm1vdW50ZWQgaG9vaycsXHJcbiAgICBbXCJhXCIgLyogQUNUSVZBVEVEICovXTogJ2FjdGl2YXRlZCBob29rJyxcclxuICAgIFtcImRhXCIgLyogREVBQ1RJVkFURUQgKi9dOiAnZGVhY3RpdmF0ZWQgaG9vaycsXHJcbiAgICBbXCJlY1wiIC8qIEVSUk9SX0NBUFRVUkVEICovXTogJ2Vycm9yQ2FwdHVyZWQgaG9vaycsXHJcbiAgICBbXCJydGNcIiAvKiBSRU5ERVJfVFJBQ0tFRCAqL106ICdyZW5kZXJUcmFja2VkIGhvb2snLFxyXG4gICAgW1wicnRnXCIgLyogUkVOREVSX1RSSUdHRVJFRCAqL106ICdyZW5kZXJUcmlnZ2VyZWQgaG9vaycsXHJcbiAgICBbMCAvKiBTRVRVUF9GVU5DVElPTiAqL106ICdzZXR1cCBmdW5jdGlvbicsXHJcbiAgICBbMSAvKiBSRU5ERVJfRlVOQ1RJT04gKi9dOiAncmVuZGVyIGZ1bmN0aW9uJyxcclxuICAgIFsyIC8qIFdBVENIX0dFVFRFUiAqL106ICd3YXRjaGVyIGdldHRlcicsXHJcbiAgICBbMyAvKiBXQVRDSF9DQUxMQkFDSyAqL106ICd3YXRjaGVyIGNhbGxiYWNrJyxcclxuICAgIFs0IC8qIFdBVENIX0NMRUFOVVAgKi9dOiAnd2F0Y2hlciBjbGVhbnVwIGZ1bmN0aW9uJyxcclxuICAgIFs1IC8qIE5BVElWRV9FVkVOVF9IQU5ETEVSICovXTogJ25hdGl2ZSBldmVudCBoYW5kbGVyJyxcclxuICAgIFs2IC8qIENPTVBPTkVOVF9FVkVOVF9IQU5ETEVSICovXTogJ2NvbXBvbmVudCBldmVudCBoYW5kbGVyJyxcclxuICAgIFs3IC8qIFZOT0RFX0hPT0sgKi9dOiAndm5vZGUgaG9vaycsXHJcbiAgICBbOCAvKiBESVJFQ1RJVkVfSE9PSyAqL106ICdkaXJlY3RpdmUgaG9vaycsXHJcbiAgICBbOSAvKiBUUkFOU0lUSU9OX0hPT0sgKi9dOiAndHJhbnNpdGlvbiBob29rJyxcclxuICAgIFsxMCAvKiBBUFBfRVJST1JfSEFORExFUiAqL106ICdhcHAgZXJyb3JIYW5kbGVyJyxcclxuICAgIFsxMSAvKiBBUFBfV0FSTl9IQU5ETEVSICovXTogJ2FwcCB3YXJuSGFuZGxlcicsXHJcbiAgICBbMTIgLyogRlVOQ1RJT05fUkVGICovXTogJ3JlZiBmdW5jdGlvbicsXHJcbiAgICBbMTMgLyogQVNZTkNfQ09NUE9ORU5UX0xPQURFUiAqL106ICdhc3luYyBjb21wb25lbnQgbG9hZGVyJyxcclxuICAgIFsxNCAvKiBTQ0hFRFVMRVIgKi9dOiAnc2NoZWR1bGVyIGZsdXNoLiBUaGlzIGlzIGxpa2VseSBhIFZ1ZSBpbnRlcm5hbHMgYnVnLiAnICtcclxuICAgICAgICAnUGxlYXNlIG9wZW4gYW4gaXNzdWUgYXQgaHR0cHM6Ly9uZXctaXNzdWUudnVlanMub3JnLz9yZXBvPXZ1ZWpzL3Z1ZS1uZXh0J1xyXG59O1xyXG5mdW5jdGlvbiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXMgPSBhcmdzID8gZm4oLi4uYXJncykgOiBmbigpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5mdW5jdGlvbiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpO1xyXG4gICAgICAgIGlmIChyZXMgJiYgaXNQcm9taXNlKHJlcykpIHtcclxuICAgICAgICAgICAgcmVzLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YWx1ZXMucHVzaChjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhmbltpXSwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZXM7XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSwgdGhyb3dJbkRldiA9IHRydWUpIHtcclxuICAgIGNvbnN0IGNvbnRleHRWTm9kZSA9IGluc3RhbmNlID8gaW5zdGFuY2Uudm5vZGUgOiBudWxsO1xyXG4gICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgbGV0IGN1ciA9IGluc3RhbmNlLnBhcmVudDtcclxuICAgICAgICAvLyB0aGUgZXhwb3NlZCBpbnN0YW5jZSBpcyB0aGUgcmVuZGVyIHByb3h5IHRvIGtlZXAgaXQgY29uc2lzdGVudCB3aXRoIDIueFxyXG4gICAgICAgIGNvbnN0IGV4cG9zZWRJbnN0YW5jZSA9IGluc3RhbmNlLnByb3h5O1xyXG4gICAgICAgIC8vIGluIHByb2R1Y3Rpb24gdGhlIGhvb2sgcmVjZWl2ZXMgb25seSB0aGUgZXJyb3IgY29kZVxyXG4gICAgICAgIGNvbnN0IGVycm9ySW5mbyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IEVycm9yVHlwZVN0cmluZ3NbdHlwZV0gOiB0eXBlO1xyXG4gICAgICAgIHdoaWxlIChjdXIpIHtcclxuICAgICAgICAgICAgY29uc3QgZXJyb3JDYXB0dXJlZEhvb2tzID0gY3VyLmVjO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVycm9yQ2FwdHVyZWRIb29rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNhcHR1cmVkSG9va3NbaV0oZXJyLCBleHBvc2VkSW5zdGFuY2UsIGVycm9ySW5mbykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VyID0gY3VyLnBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYXBwLWxldmVsIGhhbmRsaW5nXHJcbiAgICAgICAgY29uc3QgYXBwRXJyb3JIYW5kbGVyID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcuZXJyb3JIYW5kbGVyO1xyXG4gICAgICAgIGlmIChhcHBFcnJvckhhbmRsZXIpIHtcclxuICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGFwcEVycm9ySGFuZGxlciwgbnVsbCwgMTAgLyogQVBQX0VSUk9SX0hBTkRMRVIgKi8sIFtlcnIsIGV4cG9zZWRJbnN0YW5jZSwgZXJyb3JJbmZvXSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsb2dFcnJvcihlcnIsIHR5cGUsIGNvbnRleHRWTm9kZSwgdGhyb3dJbkRldik7XHJcbn1cclxuZnVuY3Rpb24gbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYgPSB0cnVlKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgaW5mbyA9IEVycm9yVHlwZVN0cmluZ3NbdHlwZV07XHJcbiAgICAgICAgaWYgKGNvbnRleHRWTm9kZSkge1xyXG4gICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQoY29udGV4dFZOb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2FybihgVW5oYW5kbGVkIGVycm9yJHtpbmZvID8gYCBkdXJpbmcgZXhlY3V0aW9uIG9mICR7aW5mb31gIDogYGB9YCk7XHJcbiAgICAgICAgaWYgKGNvbnRleHRWTm9kZSkge1xyXG4gICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjcmFzaCBpbiBkZXYgYnkgZGVmYXVsdCBzbyBpdCdzIG1vcmUgbm90aWNlYWJsZVxyXG4gICAgICAgIGlmICh0aHJvd0luRGV2KSB7XHJcbiAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyByZWNvdmVyIGluIHByb2QgdG8gcmVkdWNlIHRoZSBpbXBhY3Qgb24gZW5kLXVzZXJcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9XHJcbn1cblxubGV0IGlzRmx1c2hpbmcgPSBmYWxzZTtcclxubGV0IGlzRmx1c2hQZW5kaW5nID0gZmFsc2U7XHJcbmNvbnN0IHF1ZXVlID0gW107XHJcbmxldCBmbHVzaEluZGV4ID0gMDtcclxuY29uc3QgcGVuZGluZ1ByZUZsdXNoQ2JzID0gW107XHJcbmxldCBhY3RpdmVQcmVGbHVzaENicyA9IG51bGw7XHJcbmxldCBwcmVGbHVzaEluZGV4ID0gMDtcclxuY29uc3QgcGVuZGluZ1Bvc3RGbHVzaENicyA9IFtdO1xyXG5sZXQgYWN0aXZlUG9zdEZsdXNoQ2JzID0gbnVsbDtcclxubGV0IHBvc3RGbHVzaEluZGV4ID0gMDtcclxuY29uc3QgcmVzb2x2ZWRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbmxldCBjdXJyZW50Rmx1c2hQcm9taXNlID0gbnVsbDtcclxubGV0IGN1cnJlbnRQcmVGbHVzaFBhcmVudEpvYiA9IG51bGw7XHJcbmNvbnN0IFJFQ1VSU0lPTl9MSU1JVCA9IDEwMDtcclxuZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcclxuICAgIGNvbnN0IHAgPSBjdXJyZW50Rmx1c2hQcm9taXNlIHx8IHJlc29sdmVkUHJvbWlzZTtcclxuICAgIHJldHVybiBmbiA/IHAudGhlbih0aGlzID8gZm4uYmluZCh0aGlzKSA6IGZuKSA6IHA7XHJcbn1cclxuZnVuY3Rpb24gcXVldWVKb2Ioam9iKSB7XHJcbiAgICAvLyB0aGUgZGVkdXBlIHNlYXJjaCB1c2VzIHRoZSBzdGFydEluZGV4IGFyZ3VtZW50IG9mIEFycmF5LmluY2x1ZGVzKClcclxuICAgIC8vIGJ5IGRlZmF1bHQgdGhlIHNlYXJjaCBpbmRleCBpbmNsdWRlcyB0aGUgY3VycmVudCBqb2IgdGhhdCBpcyBiZWluZyBydW5cclxuICAgIC8vIHNvIGl0IGNhbm5vdCByZWN1cnNpdmVseSB0cmlnZ2VyIGl0c2VsZiBhZ2Fpbi5cclxuICAgIC8vIGlmIHRoZSBqb2IgaXMgYSB3YXRjaCgpIGNhbGxiYWNrLCB0aGUgc2VhcmNoIHdpbGwgc3RhcnQgd2l0aCBhICsxIGluZGV4IHRvXHJcbiAgICAvLyBhbGxvdyBpdCByZWN1cnNpdmVseSB0cmlnZ2VyIGl0c2VsZiAtIGl0IGlzIHRoZSB1c2VyJ3MgcmVzcG9uc2liaWxpdHkgdG9cclxuICAgIC8vIGVuc3VyZSBpdCBkb2Vzbid0IGVuZCB1cCBpbiBhbiBpbmZpbml0ZSBsb29wLlxyXG4gICAgaWYgKCghcXVldWUubGVuZ3RoIHx8XHJcbiAgICAgICAgIXF1ZXVlLmluY2x1ZGVzKGpvYiwgaXNGbHVzaGluZyAmJiBqb2IuYWxsb3dSZWN1cnNlID8gZmx1c2hJbmRleCArIDEgOiBmbHVzaEluZGV4KSkgJiZcclxuICAgICAgICBqb2IgIT09IGN1cnJlbnRQcmVGbHVzaFBhcmVudEpvYikge1xyXG4gICAgICAgIHF1ZXVlLnB1c2goam9iKTtcclxuICAgICAgICBxdWV1ZUZsdXNoKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcXVldWVGbHVzaCgpIHtcclxuICAgIGlmICghaXNGbHVzaGluZyAmJiAhaXNGbHVzaFBlbmRpbmcpIHtcclxuICAgICAgICBpc0ZsdXNoUGVuZGluZyA9IHRydWU7XHJcbiAgICAgICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IHJlc29sdmVkUHJvbWlzZS50aGVuKGZsdXNoSm9icyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaW52YWxpZGF0ZUpvYihqb2IpIHtcclxuICAgIGNvbnN0IGkgPSBxdWV1ZS5pbmRleE9mKGpvYik7XHJcbiAgICBpZiAoaSA+IC0xKSB7XHJcbiAgICAgICAgcXVldWVbaV0gPSBudWxsO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlQ2IoY2IsIGFjdGl2ZVF1ZXVlLCBwZW5kaW5nUXVldWUsIGluZGV4KSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoY2IpKSB7XHJcbiAgICAgICAgaWYgKCFhY3RpdmVRdWV1ZSB8fFxyXG4gICAgICAgICAgICAhYWN0aXZlUXVldWUuaW5jbHVkZXMoY2IsIGNiLmFsbG93UmVjdXJzZSA/IGluZGV4ICsgMSA6IGluZGV4KSkge1xyXG4gICAgICAgICAgICBwZW5kaW5nUXVldWUucHVzaChjYik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gaWYgY2IgaXMgYW4gYXJyYXksIGl0IGlzIGEgY29tcG9uZW50IGxpZmVjeWNsZSBob29rIHdoaWNoIGNhbiBvbmx5IGJlXHJcbiAgICAgICAgLy8gdHJpZ2dlcmVkIGJ5IGEgam9iLCB3aGljaCBpcyBhbHJlYWR5IGRlZHVwZWQgaW4gdGhlIG1haW4gcXVldWUsIHNvXHJcbiAgICAgICAgLy8gd2UgY2FuIHNraXAgZHVwbGljYXRlIGNoZWNrIGhlcmUgdG8gaW1wcm92ZSBwZXJmXHJcbiAgICAgICAgcGVuZGluZ1F1ZXVlLnB1c2goLi4uY2IpO1xyXG4gICAgfVxyXG4gICAgcXVldWVGbHVzaCgpO1xyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlUHJlRmx1c2hDYihjYikge1xyXG4gICAgcXVldWVDYihjYiwgYWN0aXZlUHJlRmx1c2hDYnMsIHBlbmRpbmdQcmVGbHVzaENicywgcHJlRmx1c2hJbmRleCk7XHJcbn1cclxuZnVuY3Rpb24gcXVldWVQb3N0Rmx1c2hDYihjYikge1xyXG4gICAgcXVldWVDYihjYiwgYWN0aXZlUG9zdEZsdXNoQ2JzLCBwZW5kaW5nUG9zdEZsdXNoQ2JzLCBwb3N0Rmx1c2hJbmRleCk7XHJcbn1cclxuZnVuY3Rpb24gZmx1c2hQcmVGbHVzaENicyhzZWVuLCBwYXJlbnRKb2IgPSBudWxsKSB7XHJcbiAgICBpZiAocGVuZGluZ1ByZUZsdXNoQ2JzLmxlbmd0aCkge1xyXG4gICAgICAgIGN1cnJlbnRQcmVGbHVzaFBhcmVudEpvYiA9IHBhcmVudEpvYjtcclxuICAgICAgICBhY3RpdmVQcmVGbHVzaENicyA9IFsuLi5uZXcgU2V0KHBlbmRpbmdQcmVGbHVzaENicyldO1xyXG4gICAgICAgIHBlbmRpbmdQcmVGbHVzaENicy5sZW5ndGggPSAwO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHByZUZsdXNoSW5kZXggPSAwOyBwcmVGbHVzaEluZGV4IDwgYWN0aXZlUHJlRmx1c2hDYnMubGVuZ3RoOyBwcmVGbHVzaEluZGV4KyspIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGFjdGl2ZVByZUZsdXNoQ2JzW3ByZUZsdXNoSW5kZXhdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3RpdmVQcmVGbHVzaENic1twcmVGbHVzaEluZGV4XSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY3RpdmVQcmVGbHVzaENicyA9IG51bGw7XHJcbiAgICAgICAgcHJlRmx1c2hJbmRleCA9IDA7XHJcbiAgICAgICAgY3VycmVudFByZUZsdXNoUGFyZW50Sm9iID0gbnVsbDtcclxuICAgICAgICAvLyByZWN1cnNpdmVseSBmbHVzaCB1bnRpbCBpdCBkcmFpbnNcclxuICAgICAgICBmbHVzaFByZUZsdXNoQ2JzKHNlZW4sIHBhcmVudEpvYik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbikge1xyXG4gICAgaWYgKHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgZGVkdXBlZCA9IFsuLi5uZXcgU2V0KHBlbmRpbmdQb3N0Rmx1c2hDYnMpXTtcclxuICAgICAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgLy8gIzE5NDcgYWxyZWFkeSBoYXMgYWN0aXZlIHF1ZXVlLCBuZXN0ZWQgZmx1c2hQb3N0Rmx1c2hDYnMgY2FsbFxyXG4gICAgICAgIGlmIChhY3RpdmVQb3N0Rmx1c2hDYnMpIHtcclxuICAgICAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnB1c2goLi4uZGVkdXBlZCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzID0gZGVkdXBlZDtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnNvcnQoKGEsIGIpID0+IGdldElkKGEpIC0gZ2V0SWQoYikpO1xyXG4gICAgICAgIGZvciAocG9zdEZsdXNoSW5kZXggPSAwOyBwb3N0Rmx1c2hJbmRleCA8IGFjdGl2ZVBvc3RGbHVzaENicy5sZW5ndGg7IHBvc3RGbHVzaEluZGV4KyspIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGFjdGl2ZVBvc3RGbHVzaENic1twb3N0Rmx1c2hJbmRleF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGl2ZVBvc3RGbHVzaENic1twb3N0Rmx1c2hJbmRleF0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzID0gbnVsbDtcclxuICAgICAgICBwb3N0Rmx1c2hJbmRleCA9IDA7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgZ2V0SWQgPSAoam9iKSA9PiBqb2IuaWQgPT0gbnVsbCA/IEluZmluaXR5IDogam9iLmlkO1xyXG5mdW5jdGlvbiBmbHVzaEpvYnMoc2Vlbikge1xyXG4gICAgaXNGbHVzaFBlbmRpbmcgPSBmYWxzZTtcclxuICAgIGlzRmx1c2hpbmcgPSB0cnVlO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIGZsdXNoUHJlRmx1c2hDYnMoc2Vlbik7XHJcbiAgICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cclxuICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxyXG4gICAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xyXG4gICAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkIHNvIGl0cyByZW5kZXIgZWZmZWN0IHdpbGwgaGF2ZSBzbWFsbGVyXHJcbiAgICAvLyAgICBwcmlvcml0eSBudW1iZXIpXHJcbiAgICAvLyAyLiBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHVwZGF0ZSxcclxuICAgIC8vICAgIGl0cyB1cGRhdGUgY2FuIGJlIHNraXBwZWQuXHJcbiAgICAvLyBKb2JzIGNhbiBuZXZlciBiZSBudWxsIGJlZm9yZSBmbHVzaCBzdGFydHMsIHNpbmNlIHRoZXkgYXJlIG9ubHkgaW52YWxpZGF0ZWRcclxuICAgIC8vIGR1cmluZyBleGVjdXRpb24gb2YgYW5vdGhlciBmbHVzaGVkIGpvYi5cclxuICAgIHF1ZXVlLnNvcnQoKGEsIGIpID0+IGdldElkKGEpIC0gZ2V0SWQoYikpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBmb3IgKGZsdXNoSW5kZXggPSAwOyBmbHVzaEluZGV4IDwgcXVldWUubGVuZ3RoOyBmbHVzaEluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3Qgam9iID0gcXVldWVbZmx1c2hJbmRleF07XHJcbiAgICAgICAgICAgIGlmIChqb2IpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2Vlbiwgam9iKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhqb2IsIG51bGwsIDE0IC8qIFNDSEVEVUxFUiAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICBmbHVzaEluZGV4ID0gMDtcclxuICAgICAgICBxdWV1ZS5sZW5ndGggPSAwO1xyXG4gICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKHNlZW4pO1xyXG4gICAgICAgIGlzRmx1c2hpbmcgPSBmYWxzZTtcclxuICAgICAgICBjdXJyZW50Rmx1c2hQcm9taXNlID0gbnVsbDtcclxuICAgICAgICAvLyBzb21lIHBvc3RGbHVzaENiIHF1ZXVlZCBqb2JzIVxyXG4gICAgICAgIC8vIGtlZXAgZmx1c2hpbmcgdW50aWwgaXQgZHJhaW5zLlxyXG4gICAgICAgIGlmIChxdWV1ZS5sZW5ndGggfHwgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZmx1c2hKb2JzKHNlZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgZm4pIHtcclxuICAgIGlmICghc2Vlbi5oYXMoZm4pKSB7XHJcbiAgICAgICAgc2Vlbi5zZXQoZm4sIDEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBzZWVuLmdldChmbik7XHJcbiAgICAgICAgaWYgKGNvdW50ID4gUkVDVVJTSU9OX0xJTUlUKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWF4aW11bSByZWN1cnNpdmUgdXBkYXRlcyBleGNlZWRlZC4gYCArXHJcbiAgICAgICAgICAgICAgICBgVGhpcyBtZWFucyB5b3UgaGF2ZSBhIHJlYWN0aXZlIGVmZmVjdCB0aGF0IGlzIG11dGF0aW5nIGl0cyBvd24gYCArXHJcbiAgICAgICAgICAgICAgICBgZGVwZW5kZW5jaWVzIGFuZCB0aHVzIHJlY3Vyc2l2ZWx5IHRyaWdnZXJpbmcgaXRzZWxmLiBQb3NzaWJsZSBzb3VyY2VzIGAgK1xyXG4gICAgICAgICAgICAgICAgYGluY2x1ZGUgY29tcG9uZW50IHRlbXBsYXRlLCByZW5kZXIgZnVuY3Rpb24sIHVwZGF0ZWQgaG9vayBvciBgICtcclxuICAgICAgICAgICAgICAgIGB3YXRjaGVyIHNvdXJjZSBmdW5jdGlvbi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNlZW4uc2V0KGZuLCBjb3VudCArIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxubGV0IGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcclxuY29uc3QgaG1yRGlydHlDb21wb25lbnRzID0gbmV3IFNldCgpO1xyXG4vLyBFeHBvc2UgdGhlIEhNUiBydW50aW1lIG9uIHRoZSBnbG9iYWwgb2JqZWN0XHJcbi8vIFRoaXMgbWFrZXMgaXQgZW50aXJlbHkgdHJlZS1zaGFrYWJsZSB3aXRob3V0IHBvbGx1dGluZyB0aGUgZXhwb3J0cyBhbmQgbWFrZXNcclxuLy8gaXQgZWFzaWVyIHRvIGJlIHVzZWQgaW4gdG9vbGluZ3MgbGlrZSB2dWUtbG9hZGVyXHJcbi8vIE5vdGU6IGZvciBhIGNvbXBvbmVudCB0byBiZSBlbGlnaWJsZSBmb3IgSE1SIGl0IGFsc28gbmVlZHMgdGhlIF9faG1ySWQgb3B0aW9uXHJcbi8vIHRvIGJlIHNldCBzbyB0aGF0IGl0cyBpbnN0YW5jZXMgY2FuIGJlIHJlZ2lzdGVyZWQgLyByZW1vdmVkLlxyXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICh0cnVlICkpIHtcclxuICAgIGNvbnN0IGdsb2JhbE9iamVjdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgPyBnbG9iYWxcclxuICAgICAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICA/IHNlbGZcclxuICAgICAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgPyB3aW5kb3dcclxuICAgICAgICAgICAgICAgIDoge307XHJcbiAgICBnbG9iYWxPYmplY3QuX19WVUVfSE1SX1JVTlRJTUVfXyA9IHtcclxuICAgICAgICBjcmVhdGVSZWNvcmQ6IHRyeVdyYXAoY3JlYXRlUmVjb3JkKSxcclxuICAgICAgICByZXJlbmRlcjogdHJ5V3JhcChyZXJlbmRlciksXHJcbiAgICAgICAgcmVsb2FkOiB0cnlXcmFwKHJlbG9hZClcclxuICAgIH07XHJcbn1cclxuY29uc3QgbWFwID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiByZWdpc3RlckhNUihpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgaWQgPSBpbnN0YW5jZS50eXBlLl9faG1ySWQ7XHJcbiAgICBsZXQgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZCkge1xyXG4gICAgICAgIGNyZWF0ZVJlY29yZChpZCk7XHJcbiAgICAgICAgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICB9XHJcbiAgICByZWNvcmQuYWRkKGluc3RhbmNlKTtcclxufVxyXG5mdW5jdGlvbiB1bnJlZ2lzdGVySE1SKGluc3RhbmNlKSB7XHJcbiAgICBtYXAuZ2V0KGluc3RhbmNlLnR5cGUuX19obXJJZCkuZGVsZXRlKGluc3RhbmNlKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWNvcmQoaWQpIHtcclxuICAgIGlmIChtYXAuaGFzKGlkKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIG1hcC5zZXQoaWQsIG5ldyBTZXQoKSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiByZXJlbmRlcihpZCwgbmV3UmVuZGVyKSB7XHJcbiAgICBjb25zdCByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcclxuICAgIGlmICghcmVjb3JkKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIC8vIEFycmF5LmZyb20gY3JlYXRlcyBhIHNuYXBzaG90IHdoaWNoIGF2b2lkcyB0aGUgc2V0IGJlaW5nIG11dGF0ZWQgZHVyaW5nXHJcbiAgICAvLyB1cGRhdGVzXHJcbiAgICBBcnJheS5mcm9tKHJlY29yZCkuZm9yRWFjaChpbnN0YW5jZSA9PiB7XHJcbiAgICAgICAgaWYgKG5ld1JlbmRlcikge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSBuZXdSZW5kZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlckNhY2hlID0gW107XHJcbiAgICAgICAgLy8gdGhpcyBmbGFnIGZvcmNlcyBjaGlsZCBjb21wb25lbnRzIHdpdGggc2xvdCBjb250ZW50IHRvIHVwZGF0ZVxyXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHJlbG9hZChpZCwgbmV3Q29tcCkge1xyXG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBBcnJheS5mcm9tIGNyZWF0ZXMgYSBzbmFwc2hvdCB3aGljaCBhdm9pZHMgdGhlIHNldCBiZWluZyBtdXRhdGVkIGR1cmluZ1xyXG4gICAgLy8gdXBkYXRlc1xyXG4gICAgQXJyYXkuZnJvbShyZWNvcmQpLmZvckVhY2goaW5zdGFuY2UgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbXAgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgICAgIGlmICghaG1yRGlydHlDb21wb25lbnRzLmhhcyhjb21wKSkge1xyXG4gICAgICAgICAgICAvLyAxLiBVcGRhdGUgZXhpc3RpbmcgY29tcCBkZWZpbml0aW9uIHRvIG1hdGNoIG5ldyBvbmVcclxuICAgICAgICAgICAgbmV3Q29tcCA9IGlzQ2xhc3NDb21wb25lbnQobmV3Q29tcCkgPyBuZXdDb21wLl9fdmNjT3B0cyA6IG5ld0NvbXA7XHJcbiAgICAgICAgICAgIGV4dGVuZChjb21wLCBuZXdDb21wKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY29tcCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG5ld0NvbXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvbXBba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAyLiBNYXJrIGNvbXBvbmVudCBkaXJ0eS4gVGhpcyBmb3JjZXMgdGhlIHJlbmRlcmVyIHRvIHJlcGxhY2UgdGhlIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAvLyBvbiBwYXRjaC5cclxuICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmFkZChjb21wKTtcclxuICAgICAgICAgICAgLy8gMy4gTWFrZSBzdXJlIHRvIHVubWFyayB0aGUgY29tcG9uZW50IGFmdGVyIHRoZSByZWxvYWQuXHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmRlbGV0ZShjb21wKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgLy8gNC4gRm9yY2UgdGhlIHBhcmVudCBpbnN0YW5jZSB0byByZS1yZW5kZXIuIFRoaXMgd2lsbCBjYXVzZSBhbGwgdXBkYXRlZFxyXG4gICAgICAgICAgICAvLyBjb21wb25lbnRzIHRvIGJlIHVubW91bnRlZCBhbmQgcmUtbW91bnRlZC4gUXVldWUgdGhlIHVwZGF0ZSBzbyB0aGF0IHdlXHJcbiAgICAgICAgICAgIC8vIGRvbid0IGVuZCB1cCBmb3JjaW5nIHRoZSBzYW1lIHBhcmVudCB0byByZS1yZW5kZXIgbXVsdGlwbGUgdGltZXMuXHJcbiAgICAgICAgICAgIHF1ZXVlSm9iKGluc3RhbmNlLnBhcmVudC51cGRhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCkge1xyXG4gICAgICAgICAgICAvLyByb290IGluc3RhbmNlIG1vdW50ZWQgdmlhIGNyZWF0ZUFwcCgpIGhhcyBhIHJlbG9hZCBtZXRob2RcclxuICAgICAgICAgICAgaW5zdGFuY2UuYXBwQ29udGV4dC5yZWxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgLy8gcm9vdCBpbnN0YW5jZSBpbnNpZGUgdHJlZSBjcmVhdGVkIHZpYSByYXcgcmVuZGVyKCkuIEZvcmNlIHJlbG9hZC5cclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbSE1SXSBSb290IG9yIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UgbW9kaWZpZWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLicpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHRyeVdyYXAoZm4pIHtcclxuICAgIHJldHVybiAoaWQsIGFyZykgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbihpZCwgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbSE1SXSBTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgVnVlIGNvbXBvbmVudCBob3QtcmVsb2FkLiBgICtcclxuICAgICAgICAgICAgICAgIGBGdWxsIHJlbG9hZCByZXF1aXJlZC5gKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XG5cbmxldCBkZXZ0b29scztcclxuZnVuY3Rpb24gc2V0RGV2dG9vbHNIb29rKGhvb2spIHtcclxuICAgIGRldnRvb2xzID0gaG9vaztcclxufVxyXG5mdW5jdGlvbiBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKSB7XHJcbiAgICAvLyBUT0RPIHF1ZXVlIGlmIGRldnRvb2xzIGlzIHVuZGVmaW5lZFxyXG4gICAgaWYgKCFkZXZ0b29scylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBkZXZ0b29scy5lbWl0KFwiYXBwOmluaXRcIiAvKiBBUFBfSU5JVCAqLywgYXBwLCB2ZXJzaW9uLCB7XHJcbiAgICAgICAgRnJhZ21lbnQsXHJcbiAgICAgICAgVGV4dCxcclxuICAgICAgICBDb21tZW50LFxyXG4gICAgICAgIFN0YXRpY1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZGV2dG9vbHNVbm1vdW50QXBwKGFwcCkge1xyXG4gICAgaWYgKCFkZXZ0b29scylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBkZXZ0b29scy5lbWl0KFwiYXBwOnVubW91bnRcIiAvKiBBUFBfVU5NT1VOVCAqLywgYXBwKTtcclxufVxyXG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudEFkZGVkID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6YWRkZWRcIiAvKiBDT01QT05FTlRfQURERUQgKi8pO1xyXG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDp1cGRhdGVkXCIgLyogQ09NUE9ORU5UX1VQREFURUQgKi8pO1xyXG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDpyZW1vdmVkXCIgLyogQ09NUE9ORU5UX1JFTU9WRUQgKi8pO1xyXG5mdW5jdGlvbiBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soaG9vaykge1xyXG4gICAgcmV0dXJuIChjb21wb25lbnQpID0+IHtcclxuICAgICAgICBpZiAoIWRldnRvb2xzKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgZGV2dG9vbHMuZW1pdChob29rLCBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsIGNvbXBvbmVudC51aWQsIGNvbXBvbmVudC5wYXJlbnQgPyBjb21wb25lbnQucGFyZW50LnVpZCA6IHVuZGVmaW5lZCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGRldnRvb2xzQ29tcG9uZW50RW1pdChjb21wb25lbnQsIGV2ZW50LCBwYXJhbXMpIHtcclxuICAgIGlmICghZGV2dG9vbHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZGV2dG9vbHMuZW1pdChcImNvbXBvbmVudDplbWl0XCIgLyogQ09NUE9ORU5UX0VNSVQgKi8sIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LCBldmVudCwgcGFyYW1zKTtcclxufVxuXG5mdW5jdGlvbiBlbWl0KGluc3RhbmNlLCBldmVudCwgLi4ucmF3QXJncykge1xyXG4gICAgY29uc3QgcHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcyB8fCBFTVBUWV9PQko7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgeyBlbWl0c09wdGlvbnMsIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc10gfSA9IGluc3RhbmNlO1xyXG4gICAgICAgIGlmIChlbWl0c09wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKCEoZXZlbnQgaW4gZW1pdHNPcHRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwcm9wc09wdGlvbnMgfHwgISh0b0hhbmRsZXJLZXkoZXZlbnQpIGluIHByb3BzT3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgZW1pdHRlZCBldmVudCBcIiR7ZXZlbnR9XCIgYnV0IGl0IGlzIG5laXRoZXIgZGVjbGFyZWQgaW4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGB0aGUgZW1pdHMgb3B0aW9uIG5vciBhcyBhbiBcIiR7dG9IYW5kbGVyS2V5KGV2ZW50KX1cIiBwcm9wLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gZW1pdHNPcHRpb25zW2V2ZW50XTtcclxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbGlkYXRvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdG9yKC4uLnJhd0FyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIGV2ZW50IGFyZ3VtZW50czogZXZlbnQgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGV2ZW50IFwiJHtldmVudH1cIi5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgYXJncyA9IHJhd0FyZ3M7XHJcbiAgICBjb25zdCBpc01vZGVsTGlzdGVuZXIgPSBldmVudC5zdGFydHNXaXRoKCd1cGRhdGU6Jyk7XHJcbiAgICAvLyBmb3Igdi1tb2RlbCB1cGRhdGU6eHh4IGV2ZW50cywgYXBwbHkgbW9kaWZpZXJzIG9uIGFyZ3NcclxuICAgIGNvbnN0IG1vZGVsQXJnID0gaXNNb2RlbExpc3RlbmVyICYmIGV2ZW50LnNsaWNlKDcpO1xyXG4gICAgaWYgKG1vZGVsQXJnICYmIG1vZGVsQXJnIGluIHByb3BzKSB7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZXJzS2V5ID0gYCR7bW9kZWxBcmcgPT09ICdtb2RlbFZhbHVlJyA/ICdtb2RlbCcgOiBtb2RlbEFyZ31Nb2RpZmllcnNgO1xyXG4gICAgICAgIGNvbnN0IHsgbnVtYmVyLCB0cmltIH0gPSBwcm9wc1ttb2RpZmllcnNLZXldIHx8IEVNUFRZX09CSjtcclxuICAgICAgICBpZiAodHJpbSkge1xyXG4gICAgICAgICAgICBhcmdzID0gcmF3QXJncy5tYXAoYSA9PiBhLnRyaW0oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG51bWJlcikge1xyXG4gICAgICAgICAgICBhcmdzID0gcmF3QXJncy5tYXAodG9OdW1iZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgZGV2dG9vbHNDb21wb25lbnRFbWl0KGluc3RhbmNlLCBldmVudCwgYXJncyk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgcHJvcHNbdG9IYW5kbGVyS2V5KGxvd2VyQ2FzZUV2ZW50KV0pIHtcclxuICAgICAgICAgICAgd2FybihgRXZlbnQgXCIke2xvd2VyQ2FzZUV2ZW50fVwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IGAgK1xyXG4gICAgICAgICAgICAgICAgYCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgaW5zdGFuY2UudHlwZSl9IGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcIiR7ZXZlbnR9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgYE5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIGAgK1xyXG4gICAgICAgICAgICAgICAgYHYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBgICtcclxuICAgICAgICAgICAgICAgIGBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcIiR7aHlwaGVuYXRlKGV2ZW50KX1cIiBpbnN0ZWFkIG9mIFwiJHtldmVudH1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjb252ZXJ0IGhhbmRsZXIgbmFtZSB0byBjYW1lbENhc2UuIFNlZSBpc3N1ZSAjMjI0OVxyXG4gICAgbGV0IGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGNhbWVsaXplKGV2ZW50KSk7XHJcbiAgICBsZXQgaGFuZGxlciA9IHByb3BzW2hhbmRsZXJOYW1lXTtcclxuICAgIC8vIGZvciB2LW1vZGVsIHVwZGF0ZTp4eHggZXZlbnRzLCBhbHNvIHRyaWdnZXIga2ViYWItY2FzZSBlcXVpdmFsZW50XHJcbiAgICAvLyBmb3IgcHJvcHMgcGFzc2VkIHZpYSBrZWJhYi1jYXNlXHJcbiAgICBpZiAoIWhhbmRsZXIgJiYgaXNNb2RlbExpc3RlbmVyKSB7XHJcbiAgICAgICAgaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoaHlwaGVuYXRlKGV2ZW50KSk7XHJcbiAgICAgICAgaGFuZGxlciA9IHByb3BzW2hhbmRsZXJOYW1lXTtcclxuICAgIH1cclxuICAgIGlmIChoYW5kbGVyKSB7XHJcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaGFuZGxlciwgaW5zdGFuY2UsIDYgLyogQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi8sIGFyZ3MpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb25jZUhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSArIGBPbmNlYF07XHJcbiAgICBpZiAob25jZUhhbmRsZXIpIHtcclxuICAgICAgICBpZiAoIWluc3RhbmNlLmVtaXR0ZWQpIHtcclxuICAgICAgICAgICAgKGluc3RhbmNlLmVtaXR0ZWQgPSB7fSlbaGFuZGxlck5hbWVdID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhvbmNlSGFuZGxlciwgaW5zdGFuY2UsIDYgLyogQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi8sIGFyZ3MpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyhjb21wLCBhcHBDb250ZXh0LCBhc01peGluID0gZmFsc2UpIHtcclxuICAgIGlmICghYXBwQ29udGV4dC5kZW9wdCAmJiBjb21wLl9fZW1pdHMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBjb21wLl9fZW1pdHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCByYXcgPSBjb21wLmVtaXRzO1xyXG4gICAgbGV0IG5vcm1hbGl6ZWQgPSB7fTtcclxuICAgIC8vIGFwcGx5IG1peGluL2V4dGVuZHMgcHJvcHNcclxuICAgIGxldCBoYXNFeHRlbmRzID0gZmFsc2U7XHJcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuZEVtaXRzID0gKHJhdykgPT4ge1xyXG4gICAgICAgICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcclxuICAgICAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyhyYXcsIGFwcENvbnRleHQsIHRydWUpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRFbWl0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wLmV4dGVuZHMpIHtcclxuICAgICAgICAgICAgZXh0ZW5kRW1pdHMoY29tcC5leHRlbmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbXAubWl4aW5zKSB7XHJcbiAgICAgICAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XHJcbiAgICAgICAgcmV0dXJuIChjb21wLl9fZW1pdHMgPSBudWxsKTtcclxuICAgIH1cclxuICAgIGlmIChpc0FycmF5KHJhdykpIHtcclxuICAgICAgICByYXcuZm9yRWFjaChrZXkgPT4gKG5vcm1hbGl6ZWRba2V5XSA9IG51bGwpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGV4dGVuZChub3JtYWxpemVkLCByYXcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChjb21wLl9fZW1pdHMgPSBub3JtYWxpemVkKTtcclxufVxyXG4vLyBDaGVjayBpZiBhbiBpbmNvbWluZyBwcm9wIGtleSBpcyBhIGRlY2xhcmVkIGVtaXQgZXZlbnQgbGlzdGVuZXIuXHJcbi8vIGUuZy4gV2l0aCBgZW1pdHM6IHsgY2xpY2s6IG51bGwgfWAsIHByb3BzIG5hbWVkIGBvbkNsaWNrYCBhbmQgYG9uY2xpY2tgIGFyZVxyXG4vLyBib3RoIGNvbnNpZGVyZWQgbWF0Y2hlZCBsaXN0ZW5lcnMuXHJcbmZ1bmN0aW9uIGlzRW1pdExpc3RlbmVyKG9wdGlvbnMsIGtleSkge1xyXG4gICAgaWYgKCFvcHRpb25zIHx8ICFpc09uKGtleSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBrZXkgPSBrZXkucmVwbGFjZSgvT25jZSQvLCAnJyk7XHJcbiAgICByZXR1cm4gKGhhc093bihvcHRpb25zLCBrZXlbMl0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgzKSkgfHxcclxuICAgICAgICBoYXNPd24ob3B0aW9ucywga2V5LnNsaWNlKDIpKSk7XHJcbn1cblxuLy8gbWFyayB0aGUgY3VycmVudCByZW5kZXJpbmcgaW5zdGFuY2UgZm9yIGFzc2V0IHJlc29sdXRpb24gKGUuZy5cclxuLy8gcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSkgZHVyaW5nIHJlbmRlclxyXG5sZXQgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcclxuZnVuY3Rpb24gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGluc3RhbmNlKSB7XHJcbiAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBpbnN0YW5jZTtcclxufVxyXG4vLyBkZXYgb25seSBmbGFnIHRvIHRyYWNrIHdoZXRoZXIgJGF0dHJzIHdhcyB1c2VkIGR1cmluZyByZW5kZXIuXHJcbi8vIElmICRhdHRycyB3YXMgdXNlZCBkdXJpbmcgcmVuZGVyIHRoZW4gdGhlIHdhcm5pbmcgZm9yIGZhaWxlZCBhdHRyc1xyXG4vLyBmYWxsdGhyb3VnaCBjYW4gYmUgc3VwcHJlc3NlZC5cclxubGV0IGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcclxuZnVuY3Rpb24gbWFya0F0dHJzQWNjZXNzZWQoKSB7XHJcbiAgICBhY2Nlc3NlZEF0dHJzID0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB7IHR5cGU6IENvbXBvbmVudCwgdm5vZGUsIHByb3h5LCB3aXRoUHJveHksIHByb3BzLCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdLCBzbG90cywgYXR0cnMsIGVtaXQsIHJlbmRlciwgcmVuZGVyQ2FjaGUsIGRhdGEsIHNldHVwU3RhdGUsIGN0eCB9ID0gaW5zdGFuY2U7XHJcbiAgICBsZXQgcmVzdWx0O1xyXG4gICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgYWNjZXNzZWRBdHRycyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBsZXQgZmFsbHRocm91Z2hBdHRycztcclxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgNCAvKiBTVEFURUZVTF9DT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgLy8gd2l0aFByb3h5IGlzIGEgcHJveHkgd2l0aCBhIGRpZmZlcmVudCBgaGFzYCB0cmFwIG9ubHkgZm9yXHJcbiAgICAgICAgICAgIC8vIHJ1bnRpbWUtY29tcGlsZWQgcmVuZGVyIGZ1bmN0aW9ucyB1c2luZyBgd2l0aGAgYmxvY2suXHJcbiAgICAgICAgICAgIGNvbnN0IHByb3h5VG9Vc2UgPSB3aXRoUHJveHkgfHwgcHJveHk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5jYWxsKHByb3h5VG9Vc2UsIHByb3h5VG9Vc2UsIHJlbmRlckNhY2hlLCBwcm9wcywgc2V0dXBTdGF0ZSwgZGF0YSwgY3R4KSk7XHJcbiAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBhdHRycztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWxcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVyID0gQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAvLyBpbiBkZXYsIG1hcmsgYXR0cnMgYWNjZXNzZWQgaWYgb3B0aW9uYWwgcHJvcHMgKGF0dHJzID09PSBwcm9wcylcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBhdHRycyA9PT0gcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0ID0gbm9ybWFsaXplVk5vZGUocmVuZGVyLmxlbmd0aCA+IDFcclxuICAgICAgICAgICAgICAgID8gcmVuZGVyKHByb3BzLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGF0dHJzKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHRycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgOiB7IGF0dHJzLCBzbG90cywgZW1pdCB9KVxyXG4gICAgICAgICAgICAgICAgOiByZW5kZXIocHJvcHMsIG51bGwgLyogd2Uga25vdyBpdCBkb2Vzbid0IG5lZWQgaXQgKi8pKTtcclxuICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IENvbXBvbmVudC5wcm9wc1xyXG4gICAgICAgICAgICAgICAgPyBhdHRyc1xyXG4gICAgICAgICAgICAgICAgOiBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2goYXR0cnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhdHRyIG1lcmdpbmdcclxuICAgICAgICAvLyBpbiBkZXYgbW9kZSwgY29tbWVudHMgYXJlIHByZXNlcnZlZCwgYW5kIGl0J3MgcG9zc2libGUgZm9yIGEgdGVtcGxhdGVcclxuICAgICAgICAvLyB0byBoYXZlIGNvbW1lbnRzIGFsb25nIHNpZGUgdGhlIHJvb3QgZWxlbWVudCB3aGljaCBtYWtlcyBpdCBhIGZyYWdtZW50XHJcbiAgICAgICAgbGV0IHJvb3QgPSByZXN1bHQ7XHJcbiAgICAgICAgbGV0IHNldFJvb3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICA7XHJcbiAgICAgICAgICAgIFtyb290LCBzZXRSb290XSA9IGdldENoaWxkUm9vdChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcG9uZW50LmluaGVyaXRBdHRycyAhPT0gZmFsc2UgJiYgZmFsbHRocm91Z2hBdHRycykge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmFsbHRocm91Z2hBdHRycyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc2hhcGVGbGFnIH0gPSByb290O1xyXG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gfHxcclxuICAgICAgICAgICAgICAgICAgICBzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wc09wdGlvbnMgJiYga2V5cy5zb21lKGlzTW9kZWxMaXN0ZW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSB2LW1vZGVsIGxpc3RlbmVyIChvblVwZGF0ZTp4eHgpIGhhcyBhIGNvcnJlc3BvbmRpbmcgZGVjbGFyZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvcCwgaXQgaW5kaWNhdGVzIHRoaXMgY29tcG9uZW50IGV4cGVjdHMgdG8gaGFuZGxlIHYtbW9kZWwgYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0IHNob3VsZCBub3QgZmFsbHRocm91Z2guXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbGF0ZWQ6ICMxNTQzLCAjMTY0MywgIzE5ODlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IGZpbHRlck1vZGVsTGlzdGVuZXJzKGZhbGx0aHJvdWdoQXR0cnMsIHByb3BzT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJvb3QgPSBjbG9uZVZOb2RlKHJvb3QsIGZhbGx0aHJvdWdoQXR0cnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFhY2Nlc3NlZEF0dHJzICYmIHJvb3QudHlwZSAhPT0gQ29tbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbEF0dHJzID0gT2JqZWN0LmtleXMoYXR0cnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50QXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRyYUF0dHJzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhbGxBdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYWxsQXR0cnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB2LW1vZGVsIGhhbmRsZXJzIHdoZW4gdGhleSBmYWlsIHRvIGZhbGx0aHJvdWdoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGBvbmAsIGxvd2VyY2FzZSBmaXJzdCBsZXR0ZXIgdG8gcmVmbGVjdCBldmVudCBjYXNpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhY2N1cmF0ZWx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRBdHRycy5wdXNoKGtleVsyXS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhQXR0cnMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRyYUF0dHJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBFeHRyYW5lb3VzIG5vbi1wcm9wcyBhdHRyaWJ1dGVzIChgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2V4dHJhQXR0cnMuam9pbignLCAnKX0pIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHdlcmUgcGFzc2VkIHRvIGNvbXBvbmVudCBidXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCByb290IG5vZGVzLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRBdHRycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRXh0cmFuZW91cyBub24tZW1pdHMgZXZlbnQgbGlzdGVuZXJzIChgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2V2ZW50QXR0cnMuam9pbignLCAnKX0pIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHdlcmUgcGFzc2VkIHRvIGNvbXBvbmVudCBidXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCByb290IG5vZGVzLiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB0aGUgbGlzdGVuZXIgaXMgaW50ZW5kZWQgdG8gYmUgYSBjb21wb25lbnQgY3VzdG9tIGV2ZW50IGxpc3RlbmVyIG9ubHksIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYGRlY2xhcmUgaXQgdXNpbmcgdGhlIFwiZW1pdHNcIiBvcHRpb24uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGluaGVyaXQgZGlyZWN0aXZlc1xyXG4gICAgICAgIGlmICh2bm9kZS5kaXJzKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFJ1bnRpbWUgZGlyZWN0aXZlIHVzZWQgb24gY29tcG9uZW50IHdpdGggbm9uLWVsZW1lbnQgcm9vdCBub2RlLiBgICtcclxuICAgICAgICAgICAgICAgICAgICBgVGhlIGRpcmVjdGl2ZXMgd2lsbCBub3QgZnVuY3Rpb24gYXMgaW50ZW5kZWQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcm9vdC5kaXJzID0gcm9vdC5kaXJzID8gcm9vdC5kaXJzLmNvbmNhdCh2bm9kZS5kaXJzKSA6IHZub2RlLmRpcnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGluaGVyaXQgdHJhbnNpdGlvbiBkYXRhXHJcbiAgICAgICAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNFbGVtZW50Um9vdChyb290KSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGluc2lkZSA8VHJhbnNpdGlvbj4gcmVuZGVycyBub24tZWxlbWVudCByb290IG5vZGUgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYHRoYXQgY2Fubm90IGJlIGFuaW1hdGVkLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJvb3QudHJhbnNpdGlvbiA9IHZub2RlLnRyYW5zaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2V0Um9vdCkge1xyXG4gICAgICAgICAgICBzZXRSb290KHJvb3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcm9vdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMSAvKiBSRU5ERVJfRlVOQ1RJT04gKi8pO1xyXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVZOb2RlKENvbW1lbnQpO1xyXG4gICAgfVxyXG4gICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqIEluIGRldiBtb2RlLCB0ZW1wbGF0ZSByb290IGxldmVsIGNvbW1lbnRzIGFyZSByZW5kZXJlZCwgd2hpY2ggdHVybnMgdGhlXHJcbiAqIHRlbXBsYXRlIGludG8gYSBmcmFnbWVudCByb290LCBidXQgd2UgbmVlZCB0byBsb2NhdGUgdGhlIHNpbmdsZSBlbGVtZW50XHJcbiAqIHJvb3QgZm9yIGF0dHJzIGFuZCBzY29wZSBpZCBwcm9jZXNzaW5nLlxyXG4gKi9cclxuY29uc3QgZ2V0Q2hpbGRSb290ID0gKHZub2RlKSA9PiB7XHJcbiAgICBpZiAodm5vZGUudHlwZSAhPT0gRnJhZ21lbnQpIHtcclxuICAgICAgICByZXR1cm4gW3Zub2RlLCB1bmRlZmluZWRdO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmF3Q2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcclxuICAgIGNvbnN0IGR5bmFtaWNDaGlsZHJlbiA9IHZub2RlLmR5bmFtaWNDaGlsZHJlbjtcclxuICAgIGNvbnN0IGNoaWxkUm9vdCA9IGZpbHRlclNpbmdsZVJvb3QocmF3Q2hpbGRyZW4pO1xyXG4gICAgaWYgKCFjaGlsZFJvb3QpIHtcclxuICAgICAgICByZXR1cm4gW3Zub2RlLCB1bmRlZmluZWRdO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5kZXggPSByYXdDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCk7XHJcbiAgICBjb25zdCBkeW5hbWljSW5kZXggPSBkeW5hbWljQ2hpbGRyZW4gPyBkeW5hbWljQ2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpIDogLTE7XHJcbiAgICBjb25zdCBzZXRSb290ID0gKHVwZGF0ZWRSb290KSA9PiB7XHJcbiAgICAgICAgcmF3Q2hpbGRyZW5baW5kZXhdID0gdXBkYXRlZFJvb3Q7XHJcbiAgICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoZHluYW1pY0luZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbltkeW5hbWljSW5kZXhdID0gdXBkYXRlZFJvb3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodXBkYXRlZFJvb3QucGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gWy4uLmR5bmFtaWNDaGlsZHJlbiwgdXBkYXRlZFJvb3RdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBbbm9ybWFsaXplVk5vZGUoY2hpbGRSb290KSwgc2V0Um9vdF07XHJcbn07XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gZmlsdGVyU2luZ2xlUm9vdChjaGlsZHJlbikge1xyXG4gICAgY29uc3QgZmlsdGVyZWQgPSBjaGlsZHJlbi5maWx0ZXIoY2hpbGQgPT4ge1xyXG4gICAgICAgIHJldHVybiAhKGlzVk5vZGUoY2hpbGQpICYmXHJcbiAgICAgICAgICAgIGNoaWxkLnR5cGUgPT09IENvbW1lbnQgJiZcclxuICAgICAgICAgICAgY2hpbGQuY2hpbGRyZW4gIT09ICd2LWlmJyk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmaWx0ZXJlZC5sZW5ndGggPT09IDEgJiYgaXNWTm9kZShmaWx0ZXJlZFswXSkgPyBmaWx0ZXJlZFswXSA6IG51bGw7XHJcbn1cclxuY29uc3QgZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoID0gKGF0dHJzKSA9PiB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnIHx8IGtleSA9PT0gJ3N0eWxlJyB8fCBpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgKHJlcyB8fCAocmVzID0ge30pKVtrZXldID0gYXR0cnNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59O1xyXG5jb25zdCBmaWx0ZXJNb2RlbExpc3RlbmVycyA9IChhdHRycywgcHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpIHx8ICEoa2V5LnNsaWNlKDkpIGluIHByb3BzKSkge1xyXG4gICAgICAgICAgICByZXNba2V5XSA9IGF0dHJzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxuY29uc3QgaXNFbGVtZW50Um9vdCA9ICh2bm9kZSkgPT4ge1xyXG4gICAgcmV0dXJuICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLyB8fFxyXG4gICAgICAgIHZub2RlLnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyB8fFxyXG4gICAgICAgIHZub2RlLnR5cGUgPT09IENvbW1lbnQgLy8gcG90ZW50aWFsIHYtaWYgYnJhbmNoIHN3aXRjaFxyXG4gICAgKTtcclxufTtcclxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlQ29tcG9uZW50KHByZXZWTm9kZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpIHtcclxuICAgIGNvbnN0IHsgcHJvcHM6IHByZXZQcm9wcywgY2hpbGRyZW46IHByZXZDaGlsZHJlbiwgY29tcG9uZW50IH0gPSBwcmV2Vk5vZGU7XHJcbiAgICBjb25zdCB7IHByb3BzOiBuZXh0UHJvcHMsIGNoaWxkcmVuOiBuZXh0Q2hpbGRyZW4sIHBhdGNoRmxhZyB9ID0gbmV4dFZOb2RlO1xyXG4gICAgY29uc3QgZW1pdHMgPSBjb21wb25lbnQuZW1pdHNPcHRpb25zO1xyXG4gICAgLy8gUGFyZW50IGNvbXBvbmVudCdzIHJlbmRlciBmdW5jdGlvbiB3YXMgaG90LXVwZGF0ZWQuIFNpbmNlIHRoaXMgbWF5IGhhdmVcclxuICAgIC8vIGNhdXNlZCB0aGUgY2hpbGQgY29tcG9uZW50J3Mgc2xvdHMgY29udGVudCB0byBoYXZlIGNoYW5nZWQsIHdlIG5lZWQgdG9cclxuICAgIC8vIGZvcmNlIHRoZSBjaGlsZCB0byB1cGRhdGUgYXMgd2VsbC5cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pICYmIGlzSG1yVXBkYXRpbmcpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIGZvcmNlIGNoaWxkIHVwZGF0ZSBmb3IgcnVudGltZSBkaXJlY3RpdmUgb3IgdHJhbnNpdGlvbiBvbiBjb21wb25lbnQgdm5vZGUuXHJcbiAgICBpZiAobmV4dFZOb2RlLmRpcnMgfHwgbmV4dFZOb2RlLnRyYW5zaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpbWl6ZWQgJiYgcGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi8pIHtcclxuICAgICAgICAgICAgLy8gc2xvdCBjb250ZW50IHRoYXQgcmVmZXJlbmNlcyB2YWx1ZXMgdGhhdCBtaWdodCBoYXZlIGNoYW5nZWQsXHJcbiAgICAgICAgICAgIC8vIGUuZy4gaW4gYSB2LWZvclxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi8pIHtcclxuICAgICAgICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIW5leHRQcm9wcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcmVzZW5jZSBvZiB0aGlzIGZsYWcgaW5kaWNhdGVzIHByb3BzIGFyZSBhbHdheXMgbm9uLW51bGxcclxuICAgICAgICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBST1BTICovKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNQcm9wcyA9IG5leHRWTm9kZS5keW5hbWljUHJvcHM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Byb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBkeW5hbWljUHJvcHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIWlzRW1pdExpc3RlbmVyKGVtaXRzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyB0aGlzIHBhdGggaXMgb25seSB0YWtlbiBieSBtYW51YWxseSB3cml0dGVuIHJlbmRlciBmdW5jdGlvbnNcclxuICAgICAgICAvLyBzbyBwcmVzZW5jZSBvZiBhbnkgY2hpbGRyZW4gbGVhZHMgdG8gYSBmb3JjZWQgdXBkYXRlXHJcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gfHwgIW5leHRDaGlsZHJlbi4kc3RhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJldlByb3BzID09PSBuZXh0UHJvcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXByZXZQcm9wcykge1xyXG4gICAgICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbmV4dFByb3BzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0c09wdGlvbnMpIHtcclxuICAgIGNvbnN0IG5leHRLZXlzID0gT2JqZWN0LmtleXMobmV4dFByb3BzKTtcclxuICAgIGlmIChuZXh0S2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByZXZQcm9wcykubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5leHRLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gbmV4dEtleXNbaV07XHJcbiAgICAgICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJlxyXG4gICAgICAgICAgICAhaXNFbWl0TGlzdGVuZXIoZW1pdHNPcHRpb25zLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVIT0NIb3N0RWwoeyB2bm9kZSwgcGFyZW50IH0sIGVsIC8vIEhvc3ROb2RlXHJcbikge1xyXG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuc3ViVHJlZSA9PT0gdm5vZGUpIHtcclxuICAgICAgICAodm5vZGUgPSBwYXJlbnQudm5vZGUpLmVsID0gZWw7XHJcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcclxuICAgIH1cclxufVxuXG5jb25zdCBpc1N1c3BlbnNlID0gKHR5cGUpID0+IHR5cGUuX19pc1N1c3BlbnNlO1xyXG4vLyBTdXNwZW5zZSBleHBvc2VzIGEgY29tcG9uZW50LWxpa2UgQVBJLCBhbmQgaXMgdHJlYXRlZCBsaWtlIGEgY29tcG9uZW50XHJcbi8vIGluIHRoZSBjb21waWxlciwgYnV0IGludGVybmFsbHkgaXQncyBhIHNwZWNpYWwgYnVpbHQtaW4gdHlwZSB0aGF0IGhvb2tzXHJcbi8vIGRpcmVjdGx5IGludG8gdGhlIHJlbmRlcmVyLlxyXG5jb25zdCBTdXNwZW5zZUltcGwgPSB7XHJcbiAgICAvLyBJbiBvcmRlciB0byBtYWtlIFN1c3BlbnNlIHRyZWUtc2hha2FibGUsIHdlIG5lZWQgdG8gYXZvaWQgaW1wb3J0aW5nIGl0XHJcbiAgICAvLyBkaXJlY3RseSBpbiB0aGUgcmVuZGVyZXIuIFRoZSByZW5kZXJlciBjaGVja3MgZm9yIHRoZSBfX2lzU3VzcGVuc2UgZmxhZ1xyXG4gICAgLy8gb24gYSB2bm9kZSdzIHR5cGUgYW5kIGNhbGxzIHRoZSBgcHJvY2Vzc2AgbWV0aG9kLCBwYXNzaW5nIGluIHJlbmRlcmVyXHJcbiAgICAvLyBpbnRlcm5hbHMuXHJcbiAgICBfX2lzU3VzcGVuc2U6IHRydWUsXHJcbiAgICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIFxyXG4gICAgLy8gcGxhdGZvcm0tc3BlY2lmaWMgaW1wbCBwYXNzZWQgZnJvbSByZW5kZXJlclxyXG4gICAgcmVuZGVyZXJJbnRlcm5hbHMpIHtcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBtb3VudFN1c3BlbnNlKG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGF0Y2hTdXNwZW5zZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIGlzU1ZHLCByZW5kZXJlckludGVybmFscyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVTdXNwZW5zZSxcclxuICAgIGNyZWF0ZTogY3JlYXRlU3VzcGVuc2VCb3VuZGFyeVxyXG59O1xyXG4vLyBGb3JjZS1jYXN0ZWQgcHVibGljIHR5cGluZyBmb3IgaCBhbmQgVFNYIHByb3BzIGluZmVyZW5jZVxyXG5jb25zdCBTdXNwZW5zZSA9ICggU3VzcGVuc2VJbXBsXHJcbiAgICApO1xyXG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpIHtcclxuICAgIGNvbnN0IHsgcDogcGF0Y2gsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0gPSByZW5kZXJlckludGVybmFscztcclxuICAgIGNvbnN0IGhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscykpO1xyXG4gICAgLy8gc3RhcnQgbW91bnRpbmcgdGhlIGNvbnRlbnQgc3VidHJlZSBpbiBhbiBvZmYtZG9tIGNvbnRhaW5lclxyXG4gICAgcGF0Y2gobnVsbCwgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQpLCBoaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgIC8vIG5vdyBjaGVjayBpZiB3ZSBoYXZlIGVuY291bnRlcmVkIGFueSBhc3luYyBkZXBzXHJcbiAgICBpZiAoc3VzcGVuc2UuZGVwcyA+IDApIHtcclxuICAgICAgICAvLyBoYXMgYXN5bmNcclxuICAgICAgICAvLyBtb3VudCB0aGUgZmFsbGJhY2sgdHJlZVxyXG4gICAgICAgIHBhdGNoKG51bGwsIHZub2RlLnNzRmFsbGJhY2ssIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XHJcbiAgICAgICAgaXNTVkcpO1xyXG4gICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgdm5vZGUuc3NGYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBTdXNwZW5zZSBoYXMgbm8gYXN5bmMgZGVwcy4gSnVzdCByZXNvbHZlLlxyXG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBwYXRjaFN1c3BlbnNlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgaXNTVkcsIHsgcDogcGF0Y2gsIHVtOiB1bm1vdW50LCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9KSB7XHJcbiAgICBjb25zdCBzdXNwZW5zZSA9IChuMi5zdXNwZW5zZSA9IG4xLnN1c3BlbnNlKTtcclxuICAgIHN1c3BlbnNlLnZub2RlID0gbjI7XHJcbiAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgY29uc3QgbmV3QnJhbmNoID0gbjIuc3NDb250ZW50O1xyXG4gICAgY29uc3QgbmV3RmFsbGJhY2sgPSBuMi5zc0ZhbGxiYWNrO1xyXG4gICAgY29uc3QgeyBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIGlzSW5GYWxsYmFjaywgaXNIeWRyYXRpbmcgfSA9IHN1c3BlbnNlO1xyXG4gICAgaWYgKHBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xyXG4gICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBwZW5kaW5nQnJhbmNoKSkge1xyXG4gICAgICAgICAgICAvLyBzYW1lIHJvb3QgdHlwZSBidXQgY29udGVudCBtYXkgaGF2ZSBjaGFuZ2VkLlxyXG4gICAgICAgICAgICBwYXRjaChwZW5kaW5nQnJhbmNoLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNJbkZhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxyXG4gICAgICAgICAgICAgICAgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRvZ2dsZWQgYmVmb3JlIHBlbmRpbmcgdHJlZSBpcyByZXNvbHZlZFxyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcclxuICAgICAgICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0b2dnbGVkIGJlZm9yZSBoeWRyYXRpb24gaXMgZmluaXNoZWQsIHRoZSBjdXJyZW50IERPTSB0cmVlIGlzXHJcbiAgICAgICAgICAgICAgICAvLyBubyBsb25nZXIgdmFsaWQuIHNldCBpdCBhcyB0aGUgYWN0aXZlIGJyYW5jaCBzbyBpdCB3aWxsIGJlIHVubW91bnRlZFxyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiByZXNvbHZlZFxyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNIeWRyYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCA9IHBlbmRpbmdCcmFuY2g7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KHBlbmRpbmdCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGluY3JlbWVudCBwZW5kaW5nIElELiB0aGlzIGlzIHVzZWQgdG8gaW52YWxpZGF0ZSBhc3luYyBjYWxsYmFja3NcclxuICAgICAgICAgICAgLy8gcmVzZXQgc3VzcGVuc2Ugc3RhdGVcclxuICAgICAgICAgICAgc3VzcGVuc2UuZGVwcyA9IDA7XHJcbiAgICAgICAgICAgIC8vIGRpc2NhcmQgZWZmZWN0cyBmcm9tIHBlbmRpbmcgYnJhbmNoXHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgLy8gZGlzY2FyZCBwcmV2aW91cyBjb250YWluZXJcclxuICAgICAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGlmIChpc0luRmFsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgaW4gZmFsbGJhY2sgc3RhdGVcclxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICAgICAgICAgICAgICBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRvZ2dsZWQgXCJiYWNrXCIgdG8gY3VycmVudCBhY3RpdmUgYnJhbmNoXHJcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIHJlc29sdmVcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzd2l0Y2hlZCB0byBhIDNyZCBicmFuY2hcclxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XHJcbiAgICAgICAgICAgIC8vIHJvb3QgZGlkIG5vdCBjaGFuZ2UsIGp1c3Qgbm9ybWFsIHBhdGNoXHJcbiAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3QnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0JyYW5jaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyByb290IG5vZGUgdG9nZ2xlZFxyXG4gICAgICAgICAgICAvLyBpbnZva2UgQHBlbmRpbmcgZXZlbnRcclxuICAgICAgICAgICAgY29uc3Qgb25QZW5kaW5nID0gbjIucHJvcHMgJiYgbjIucHJvcHMub25QZW5kaW5nO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvblBlbmRpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICBvblBlbmRpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBtb3VudCBwZW5kaW5nIGJyYW5jaCBpbiBvZmYtZG9tIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcclxuICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaW5jb21pbmcgYnJhbmNoIGhhcyBubyBhc3luYyBkZXBzLCByZXNvbHZlIG5vdy5cclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGltZW91dCwgcGVuZGluZ0lkIH0gPSBzdXNwZW5zZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0lkID09PSBwZW5kaW5nSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGltZW91dCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5sZXQgaGFzV2FybmVkID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudCwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaXNIeWRyYXRpbmcgPSBmYWxzZSkge1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmYWxzZSAmJiAhaGFzV2FybmVkKSB7XHJcbiAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlIGBjb25zb2xlLmluZm9gIGNhbm5vdCBiZSBudWxsIGVycm9yXHJcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oYDxTdXNwZW5zZT4gaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUgYW5kIGl0cyBBUEkgd2lsbCBsaWtlbHkgY2hhbmdlLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBwOiBwYXRjaCwgbTogbW92ZSwgdW06IHVubW91bnQsIG46IG5leHQsIG86IHsgcGFyZW50Tm9kZSwgcmVtb3ZlIH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xyXG4gICAgY29uc3QgdGltZW91dCA9IHRvTnVtYmVyKHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnRpbWVvdXQpO1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSB7XHJcbiAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcclxuICAgICAgICBpc1NWRyxcclxuICAgICAgICBjb250YWluZXIsXHJcbiAgICAgICAgaGlkZGVuQ29udGFpbmVyLFxyXG4gICAgICAgIGFuY2hvcixcclxuICAgICAgICBkZXBzOiAwLFxyXG4gICAgICAgIHBlbmRpbmdJZDogMCxcclxuICAgICAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogLTEsXHJcbiAgICAgICAgYWN0aXZlQnJhbmNoOiBudWxsLFxyXG4gICAgICAgIHBlbmRpbmdCcmFuY2g6IG51bGwsXHJcbiAgICAgICAgaXNJbkZhbGxiYWNrOiB0cnVlLFxyXG4gICAgICAgIGlzSHlkcmF0aW5nLFxyXG4gICAgICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBlZmZlY3RzOiBbXSxcclxuICAgICAgICByZXNvbHZlKHJlc3VtZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzdW1lICYmICFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzdXNwZW5zZS5yZXNvbHZlKCkgaXMgY2FsbGVkIHdpdGhvdXQgYSBwZW5kaW5nIGJyYW5jaC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCBvbiBhbiBhbHJlYWR5IHVubW91bnRlZCBzdXNwZW5zZSBib3VuZGFyeS5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IHZub2RlLCBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIHBlbmRpbmdJZCwgZWZmZWN0cywgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIXJlc3VtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGFjdGl2ZUJyYW5jaCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbi5tb2RlID09PSAnb3V0LWluJztcclxuICAgICAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdJZCA9PT0gc3VzcGVuc2UucGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIEVOVEVSICovKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGluaXRpYWwgYW5jaG9yIG9uIG1vdW50XHJcbiAgICAgICAgICAgICAgICBsZXQgeyBhbmNob3IgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSB0cmVlXHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZhbGxiYWNrIHRyZWUgd2FzIG1vdW50ZWQsIGl0IG1heSBoYXZlIGJlZW4gbW92ZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBwYXJ0IG9mIGEgcGFyZW50IHN1c3BlbnNlLiBnZXQgdGhlIGxhdGVzdCBhbmNob3IgZm9yIGluc2VydGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvciA9IG5leHQoYWN0aXZlQnJhbmNoKTtcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGNvbnRlbnQgZnJvbSBvZmYtZG9tIGNvbnRhaW5lciB0byBhY3R1YWwgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBFTlRFUiAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBwZW5kaW5nQnJhbmNoKTtcclxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG51bGw7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmlzSW5GYWxsYmFjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBmbHVzaCBidWZmZXJlZCBlZmZlY3RzXHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgcGVuZGluZyBwYXJlbnQgc3VzcGVuc2VcclxuICAgICAgICAgICAgbGV0IHBhcmVudCA9IHN1c3BlbnNlLnBhcmVudDtcclxuICAgICAgICAgICAgbGV0IGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3VuZCBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBtZXJnZSBidWZmZXJlZCBwb3N0IGpvYnNcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnRvIHRoYXQgcGFyZW50XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmVmZmVjdHMucHVzaCguLi5lZmZlY3RzKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBubyBwZW5kaW5nIHBhcmVudCBzdXNwZW5zZSwgZmx1c2ggYWxsIGpvYnNcclxuICAgICAgICAgICAgaWYgKCFoYXNVbnJlc29sdmVkQW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZWZmZWN0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBpbnZva2UgQHJlc29sdmUgZXZlbnRcclxuICAgICAgICAgICAgY29uc3Qgb25SZXNvbHZlID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25SZXNvbHZlO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvblJlc29sdmUpKSB7XHJcbiAgICAgICAgICAgICAgICBvblJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFsbGJhY2soZmFsbGJhY2tWTm9kZSkge1xyXG4gICAgICAgICAgICBpZiAoIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IHZub2RlLCBhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBpc1NWRyB9ID0gc3VzcGVuc2U7XHJcbiAgICAgICAgICAgIC8vIGludm9rZSBAZmFsbGJhY2sgZXZlbnRcclxuICAgICAgICAgICAgY29uc3Qgb25GYWxsYmFjayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uRmFsbGJhY2s7XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uRmFsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICBvbkZhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dChhY3RpdmVCcmFuY2gpO1xyXG4gICAgICAgICAgICBjb25zdCBtb3VudEZhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdXNwZW5zZS5pc0luRmFsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtb3VudCB0aGUgZmFsbGJhY2sgdHJlZVxyXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgZmFsbGJhY2tWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICAgICAgICAgIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgZmFsbGJhY2tWTm9kZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5RW50ZXIgPSBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24gJiYgZmFsbGJhY2tWTm9kZS50cmFuc2l0aW9uLm1vZGUgPT09ICdvdXQtaW4nO1xyXG4gICAgICAgICAgICBpZiAoZGVsYXlFbnRlcikge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9IG1vdW50RmFsbGJhY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSBicmFuY2hcclxuICAgICAgICAgICAgdW5tb3VudChhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gbm8gc3VzcGVuc2Ugc28gdW5tb3VudCBob29rcyBmaXJlIG5vd1xyXG4gICAgICAgICAgICB0cnVlIC8vIHNob3VsZFJlbW92ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5pc0luRmFsbGJhY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIG1vdW50RmFsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW92ZShjb250YWluZXIsIGFuY2hvciwgdHlwZSkge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiZcclxuICAgICAgICAgICAgICAgIG1vdmUoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgdHlwZSk7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiYgbmV4dChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVnaXN0ZXJEZXAoaW5zdGFuY2UsIHNldHVwUmVuZGVyRWZmZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICghc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVkRWwgPSBpbnN0YW5jZS52bm9kZS5lbDtcclxuICAgICAgICAgICAgc3VzcGVuc2UuZGVwcysrO1xyXG4gICAgICAgICAgICBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgLmFzeW5jRGVwLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAwIC8qIFNFVFVQX0ZVTkNUSU9OICovKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jU2V0dXBSZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgd2hlbiB0aGUgc2V0dXAoKSBwcm9taXNlIHJlc29sdmVzLlxyXG4gICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBoYXZlIGJlZW4gdW5tb3VudGVkIGJlZm9yZSByZXNvbHZlLlxyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmlzVW5tb3VudGVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQgIT09IGluc3RhbmNlLnN1c3BlbnNlSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5kZXBzLS07XHJcbiAgICAgICAgICAgICAgICAvLyByZXRyeSBmcm9tIHRoaXMgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5hc3luY1Jlc29sdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdm5vZGUgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dCh2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgYXN5bmNTZXR1cFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHlkcmF0ZWRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIG1heSBoYXZlIGJlZW4gcmVwbGFjZWQgaWYgYW4gdXBkYXRlIGhhcHBlbmVkIGJlZm9yZSB0aGVcclxuICAgICAgICAgICAgICAgICAgICAvLyBhc3luYyBkZXAgaXMgcmVzb2x2ZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuZWwgPSBoeWRyYXRlZEVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAhaHlkcmF0ZWRFbCAmJiBpbnN0YW5jZS5zdWJUcmVlLmVsO1xyXG4gICAgICAgICAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoaW5zdGFuY2UsIHZub2RlLCBcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIG1vdmVkIGJlZm9yZSByZXNvbHZlLlxyXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBub3QgYSBoeWRyYXRpb24sIGluc3RhbmNlLnN1YlRyZWUgd2lsbCBiZSB0aGUgY29tbWVudFxyXG4gICAgICAgICAgICAgICAgLy8gcGxhY2Vob2xkZXIuXHJcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlKGh5ZHJhdGVkRWwgfHwgaW5zdGFuY2Uuc3ViVHJlZS5lbCksIFxyXG4gICAgICAgICAgICAgICAgLy8gYW5jaG9yIHdpbGwgbm90IGJlIHVzZWQgaWYgdGhpcyBpcyBoeWRyYXRpb24sIHNvIG9ubHkgbmVlZCB0b1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc2lkZXIgdGhlIGNvbW1lbnQgcGxhY2Vob2xkZXIgY2FzZS5cclxuICAgICAgICAgICAgICAgIGh5ZHJhdGVkRWwgPyBudWxsIDogbmV4dChpbnN0YW5jZS5zdWJUcmVlKSwgc3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHBsYWNlaG9sZGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUhPQ0hvc3RFbChpbnN0YW5jZSwgdm5vZGUuZWwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5pc1VubW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBzdXNwZW5zZTtcclxufVxyXG5mdW5jdGlvbiBoeWRyYXRlU3VzcGVuc2Uobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlTm9kZSkge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbiAgICBjb25zdCBzdXNwZW5zZSA9ICh2bm9kZS5zdXNwZW5zZSA9IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudFN1c3BlbnNlLCBwYXJlbnRDb21wb25lbnQsIG5vZGUucGFyZW50Tm9kZSwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIG51bGwsIGlzU1ZHLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCB0cnVlIC8qIGh5ZHJhdGluZyAqLykpO1xyXG4gICAgLy8gdGhlcmUgYXJlIHR3byBwb3NzaWJsZSBzY2VuYXJpb3MgZm9yIHNlcnZlci1yZW5kZXJlZCBzdXNwZW5zZTpcclxuICAgIC8vIC0gc3VjY2Vzczogc3NyIGNvbnRlbnQgc2hvdWxkIGJlIGZ1bGx5IHJlc29sdmVkXHJcbiAgICAvLyAtIGZhaWx1cmU6IHNzciBjb250ZW50IHNob3VsZCBiZSB0aGUgZmFsbGJhY2sgYnJhbmNoLlxyXG4gICAgLy8gaG93ZXZlciwgb24gdGhlIGNsaWVudCB3ZSBkb24ndCByZWFsbHkga25vdyBpZiBpdCBoYXMgZmFpbGVkIG9yIG5vdFxyXG4gICAgLy8gYXR0ZW1wdCB0byBoeWRyYXRlIHRoZSBET00gYXNzdW1pbmcgaXQgaGFzIHN1Y2NlZWRlZCwgYnV0IHdlIHN0aWxsXHJcbiAgICAvLyBuZWVkIHRvIGNvbnN0cnVjdCBhIHN1c3BlbnNlIGJvdW5kYXJ5IGZpcnN0XHJcbiAgICBjb25zdCByZXN1bHQgPSBoeWRyYXRlTm9kZShub2RlLCAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCksIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICBpZiAoc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xyXG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4odm5vZGUpIHtcclxuICAgIGNvbnN0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiB9ID0gdm5vZGU7XHJcbiAgICBsZXQgY29udGVudDtcclxuICAgIGxldCBmYWxsYmFjaztcclxuICAgIGlmIChzaGFwZUZsYWcgJiAzMiAvKiBTTE9UU19DSElMRFJFTiAqLykge1xyXG4gICAgICAgIGNvbnRlbnQgPSBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4uZGVmYXVsdCk7XHJcbiAgICAgICAgZmFsbGJhY2sgPSBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4uZmFsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29udGVudCA9IG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChjaGlsZHJlbik7XHJcbiAgICAgICAgZmFsbGJhY2sgPSBub3JtYWxpemVWTm9kZShudWxsKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY29udGVudCxcclxuICAgICAgICBmYWxsYmFja1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZVNsb3Qocykge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24ocykpIHtcclxuICAgICAgICBzID0gcygpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXJyYXkocykpIHtcclxuICAgICAgICBjb25zdCBzaW5nbGVDaGlsZCA9IGZpbHRlclNpbmdsZVJvb3Qocyk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhc2luZ2xlQ2hpbGQpIHtcclxuICAgICAgICAgICAgd2FybihgPFN1c3BlbnNlPiBzbG90cyBleHBlY3QgYSBzaW5nbGUgcm9vdCBub2RlLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzID0gc2luZ2xlQ2hpbGQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9ybWFsaXplVk5vZGUocyk7XHJcbn1cclxuZnVuY3Rpb24gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoZm4sIHN1c3BlbnNlKSB7XHJcbiAgICBpZiAoc3VzcGVuc2UgJiYgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgIGlmIChpc0FycmF5KGZuKSkge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goLi4uZm4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5wdXNoKGZuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGZuKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGJyYW5jaCkge1xyXG4gICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gYnJhbmNoO1xyXG4gICAgY29uc3QgeyB2bm9kZSwgcGFyZW50Q29tcG9uZW50IH0gPSBzdXNwZW5zZTtcclxuICAgIGNvbnN0IGVsID0gKHZub2RlLmVsID0gYnJhbmNoLmVsKTtcclxuICAgIC8vIGluIGNhc2Ugc3VzcGVuc2UgaXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNvbXBvbmVudCxcclxuICAgIC8vIHJlY3Vyc2l2ZWx5IHVwZGF0ZSB0aGUgSE9DIGVsXHJcbiAgICBpZiAocGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xyXG4gICAgICAgIHBhcmVudENvbXBvbmVudC52bm9kZS5lbCA9IGVsO1xyXG4gICAgICAgIHVwZGF0ZUhPQ0hvc3RFbChwYXJlbnRDb21wb25lbnQsIGVsKTtcclxuICAgIH1cclxufVxuXG5sZXQgaXNSZW5kZXJpbmdDb21waWxlZFNsb3QgPSAwO1xyXG5jb25zdCBzZXRDb21waWxlZFNsb3RSZW5kZXJpbmcgPSAobikgPT4gKGlzUmVuZGVyaW5nQ29tcGlsZWRTbG90ICs9IG4pO1xyXG4vKipcclxuICogQ29tcGlsZXIgcnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBgPHNsb3QvPmBcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHJlbmRlclNsb3Qoc2xvdHMsIG5hbWUsIHByb3BzID0ge30sIFxyXG4vLyB0aGlzIGlzIG5vdCBhIHVzZXItZmFjaW5nIGZ1bmN0aW9uLCBzbyB0aGUgZmFsbGJhY2sgaXMgYWx3YXlzIGdlbmVyYXRlZCBieVxyXG4vLyB0aGUgY29tcGlsZXIgYW5kIGd1YXJhbnRlZWQgdG8gYmUgYSBmdW5jdGlvbiByZXR1cm5pbmcgYW4gYXJyYXlcclxuZmFsbGJhY2spIHtcclxuICAgIGxldCBzbG90ID0gc2xvdHNbbmFtZV07XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNsb3QgJiYgc2xvdC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgd2FybihgU1NSLW9wdGltaXplZCBzbG90IGZ1bmN0aW9uIGRldGVjdGVkIGluIGEgbm9uLVNTUi1vcHRpbWl6ZWQgcmVuZGVyIGAgK1xyXG4gICAgICAgICAgICBgZnVuY3Rpb24uIFlvdSBuZWVkIHRvIG1hcmsgdGhpcyBjb21wb25lbnQgd2l0aCAkZHluYW1pYy1zbG90cyBpbiB0aGUgYCArXHJcbiAgICAgICAgICAgIGBwYXJlbnQgdGVtcGxhdGUuYCk7XHJcbiAgICAgICAgc2xvdCA9ICgpID0+IFtdO1xyXG4gICAgfVxyXG4gICAgLy8gYSBjb21waWxlZCBzbG90IGRpc2FibGVzIGJsb2NrIHRyYWNraW5nIGJ5IGRlZmF1bHQgdG8gYXZvaWQgbWFudWFsXHJcbiAgICAvLyBpbnZvY2F0aW9uIGludGVyZmVyaW5nIHdpdGggdGVtcGxhdGUtYmFzZWQgYmxvY2sgdHJhY2tpbmcsIGJ1dCBpblxyXG4gICAgLy8gYHJlbmRlclNsb3RgIHdlIGNhbiBiZSBzdXJlIHRoYXQgaXQncyB0ZW1wbGF0ZS1iYXNlZCBzbyB3ZSBjYW4gZm9yY2VcclxuICAgIC8vIGVuYWJsZSBpdC5cclxuICAgIGlzUmVuZGVyaW5nQ29tcGlsZWRTbG90Kys7XHJcbiAgICBjb25zdCByZW5kZXJlZCA9IChvcGVuQmxvY2soKSxcclxuICAgICAgICBjcmVhdGVCbG9jayhGcmFnbWVudCwgeyBrZXk6IHByb3BzLmtleSB9LCBzbG90ID8gc2xvdChwcm9wcykgOiBmYWxsYmFjayA/IGZhbGxiYWNrKCkgOiBbXSwgc2xvdHMuXyA9PT0gMSAvKiBTVEFCTEUgKi9cclxuICAgICAgICAgICAgPyA2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi9cclxuICAgICAgICAgICAgOiAtMiAvKiBCQUlMICovKSk7XHJcbiAgICBpc1JlbmRlcmluZ0NvbXBpbGVkU2xvdC0tO1xyXG4gICAgcmV0dXJuIHJlbmRlcmVkO1xyXG59XG5cbi8qKlxyXG4gKiBXcmFwIGEgc2xvdCBmdW5jdGlvbiB0byBtZW1vaXplIGN1cnJlbnQgcmVuZGVyaW5nIGluc3RhbmNlXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiB3aXRoQ3R4KGZuLCBjdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcclxuICAgIGlmICghY3R4KVxyXG4gICAgICAgIHJldHVybiBmbjtcclxuICAgIGNvbnN0IHJlbmRlckZuV2l0aENvbnRleHQgPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgIC8vIElmIGEgdXNlciBjYWxscyBhIGNvbXBpbGVkIHNsb3QgaW5zaWRlIGEgdGVtcGxhdGUgZXhwcmVzc2lvbiAoIzE3NDUpLCBpdFxyXG4gICAgICAgIC8vIGNhbiBtZXNzIHVwIGJsb2NrIHRyYWNraW5nLCBzbyBieSBkZWZhdWx0IHdlIG5lZWQgdG8gcHVzaCBhIG51bGwgYmxvY2sgdG9cclxuICAgICAgICAvLyBhdm9pZCB0aGF0LiBUaGlzIGlzbid0IG5lY2Vzc2FyeSBpZiByZW5kZXJpbmcgYSBjb21waWxlZCBgPHNsb3Q+YC5cclxuICAgICAgICBpZiAoIWlzUmVuZGVyaW5nQ29tcGlsZWRTbG90KSB7XHJcbiAgICAgICAgICAgIG9wZW5CbG9jayh0cnVlIC8qIG51bGwgYmxvY2sgdGhhdCBkaXNhYmxlcyB0cmFja2luZyAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG4gICAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShjdHgpO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGZuKC4uLmFyZ3MpO1xyXG4gICAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShvd25lcik7XHJcbiAgICAgICAgaWYgKCFpc1JlbmRlcmluZ0NvbXBpbGVkU2xvdCkge1xyXG4gICAgICAgICAgICBjbG9zZUJsb2NrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgcmVuZGVyRm5XaXRoQ29udGV4dC5fYyA9IHRydWU7XHJcbiAgICByZXR1cm4gcmVuZGVyRm5XaXRoQ29udGV4dDtcclxufVxuXG4vLyBTRkMgc2NvcGVkIHN0eWxlIElEIG1hbmFnZW1lbnQuXHJcbmxldCBjdXJyZW50U2NvcGVJZCA9IG51bGw7XHJcbmNvbnN0IHNjb3BlSWRTdGFjayA9IFtdO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHB1c2hTY29wZUlkKGlkKSB7XHJcbiAgICBzY29wZUlkU3RhY2sucHVzaCgoY3VycmVudFNjb3BlSWQgPSBpZCkpO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcG9wU2NvcGVJZCgpIHtcclxuICAgIHNjb3BlSWRTdGFjay5wb3AoKTtcclxuICAgIGN1cnJlbnRTY29wZUlkID0gc2NvcGVJZFN0YWNrW3Njb3BlSWRTdGFjay5sZW5ndGggLSAxXSB8fCBudWxsO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gd2l0aFNjb3BlSWQoaWQpIHtcclxuICAgIHJldHVybiAoKGZuKSA9PiB3aXRoQ3R4KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBwdXNoU2NvcGVJZChpZCk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICBwb3BTY29wZUlkKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0pKTtcclxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBpc1N0YXRlZnVsLCAvLyByZXN1bHQgb2YgYml0d2lzZSBmbGFnIGNvbXBhcmlzb25cclxuaXNTU1IgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgcHJvcHMgPSB7fTtcclxuICAgIGNvbnN0IGF0dHJzID0ge307XHJcbiAgICBkZWYoYXR0cnMsIEludGVybmFsT2JqZWN0S2V5LCAxKTtcclxuICAgIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycyk7XHJcbiAgICAvLyB2YWxpZGF0aW9uXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgdmFsaWRhdGVQcm9wcyhwcm9wcywgaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzU3RhdGVmdWwpIHtcclxuICAgICAgICAvLyBzdGF0ZWZ1bFxyXG4gICAgICAgIGluc3RhbmNlLnByb3BzID0gaXNTU1IgPyBwcm9wcyA6IHNoYWxsb3dSZWFjdGl2ZShwcm9wcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoIWluc3RhbmNlLnR5cGUucHJvcHMpIHtcclxuICAgICAgICAgICAgLy8gZnVuY3Rpb25hbCB3LyBvcHRpb25hbCBwcm9wcywgcHJvcHMgPT09IGF0dHJzXHJcbiAgICAgICAgICAgIGluc3RhbmNlLnByb3BzID0gYXR0cnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsIHcvIGRlY2xhcmVkIHByb3BzXHJcbiAgICAgICAgICAgIGluc3RhbmNlLnByb3BzID0gcHJvcHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5zdGFuY2UuYXR0cnMgPSBhdHRycztcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHJhd1ByZXZQcm9wcywgb3B0aW1pemVkKSB7XHJcbiAgICBjb25zdCB7IHByb3BzLCBhdHRycywgdm5vZGU6IHsgcGF0Y2hGbGFnIH0gfSA9IGluc3RhbmNlO1xyXG4gICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgY29uc3QgW29wdGlvbnNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xyXG4gICAgaWYgKFxyXG4gICAgLy8gYWx3YXlzIGZvcmNlIGZ1bGwgZGlmZiBpbiBkZXZcclxuICAgIC8vIC0gIzE5NDIgaWYgaG1yIGlzIGVuYWJsZWQgd2l0aCBzZmMgY29tcG9uZW50XHJcbiAgICAvLyAtIHZpdGUjODcyIG5vbi1zZmMgY29tcG9uZW50IHVzZWQgYnkgc2ZjIGNvbXBvbmVudFxyXG4gICAgISgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAoaW5zdGFuY2UudHlwZS5fX2htcklkIHx8XHJcbiAgICAgICAgICAgIChpbnN0YW5jZS5wYXJlbnQgJiYgaW5zdGFuY2UucGFyZW50LnR5cGUuX19obXJJZCkpKSAmJlxyXG4gICAgICAgIChvcHRpbWl6ZWQgfHwgcGF0Y2hGbGFnID4gMCkgJiZcclxuICAgICAgICAhKHBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi8pKSB7XHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDggLyogUFJPUFMgKi8pIHtcclxuICAgICAgICAgICAgLy8gQ29tcGlsZXItZ2VuZXJhdGVkIHByb3BzICYgbm8ga2V5cyBjaGFuZ2UsIGp1c3Qgc2V0IHRoZSB1cGRhdGVkXHJcbiAgICAgICAgICAgIC8vIHRoZSBwcm9wcy5cclxuICAgICAgICAgICAgY29uc3QgcHJvcHNUb1VwZGF0ZSA9IGluc3RhbmNlLnZub2RlLmR5bmFtaWNQcm9wcztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xyXG4gICAgICAgICAgICAgICAgLy8gUFJPUFMgZmxhZyBndWFyYW50ZWVzIHJhd1Byb3BzIHRvIGJlIG5vbi1udWxsXHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dHIgLyBwcm9wcyBzZXBhcmF0aW9uIHdhcyBkb25lIG9uIGluaXQgYW5kIHdpbGwgYmUgY29uc2lzdGVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgY29kZSBwYXRoLCBzbyBqdXN0IGNoZWNrIGlmIGF0dHJzIGhhdmUgaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093bihhdHRycywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1tjYW1lbGl6ZWRLZXldID0gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCByYXdDdXJyZW50UHJvcHMsIGNhbWVsaXplZEtleSwgdmFsdWUsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBmdWxsIHByb3BzIHVwZGF0ZS5cclxuICAgICAgICBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpO1xyXG4gICAgICAgIC8vIGluIGNhc2Ugb2YgZHluYW1pYyBwcm9wcywgY2hlY2sgaWYgd2UgbmVlZCB0byBkZWxldGUga2V5cyBmcm9tXHJcbiAgICAgICAgLy8gdGhlIHByb3BzIG9iamVjdFxyXG4gICAgICAgIGxldCBrZWJhYktleTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdDdXJyZW50UHJvcHMpIHtcclxuICAgICAgICAgICAgaWYgKCFyYXdQcm9wcyB8fFxyXG4gICAgICAgICAgICAgICAgLy8gZm9yIGNhbWVsQ2FzZVxyXG4gICAgICAgICAgICAgICAgKCFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoZSBvcmlnaW5hbCBwcm9wcyB3YXMgcGFzc2VkIGluIGFzIGtlYmFiLWNhc2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgY29udmVydGVkIHRvIGNhbWVsQ2FzZSAoIzk1NSlcclxuICAgICAgICAgICAgICAgICAgICAoKGtlYmFiS2V5ID0gaHlwaGVuYXRlKGtleSkpID09PSBrZXkgfHwgIWhhc093bihyYXdQcm9wcywga2ViYWJLZXkpKSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1ByZXZQcm9wcyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgY2FtZWxDYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChyYXdQcmV2UHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3Iga2ViYWItY2FzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3UHJldlByb3BzW2tlYmFiS2V5XSAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1trZXldID0gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCByYXdQcm9wcyB8fCBFTVBUWV9PQkosIGtleSwgdW5kZWZpbmVkLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgZnVuY3Rpb25hbCBjb21wb25lbnQgdy9vIHByb3BzIGRlY2xhcmF0aW9uLCBwcm9wcyBhbmRcclxuICAgICAgICAvLyBhdHRycyBwb2ludCB0byB0aGUgc2FtZSBvYmplY3Qgc28gaXQgc2hvdWxkIGFscmVhZHkgaGF2ZSBiZWVuIHVwZGF0ZWQuXHJcbiAgICAgICAgaWYgKGF0dHJzICE9PSByYXdDdXJyZW50UHJvcHMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmF3UHJvcHMgfHwgIWhhc093bihyYXdQcm9wcywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyc1trZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gdHJpZ2dlciB1cGRhdGVzIGZvciAkYXR0cnMgaW4gY2FzZSBpdCdzIHVzZWQgaW4gY29tcG9uZW50IHNsb3RzXHJcbiAgICB0cmlnZ2VyKGluc3RhbmNlLCBcInNldFwiIC8qIFNFVCAqLywgJyRhdHRycycpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiByYXdQcm9wcykge1xyXG4gICAgICAgIHZhbGlkYXRlUHJvcHMocHJvcHMsIGluc3RhbmNlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpIHtcclxuICAgIGNvbnN0IFtvcHRpb25zLCBuZWVkQ2FzdEtleXNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xyXG4gICAgaWYgKHJhd1Byb3BzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3UHJvcHMpIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAvLyBrZXksIHJlZiBhcmUgcmVzZXJ2ZWQgYW5kIG5ldmVyIHBhc3NlZCBkb3duXHJcbiAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wIG9wdGlvbiBuYW1lcyBhcmUgY2FtZWxpemVkIGR1cmluZyBub3JtYWxpemF0aW9uLCBzbyB0byBzdXBwb3J0XHJcbiAgICAgICAgICAgIC8vIGtlYmFiIC0+IGNhbWVsIGNvbnZlcnNpb24gaGVyZSB3ZSBuZWVkIHRvIGNhbWVsaXplIHRoZSBrZXkuXHJcbiAgICAgICAgICAgIGxldCBjYW1lbEtleTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsIChjYW1lbEtleSA9IGNhbWVsaXplKGtleSkpKSkge1xyXG4gICAgICAgICAgICAgICAgcHJvcHNbY2FtZWxLZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzRW1pdExpc3RlbmVyKGluc3RhbmNlLmVtaXRzT3B0aW9ucywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQW55IG5vbi1kZWNsYXJlZCAoZWl0aGVyIGFzIGEgcHJvcCBvciBhbiBlbWl0dGVkIGV2ZW50KSBwcm9wcyBhcmUgcHV0XHJcbiAgICAgICAgICAgICAgICAvLyBpbnRvIGEgc2VwYXJhdGUgYGF0dHJzYCBvYmplY3QgZm9yIHNwcmVhZGluZy4gTWFrZSBzdXJlIHRvIHByZXNlcnZlXHJcbiAgICAgICAgICAgICAgICAvLyBvcmlnaW5hbCBrZXkgY2FzaW5nXHJcbiAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobmVlZENhc3RLZXlzKSB7XHJcbiAgICAgICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZENhc3RLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IG5lZWRDYXN0S2V5c1tpXTtcclxuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3Q3VycmVudFByb3BzLCBrZXksIHJhd0N1cnJlbnRQcm9wc1trZXldLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcHJvcHMsIGtleSwgdmFsdWUsIGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCBvcHQgPSBvcHRpb25zW2tleV07XHJcbiAgICBpZiAob3B0ICE9IG51bGwpIHtcclxuICAgICAgICBjb25zdCBoYXNEZWZhdWx0ID0gaGFzT3duKG9wdCwgJ2RlZmF1bHQnKTtcclxuICAgICAgICAvLyBkZWZhdWx0IHZhbHVlc1xyXG4gICAgICAgIGlmIChoYXNEZWZhdWx0ICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb3B0LmRlZmF1bHQ7XHJcbiAgICAgICAgICAgIGlmIChvcHQudHlwZSAhPT0gRnVuY3Rpb24gJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWUocHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYm9vbGVhbiBjYXN0aW5nXHJcbiAgICAgICAgaWYgKG9wdFswIC8qIHNob3VsZENhc3QgKi9dKSB7XHJcbiAgICAgICAgICAgIGlmICghaGFzT3duKHByb3BzLCBrZXkpICYmICFoYXNEZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdFsxIC8qIHNob3VsZENhc3RUcnVlICovXSAmJlxyXG4gICAgICAgICAgICAgICAgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xyXG4gICAgaWYgKCFhcHBDb250ZXh0LmRlb3B0ICYmIGNvbXAuX19wcm9wcykge1xyXG4gICAgICAgIHJldHVybiBjb21wLl9fcHJvcHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCByYXcgPSBjb21wLnByb3BzO1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xyXG4gICAgY29uc3QgbmVlZENhc3RLZXlzID0gW107XHJcbiAgICAvLyBhcHBseSBtaXhpbi9leHRlbmRzIHByb3BzXHJcbiAgICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xyXG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcclxuICAgICAgICBjb25zdCBleHRlbmRQcm9wcyA9IChyYXcpID0+IHtcclxuICAgICAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IFtwcm9wcywga2V5c10gPSBub3JtYWxpemVQcm9wc09wdGlvbnMocmF3LCBhcHBDb250ZXh0LCB0cnVlKTtcclxuICAgICAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHByb3BzKTtcclxuICAgICAgICAgICAgaWYgKGtleXMpXHJcbiAgICAgICAgICAgICAgICBuZWVkQ2FzdEtleXMucHVzaCguLi5rZXlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wLmV4dGVuZHMpIHtcclxuICAgICAgICAgICAgZXh0ZW5kUHJvcHMoY29tcC5leHRlbmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbXAubWl4aW5zKSB7XHJcbiAgICAgICAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kUHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XHJcbiAgICAgICAgcmV0dXJuIChjb21wLl9fcHJvcHMgPSBFTVBUWV9BUlIpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzU3RyaW5nKHJhd1tpXSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYHByb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC5gLCByYXdbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShyYXdbaV0pO1xyXG4gICAgICAgICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IEVNUFRZX09CSjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHJhdykge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzT2JqZWN0KHJhdykpIHtcclxuICAgICAgICAgICAgd2FybihgaW52YWxpZCBwcm9wcyBvcHRpb25zYCwgcmF3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xyXG4gICAgICAgICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0ID0gcmF3W2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gKG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkgPyB7IHR5cGU6IG9wdCB9IDogb3B0KTtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BbMCAvKiBzaG91bGRDYXN0ICovXSA9IGJvb2xlYW5JbmRleCA+IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BbMSAvKiBzaG91bGRDYXN0VHJ1ZSAqL10gPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHByb3AgbmVlZHMgYm9vbGVhbiBjYXN0aW5nIG9yIGRlZmF1bHQgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9vbGVhbkluZGV4ID4gLTEgfHwgaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZENhc3RLZXlzLnB1c2gobm9ybWFsaXplZEtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChjb21wLl9fcHJvcHMgPSBbbm9ybWFsaXplZCwgbmVlZENhc3RLZXlzXSk7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wTmFtZShrZXkpIHtcclxuICAgIGlmIChrZXlbMF0gIT09ICckJykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgSW52YWxpZCBwcm9wIG5hbWU6IFwiJHtrZXl9XCIgaXMgYSByZXNlcnZlZCBwcm9wZXJ0eS5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG4vLyB1c2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgdHlwZSBjb25zdHJ1Y3RvcnNcclxuLy8gc28gdGhhdCBpdCB3b3JrcyBhY3Jvc3Mgdm1zIC8gaWZyYW1lcy5cclxuZnVuY3Rpb24gZ2V0VHlwZShjdG9yKSB7XHJcbiAgICBjb25zdCBtYXRjaCA9IGN0b3IgJiYgY3Rvci50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xyXG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJztcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVUeXBlKGEsIGIpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpO1xyXG59XHJcbmZ1bmN0aW9uIGdldFR5cGVJbmRleCh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XHJcbiAgICBpZiAoaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRUeXBlcykpIHtcclxuICAgICAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMTtcclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMocHJvcHMsIGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCByYXdWYWx1ZXMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xyXG4gICAgICAgIGxldCBvcHQgPSBvcHRpb25zW2tleV07XHJcbiAgICAgICAgaWYgKG9wdCA9PSBudWxsKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB2YWxpZGF0ZVByb3Aoa2V5LCByYXdWYWx1ZXNba2V5XSwgb3B0LCAhaGFzT3duKHJhd1ZhbHVlcywga2V5KSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AobmFtZSwgdmFsdWUsIHByb3AsIGlzQWJzZW50KSB7XHJcbiAgICBjb25zdCB7IHR5cGUsIHJlcXVpcmVkLCB2YWxpZGF0b3IgfSA9IHByb3A7XHJcbiAgICAvLyByZXF1aXJlZCFcclxuICAgIGlmIChyZXF1aXJlZCAmJiBpc0Fic2VudCkge1xyXG4gICAgICAgIHdhcm4oJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIG1pc3NpbmcgYnV0IG9wdGlvbmFsXHJcbiAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHR5cGUgY2hlY2tcclxuICAgIGlmICh0eXBlICE9IG51bGwgJiYgdHlwZSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgdHlwZXMgPSBpc0FycmF5KHR5cGUpID8gdHlwZSA6IFt0eXBlXTtcclxuICAgICAgICBjb25zdCBleHBlY3RlZFR5cGVzID0gW107XHJcbiAgICAgICAgLy8gdmFsdWUgaXMgdmFsaWQgYXMgbG9uZyBhcyBvbmUgb2YgdGhlIHNwZWNpZmllZCB0eXBlcyBtYXRjaFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoICYmICFpc1ZhbGlkOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgeyB2YWxpZCwgZXhwZWN0ZWRUeXBlIH0gPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlc1tpXSk7XHJcbiAgICAgICAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChleHBlY3RlZFR5cGUgfHwgJycpO1xyXG4gICAgICAgICAgICBpc1ZhbGlkID0gdmFsaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNWYWxpZCkge1xyXG4gICAgICAgICAgICB3YXJuKGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY3VzdG9tIHZhbGlkYXRvclxyXG4gICAgaWYgKHZhbGlkYXRvciAmJiAhdmFsaWRhdG9yKHZhbHVlKSkge1xyXG4gICAgICAgIHdhcm4oJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBpc1NpbXBsZVR5cGUgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ1N0cmluZyxOdW1iZXIsQm9vbGVhbixGdW5jdGlvbixTeW1ib2wnKTtcclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlKSB7XHJcbiAgICBsZXQgdmFsaWQ7XHJcbiAgICBjb25zdCBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xyXG4gICAgaWYgKGlzU2ltcGxlVHlwZShleHBlY3RlZFR5cGUpKSB7XHJcbiAgICAgICAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZTtcclxuICAgICAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXHJcbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XHJcbiAgICAgICAgdmFsaWQgPSBpc09iamVjdCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcclxuICAgICAgICB2YWxpZCA9IGlzQXJyYXkodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkLFxyXG4gICAgICAgIGV4cGVjdGVkVHlwZVxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xyXG4gICAgbGV0IG1lc3NhZ2UgPSBgSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIiR7bmFtZX1cIi5gICtcclxuICAgICAgICBgIEV4cGVjdGVkICR7ZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKX1gO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcclxuICAgIGNvbnN0IHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XHJcbiAgICBjb25zdCBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcclxuICAgIGNvbnN0IHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xyXG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXHJcbiAgICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcclxuICAgICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxyXG4gICAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XHJcbiAgICAgICAgbWVzc2FnZSArPSBgIHdpdGggdmFsdWUgJHtleHBlY3RlZFZhbHVlfWA7XHJcbiAgICB9XHJcbiAgICBtZXNzYWdlICs9IGAsIGdvdCAke3JlY2VpdmVkVHlwZX0gYDtcclxuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxyXG4gICAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XHJcbiAgICAgICAgbWVzc2FnZSArPSBgd2l0aCB2YWx1ZSAke3JlY2VpdmVkVmFsdWV9LmA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWVzc2FnZTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHN0eWxlVmFsdWUodmFsdWUsIHR5cGUpIHtcclxuICAgIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBgXCIke3ZhbHVlfVwiYDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke051bWJlcih2YWx1ZSl9YDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBgJHt2YWx1ZX1gO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlKHR5cGUpIHtcclxuICAgIGNvbnN0IGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xyXG4gICAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShlbGVtID0+IHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbSk7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Jvb2xlYW4oLi4uYXJncykge1xyXG4gICAgcmV0dXJuIGFyZ3Muc29tZShlbGVtID0+IGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nKTtcclxufVxuXG5mdW5jdGlvbiBpbmplY3RIb29rKHR5cGUsIGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSwgcHJlcGVuZCA9IGZhbHNlKSB7XHJcbiAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3QgaG9va3MgPSB0YXJnZXRbdHlwZV0gfHwgKHRhcmdldFt0eXBlXSA9IFtdKTtcclxuICAgICAgICAvLyBjYWNoZSB0aGUgZXJyb3IgaGFuZGxpbmcgd3JhcHBlciBmb3IgaW5qZWN0ZWQgaG9va3Mgc28gdGhlIHNhbWUgaG9va1xyXG4gICAgICAgIC8vIGNhbiBiZSBwcm9wZXJseSBkZWR1cGVkIGJ5IHRoZSBzY2hlZHVsZXIuIFwiX193ZWhcIiBzdGFuZHMgZm9yIFwid2l0aCBlcnJvclxyXG4gICAgICAgIC8vIGhhbmRsaW5nXCIuXHJcbiAgICAgICAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2VoIHx8XHJcbiAgICAgICAgICAgIChob29rLl9fd2VoID0gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaXNVbm1vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBkaXNhYmxlIHRyYWNraW5nIGluc2lkZSBhbGwgbGlmZWN5Y2xlIGhvb2tzXHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGNhbiBwb3RlbnRpYWxseSBiZSBjYWxsZWQgaW5zaWRlIGVmZmVjdHMuXHJcbiAgICAgICAgICAgICAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBTZXQgY3VycmVudEluc3RhbmNlIGR1cmluZyBob29rIGludm9jYXRpb24uXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGFzc3VtZXMgdGhlIGhvb2sgZG9lcyBub3Qgc3luY2hyb25vdXNseSB0cmlnZ2VyIG90aGVyIGhvb2tzLCB3aGljaFxyXG4gICAgICAgICAgICAgICAgLy8gY2FuIG9ubHkgYmUgZmFsc2Ugd2hlbiB0aGUgdXNlciBkb2VzIHNvbWV0aGluZyByZWFsbHkgZnVua3kuXHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UodGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIHRhcmdldCwgdHlwZSwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UobnVsbCk7XHJcbiAgICAgICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBpZiAocHJlcGVuZCkge1xyXG4gICAgICAgICAgICBob29rcy51bnNoaWZ0KHdyYXBwZWRIb29rKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhvb2tzLnB1c2god3JhcHBlZEhvb2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd3JhcHBlZEhvb2s7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjb25zdCBhcGlOYW1lID0gdG9IYW5kbGVyS2V5KEVycm9yVHlwZVN0cmluZ3NbdHlwZV0ucmVwbGFjZSgvIGhvb2skLywgJycpKTtcclxuICAgICAgICB3YXJuKGAke2FwaU5hbWV9IGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UgdG8gYmUgYCArXHJcbiAgICAgICAgICAgIGBhc3NvY2lhdGVkIHdpdGguIGAgK1xyXG4gICAgICAgICAgICBgTGlmZWN5Y2xlIGluamVjdGlvbiBBUElzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGV4ZWN1dGlvbiBvZiBzZXR1cCgpLmAgK1xyXG4gICAgICAgICAgICAoIGAgSWYgeW91IGFyZSB1c2luZyBhc3luYyBzZXR1cCgpLCBtYWtlIHN1cmUgdG8gcmVnaXN0ZXIgbGlmZWN5Y2xlIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBob29rcyBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0IHN0YXRlbWVudC5gXHJcbiAgICAgICAgICAgICAgICApKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBjcmVhdGVIb29rID0gKGxpZmVjeWNsZSkgPT4gKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkgPT4gXHJcbi8vIHBvc3QtY3JlYXRlIGxpZmVjeWNsZSByZWdpc3RyYXRpb25zIGFyZSBub29wcyBkdXJpbmcgU1NSXHJcbiFpc0luU1NSQ29tcG9uZW50U2V0dXAgJiYgaW5qZWN0SG9vayhsaWZlY3ljbGUsIGhvb2ssIHRhcmdldCk7XHJcbmNvbnN0IG9uQmVmb3JlTW91bnQgPSBjcmVhdGVIb29rKFwiYm1cIiAvKiBCRUZPUkVfTU9VTlQgKi8pO1xyXG5jb25zdCBvbk1vdW50ZWQgPSBjcmVhdGVIb29rKFwibVwiIC8qIE1PVU5URUQgKi8pO1xyXG5jb25zdCBvbkJlZm9yZVVwZGF0ZSA9IGNyZWF0ZUhvb2soXCJidVwiIC8qIEJFRk9SRV9VUERBVEUgKi8pO1xyXG5jb25zdCBvblVwZGF0ZWQgPSBjcmVhdGVIb29rKFwidVwiIC8qIFVQREFURUQgKi8pO1xyXG5jb25zdCBvbkJlZm9yZVVubW91bnQgPSBjcmVhdGVIb29rKFwiYnVtXCIgLyogQkVGT1JFX1VOTU9VTlQgKi8pO1xyXG5jb25zdCBvblVubW91bnRlZCA9IGNyZWF0ZUhvb2soXCJ1bVwiIC8qIFVOTU9VTlRFRCAqLyk7XHJcbmNvbnN0IG9uUmVuZGVyVHJpZ2dlcmVkID0gY3JlYXRlSG9vayhcInJ0Z1wiIC8qIFJFTkRFUl9UUklHR0VSRUQgKi8pO1xyXG5jb25zdCBvblJlbmRlclRyYWNrZWQgPSBjcmVhdGVIb29rKFwicnRjXCIgLyogUkVOREVSX1RSQUNLRUQgKi8pO1xyXG5jb25zdCBvbkVycm9yQ2FwdHVyZWQgPSAoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSA9PiB7XHJcbiAgICBpbmplY3RIb29rKFwiZWNcIiAvKiBFUlJPUl9DQVBUVVJFRCAqLywgaG9vaywgdGFyZ2V0KTtcclxufTtcblxuLy8gU2ltcGxlIGVmZmVjdC5cclxuZnVuY3Rpb24gd2F0Y2hFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsIG9wdGlvbnMpO1xyXG59XHJcbi8vIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzIHRvIHRyaWdnZXIgb24gdW5kZWZpbmVkIGluaXRpYWwgdmFsdWVzXHJcbmNvbnN0IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA9IHt9O1xyXG4vLyBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0Z1bmN0aW9uKGNiKSkge1xyXG4gICAgICAgIHdhcm4oYFxcYHdhdGNoKGZuLCBvcHRpb25zPylcXGAgc2lnbmF0dXJlIGhhcyBiZWVuIG1vdmVkIHRvIGEgc2VwYXJhdGUgQVBJLiBgICtcclxuICAgICAgICAgICAgYFVzZSBcXGB3YXRjaEVmZmVjdChmbiwgb3B0aW9ucz8pXFxgIGluc3RlYWQuIFxcYHdhdGNoXFxgIG5vdyBvbmx5IGAgK1xyXG4gICAgICAgICAgICBgc3VwcG9ydHMgXFxgd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIGRvV2F0Y2goc291cmNlLCBjYiwgeyBpbW1lZGlhdGUsIGRlZXAsIGZsdXNoLCBvblRyYWNrLCBvblRyaWdnZXIgfSA9IEVNUFRZX09CSiwgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWNiKSB7XHJcbiAgICAgICAgaWYgKGltbWVkaWF0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHdhdGNoKCkgXCJpbW1lZGlhdGVcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgYCArXHJcbiAgICAgICAgICAgICAgICBgd2F0Y2goc291cmNlLCBjYWxsYmFjaywgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlZXAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB3YXJuKGB3YXRjaCgpIFwiZGVlcFwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSBgICtcclxuICAgICAgICAgICAgICAgIGB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHdhcm5JbnZhbGlkU291cmNlID0gKHMpID0+IHtcclxuICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIHNvdXJjZTogYCwgcywgYEEgd2F0Y2ggc291cmNlIGNhbiBvbmx5IGJlIGEgZ2V0dGVyL2VmZmVjdCBmdW5jdGlvbiwgYSByZWYsIGAgK1xyXG4gICAgICAgICAgICBgYSByZWFjdGl2ZSBvYmplY3QsIG9yIGFuIGFycmF5IG9mIHRoZXNlIHR5cGVzLmApO1xyXG4gICAgfTtcclxuICAgIGxldCBnZXR0ZXI7XHJcbiAgICBsZXQgZm9yY2VUcmlnZ2VyID0gZmFsc2U7XHJcbiAgICBpZiAoaXNSZWYoc291cmNlKSkge1xyXG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS52YWx1ZTtcclxuICAgICAgICBmb3JjZVRyaWdnZXIgPSAhIXNvdXJjZS5fc2hhbGxvdztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUmVhY3RpdmUoc291cmNlKSkge1xyXG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZTtcclxuICAgICAgICBkZWVwID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkoc291cmNlKSkge1xyXG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS5tYXAocyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc1JlZihzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHMudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYXZlcnNlKHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsV2l0aEVycm9ySGFuZGxpbmcocywgaW5zdGFuY2UsIDIgLyogV0FUQ0hfR0VUVEVSICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuSW52YWxpZFNvdXJjZShzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XHJcbiAgICAgICAgaWYgKGNiKSB7XHJcbiAgICAgICAgICAgIC8vIGdldHRlciB3aXRoIGNiXHJcbiAgICAgICAgICAgIGdldHRlciA9ICgpID0+IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAyIC8qIFdBVENIX0dFVFRFUiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBubyBjYiAtPiBzaW1wbGUgZWZmZWN0XHJcbiAgICAgICAgICAgIGdldHRlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5pc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjbGVhbnVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAzIC8qIFdBVENIX0NBTExCQUNLICovLCBbb25JbnZhbGlkYXRlXSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2V0dGVyID0gTk9PUDtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkludmFsaWRTb3VyY2Uoc291cmNlKTtcclxuICAgIH1cclxuICAgIGlmIChjYiAmJiBkZWVwKSB7XHJcbiAgICAgICAgY29uc3QgYmFzZUdldHRlciA9IGdldHRlcjtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiB0cmF2ZXJzZShiYXNlR2V0dGVyKCkpO1xyXG4gICAgfVxyXG4gICAgbGV0IGNsZWFudXA7XHJcbiAgICBjb25zdCBvbkludmFsaWRhdGUgPSAoZm4pID0+IHtcclxuICAgICAgICBjbGVhbnVwID0gcnVubmVyLm9wdGlvbnMub25TdG9wID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCA0IC8qIFdBVENIX0NMRUFOVVAgKi8pO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgbGV0IG9sZFZhbHVlID0gaXNBcnJheShzb3VyY2UpID8gW10gOiBJTklUSUFMX1dBVENIRVJfVkFMVUU7XHJcbiAgICBjb25zdCBqb2IgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFydW5uZXIuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNiKSB7XHJcbiAgICAgICAgICAgIC8vIHdhdGNoKHNvdXJjZSwgY2IpXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gcnVubmVyKCk7XHJcbiAgICAgICAgICAgIGlmIChkZWVwIHx8IGZvcmNlVHJpZ2dlciB8fCBoYXNDaGFuZ2VkKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNsZWFudXAgYmVmb3JlIHJ1bm5pbmcgY2IgYWdhaW5cclxuICAgICAgICAgICAgICAgIGlmIChjbGVhbnVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoY2IsIGluc3RhbmNlLCAzIC8qIFdBVENIX0NBTExCQUNLICovLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFzcyB1bmRlZmluZWQgYXMgdGhlIG9sZCB2YWx1ZSB3aGVuIGl0J3MgY2hhbmdlZCBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9PT0gSU5JVElBTF9XQVRDSEVSX1ZBTFVFID8gdW5kZWZpbmVkIDogb2xkVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgb25JbnZhbGlkYXRlXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHdhdGNoRWZmZWN0XHJcbiAgICAgICAgICAgIHJ1bm5lcigpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBpbXBvcnRhbnQ6IG1hcmsgdGhlIGpvYiBhcyBhIHdhdGNoZXIgY2FsbGJhY2sgc28gdGhhdCBzY2hlZHVsZXIga25vd3NcclxuICAgIC8vIGl0IGlzIGFsbG93ZWQgdG8gc2VsZi10cmlnZ2VyICgjMTcyNylcclxuICAgIGpvYi5hbGxvd1JlY3Vyc2UgPSAhIWNiO1xyXG4gICAgbGV0IHNjaGVkdWxlcjtcclxuICAgIGlmIChmbHVzaCA9PT0gJ3N5bmMnKSB7XHJcbiAgICAgICAgc2NoZWR1bGVyID0gam9iO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZmx1c2ggPT09ICdwb3N0Jykge1xyXG4gICAgICAgIHNjaGVkdWxlciA9ICgpID0+IHF1ZXVlUG9zdFJlbmRlckVmZmVjdChqb2IsIGluc3RhbmNlICYmIGluc3RhbmNlLnN1c3BlbnNlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGRlZmF1bHQ6ICdwcmUnXHJcbiAgICAgICAgc2NoZWR1bGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlIHx8IGluc3RhbmNlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgcXVldWVQcmVGbHVzaENiKGpvYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aXRoICdwcmUnIG9wdGlvbiwgdGhlIGZpcnN0IGNhbGwgbXVzdCBoYXBwZW4gYmVmb3JlXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQgc28gaXQgaXMgY2FsbGVkIHN5bmNocm9ub3VzbHkuXHJcbiAgICAgICAgICAgICAgICBqb2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBydW5uZXIgPSBlZmZlY3QoZ2V0dGVyLCB7XHJcbiAgICAgICAgbGF6eTogdHJ1ZSxcclxuICAgICAgICBvblRyYWNrLFxyXG4gICAgICAgIG9uVHJpZ2dlcixcclxuICAgICAgICBzY2hlZHVsZXJcclxuICAgIH0pO1xyXG4gICAgcmVjb3JkSW5zdGFuY2VCb3VuZEVmZmVjdChydW5uZXIpO1xyXG4gICAgLy8gaW5pdGlhbCBydW5cclxuICAgIGlmIChjYikge1xyXG4gICAgICAgIGlmIChpbW1lZGlhdGUpIHtcclxuICAgICAgICAgICAgam9iKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvbGRWYWx1ZSA9IHJ1bm5lcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGZsdXNoID09PSAncG9zdCcpIHtcclxuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QocnVubmVyLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBydW5uZXIoKTtcclxuICAgIH1cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgc3RvcChydW5uZXIpO1xyXG4gICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZW1vdmUoaW5zdGFuY2UuZWZmZWN0cywgcnVubmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHRoaXMuJHdhdGNoXHJcbmZ1bmN0aW9uIGluc3RhbmNlV2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucykge1xyXG4gICAgY29uc3QgcHVibGljVGhpcyA9IHRoaXMucHJveHk7XHJcbiAgICBjb25zdCBnZXR0ZXIgPSBpc1N0cmluZyhzb3VyY2UpXHJcbiAgICAgICAgPyAoKSA9PiBwdWJsaWNUaGlzW3NvdXJjZV1cclxuICAgICAgICA6IHNvdXJjZS5iaW5kKHB1YmxpY1RoaXMpO1xyXG4gICAgcmV0dXJuIGRvV2F0Y2goZ2V0dGVyLCBjYi5iaW5kKHB1YmxpY1RoaXMpLCBvcHRpb25zLCB0aGlzKTtcclxufVxyXG5mdW5jdGlvbiB0cmF2ZXJzZSh2YWx1ZSwgc2VlbiA9IG5ldyBTZXQoKSkge1xyXG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgc2Vlbi5oYXModmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2Vlbi5hZGQodmFsdWUpO1xyXG4gICAgaWYgKGlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgIHRyYXZlcnNlKHZhbHVlLnZhbHVlLCBzZWVuKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0cmF2ZXJzZSh2YWx1ZVtpXSwgc2Vlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTZXQodmFsdWUpIHx8IGlzTWFwKHZhbHVlKSkge1xyXG4gICAgICAgIHZhbHVlLmZvckVhY2goKHYpID0+IHtcclxuICAgICAgICAgICAgdHJhdmVyc2Uodiwgc2Vlbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cmF2ZXJzZSh2YWx1ZVtrZXldLCBzZWVuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cblxuZnVuY3Rpb24gdXNlVHJhbnNpdGlvblN0YXRlKCkge1xyXG4gICAgY29uc3Qgc3RhdGUgPSB7XHJcbiAgICAgICAgaXNNb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBpc0xlYXZpbmc6IGZhbHNlLFxyXG4gICAgICAgIGlzVW5tb3VudGluZzogZmFsc2UsXHJcbiAgICAgICAgbGVhdmluZ1ZOb2RlczogbmV3IE1hcCgpXHJcbiAgICB9O1xyXG4gICAgb25Nb3VudGVkKCgpID0+IHtcclxuICAgICAgICBzdGF0ZS5pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xyXG4gICAgICAgIHN0YXRlLmlzVW5tb3VudGluZyA9IHRydWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzdGF0ZTtcclxufVxyXG5jb25zdCBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciA9IFtGdW5jdGlvbiwgQXJyYXldO1xyXG5jb25zdCBCYXNlVHJhbnNpdGlvbkltcGwgPSB7XHJcbiAgICBuYW1lOiBgQmFzZVRyYW5zaXRpb25gLFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBtb2RlOiBTdHJpbmcsXHJcbiAgICAgICAgYXBwZWFyOiBCb29sZWFuLFxyXG4gICAgICAgIHBlcnNpc3RlZDogQm9vbGVhbixcclxuICAgICAgICAvLyBlbnRlclxyXG4gICAgICAgIG9uQmVmb3JlRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uQWZ0ZXJFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25FbnRlckNhbmNlbGxlZDogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgLy8gbGVhdmVcclxuICAgICAgICBvbkJlZm9yZUxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkFmdGVyTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uTGVhdmVDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIC8vIGFwcGVhclxyXG4gICAgICAgIG9uQmVmb3JlQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BZnRlckFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BcHBlYXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcclxuICAgICAgICBsZXQgcHJldlRyYW5zaXRpb25LZXk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCksIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgd2FybignPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudCBvciBjb21wb25lbnQuIFVzZSAnICtcclxuICAgICAgICAgICAgICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIG5lZWQgdG8gdHJhY2sgcmVhY3Rpdml0eSBmb3IgdGhlc2UgcHJvcHMgc28gdXNlIHRoZSByYXdcclxuICAgICAgICAgICAgLy8gcHJvcHMgZm9yIGEgYml0IGJldHRlciBwZXJmXHJcbiAgICAgICAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCB7IG1vZGUgfSA9IHJhd1Byb3BzO1xyXG4gICAgICAgICAgICAvLyBjaGVjayBtb2RlXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbW9kZSAmJiAhWydpbi1vdXQnLCAnb3V0LWluJywgJ2RlZmF1bHQnXS5pbmNsdWRlcyhtb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJHttb2RlfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQgY2hpbGRyZW4gaGFzIGEgZ3VhcmFudGVlZCBsZW5ndGggb2YgMS5cclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzTGVhdmluZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIDx0cmFuc2l0aW9uPjxrZWVwLWFsaXZlLz48L3RyYW5zaXRpb24+LCB3ZSBuZWVkIHRvXHJcbiAgICAgICAgICAgIC8vIGNvbXBhcmUgdGhlIHR5cGUgb2YgdGhlIGtlcHQtYWxpdmUgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgIGNvbnN0IGlubmVyQ2hpbGQgPSBnZXRLZWVwQWxpdmVDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgICAgIGlmICghaW5uZXJDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGVudGVySG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIHJhd1Byb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgZW50ZXJIb29rcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZENoaWxkID0gaW5zdGFuY2Uuc3ViVHJlZTtcclxuICAgICAgICAgICAgY29uc3Qgb2xkSW5uZXJDaGlsZCA9IG9sZENoaWxkICYmIGdldEtlZXBBbGl2ZUNoaWxkKG9sZENoaWxkKTtcclxuICAgICAgICAgICAgbGV0IHRyYW5zaXRpb25LZXlDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZ2V0VHJhbnNpdGlvbktleSB9ID0gaW5uZXJDaGlsZC50eXBlO1xyXG4gICAgICAgICAgICBpZiAoZ2V0VHJhbnNpdGlvbktleSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZ2V0VHJhbnNpdGlvbktleSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZUcmFuc2l0aW9uS2V5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2VHJhbnNpdGlvbktleSA9IGtleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gcHJldlRyYW5zaXRpb25LZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2VHJhbnNpdGlvbktleSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaGFuZGxlIG1vZGVcclxuICAgICAgICAgICAgaWYgKG9sZElubmVyQ2hpbGQgJiZcclxuICAgICAgICAgICAgICAgIG9sZElubmVyQ2hpbGQudHlwZSAhPT0gQ29tbWVudCAmJlxyXG4gICAgICAgICAgICAgICAgKCFpc1NhbWVWTm9kZVR5cGUoaW5uZXJDaGlsZCwgb2xkSW5uZXJDaGlsZCkgfHwgdHJhbnNpdGlvbktleUNoYW5nZWQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nSG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKG9sZElubmVyQ2hpbGQsIHJhd1Byb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIG9sZCB0cmVlJ3MgaG9va3MgaW4gY2FzZSBvZiBkeW5hbWljIHRyYW5zaXRpb25cclxuICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCBsZWF2aW5nSG9va3MpO1xyXG4gICAgICAgICAgICAgICAgLy8gc3dpdGNoaW5nIGJldHdlZW4gZGlmZmVyZW50IHZpZXdzXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdIb29rcy5hZnRlckxlYXZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdIb29rcy5kZWxheUxlYXZlID0gKGVsLCBlYXJseVJlbW92ZSwgZGVsYXllZExlYXZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIG9sZElubmVyQ2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVbU3RyaW5nKG9sZElubmVyQ2hpbGQua2V5KV0gPSBvbGRJbm5lckNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlYXJseSByZW1vdmFsIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFybHlSZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVudGVySG9va3MuZGVsYXllZExlYXZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRlckhvb2tzLmRlbGF5ZWRMZWF2ZSA9IGRlbGF5ZWRMZWF2ZTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2VcclxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcclxuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XHJcbmZ1bmN0aW9uIGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKSB7XHJcbiAgICBjb25zdCB7IGxlYXZpbmdWTm9kZXMgfSA9IHN0YXRlO1xyXG4gICAgbGV0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGxlYXZpbmdWTm9kZXMuZ2V0KHZub2RlLnR5cGUpO1xyXG4gICAgaWYgKCFsZWF2aW5nVk5vZGVzQ2FjaGUpIHtcclxuICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIGxlYXZpbmdWTm9kZXMuc2V0KHZub2RlLnR5cGUsIGxlYXZpbmdWTm9kZXNDYWNoZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVhdmluZ1ZOb2Rlc0NhY2hlO1xyXG59XHJcbi8vIFRoZSB0cmFuc2l0aW9uIGhvb2tzIGFyZSBhdHRhY2hlZCB0byB0aGUgdm5vZGUgYXMgdm5vZGUudHJhbnNpdGlvblxyXG4vLyBhbmQgd2lsbCBiZSBjYWxsZWQgYXQgYXBwcm9wcmlhdGUgdGltaW5nIGluIHRoZSByZW5kZXJlci5cclxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyBhcHBlYXIsIG1vZGUsIHBlcnNpc3RlZCA9IGZhbHNlLCBvbkJlZm9yZUVudGVyLCBvbkVudGVyLCBvbkFmdGVyRW50ZXIsIG9uRW50ZXJDYW5jZWxsZWQsIG9uQmVmb3JlTGVhdmUsIG9uTGVhdmUsIG9uQWZ0ZXJMZWF2ZSwgb25MZWF2ZUNhbmNlbGxlZCwgb25CZWZvcmVBcHBlYXIsIG9uQXBwZWFyLCBvbkFmdGVyQXBwZWFyLCBvbkFwcGVhckNhbmNlbGxlZCB9ID0gcHJvcHM7XHJcbiAgICBjb25zdCBrZXkgPSBTdHJpbmcodm5vZGUua2V5KTtcclxuICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKTtcclxuICAgIGNvbnN0IGNhbGxIb29rID0gKGhvb2ssIGFyZ3MpID0+IHtcclxuICAgICAgICBob29rICYmXHJcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA5IC8qIFRSQU5TSVRJT05fSE9PSyAqLywgYXJncyk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaG9va3MgPSB7XHJcbiAgICAgICAgbW9kZSxcclxuICAgICAgICBwZXJzaXN0ZWQsXHJcbiAgICAgICAgYmVmb3JlRW50ZXIoZWwpIHtcclxuICAgICAgICAgICAgbGV0IGhvb2sgPSBvbkJlZm9yZUVudGVyO1xyXG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvb2sgPSBvbkJlZm9yZUFwcGVhciB8fCBvbkJlZm9yZUVudGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGZvciBzYW1lIGVsZW1lbnQgKHYtc2hvdylcclxuICAgICAgICAgICAgaWYgKGVsLl9sZWF2ZUNiKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYih0cnVlIC8qIGNhbmNlbGxlZCAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZm9yIHRvZ2dsZWQgZWxlbWVudCB3aXRoIHNhbWUga2V5ICh2LWlmKVxyXG4gICAgICAgICAgICBjb25zdCBsZWF2aW5nVk5vZGUgPSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcclxuICAgICAgICAgICAgaWYgKGxlYXZpbmdWTm9kZSAmJlxyXG4gICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHZub2RlLCBsZWF2aW5nVk5vZGUpICYmXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IpIHtcclxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIGVhcmx5IHJlbW92YWwgKG5vdCBjYW5jZWxsZWQpXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYWxsSG9vayhob29rLCBbZWxdKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudGVyKGVsKSB7XHJcbiAgICAgICAgICAgIGxldCBob29rID0gb25FbnRlcjtcclxuICAgICAgICAgICAgbGV0IGFmdGVySG9vayA9IG9uQWZ0ZXJFbnRlcjtcclxuICAgICAgICAgICAgbGV0IGNhbmNlbEhvb2sgPSBvbkVudGVyQ2FuY2VsbGVkO1xyXG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvb2sgPSBvbkFwcGVhciB8fCBvbkVudGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGFmdGVySG9vayA9IG9uQWZ0ZXJBcHBlYXIgfHwgb25BZnRlckVudGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEhvb2sgPSBvbkFwcGVhckNhbmNlbGxlZCB8fCBvbkVudGVyQ2FuY2VsbGVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fZW50ZXJDYiA9IChjYW5jZWxsZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhjYW5jZWxIb29rLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKGFmdGVySG9vaywgW2VsXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaG9va3MuZGVsYXllZExlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9va3MuZGVsYXllZExlYXZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbC5fZW50ZXJDYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChob29rKSB7XHJcbiAgICAgICAgICAgICAgICBob29rKGVsLCBkb25lKTtcclxuICAgICAgICAgICAgICAgIGlmIChob29rLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsZWF2ZShlbCwgcmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IFN0cmluZyh2bm9kZS5rZXkpO1xyXG4gICAgICAgICAgICBpZiAoZWwuX2VudGVyQ2IpIHtcclxuICAgICAgICAgICAgICAgIGVsLl9lbnRlckNiKHRydWUgLyogY2FuY2VsbGVkICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNVbm1vdW50aW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FsbEhvb2sob25CZWZvcmVMZWF2ZSwgW2VsXSk7XHJcbiAgICAgICAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fbGVhdmVDYiA9IChjYW5jZWxsZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2sob25BZnRlckxlYXZlLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID09PSB2bm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID0gdm5vZGU7XHJcbiAgICAgICAgICAgIGlmIChvbkxlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICBvbkxlYXZlKGVsLCBkb25lKTtcclxuICAgICAgICAgICAgICAgIGlmIChvbkxlYXZlLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbG9uZSh2bm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBob29rcztcclxufVxyXG4vLyB0aGUgcGxhY2Vob2xkZXIgcmVhbGx5IG9ubHkgaGFuZGxlcyBvbmUgc3BlY2lhbCBjYXNlOiBLZWVwQWxpdmVcclxuLy8gaW4gdGhlIGNhc2Ugb2YgYSBLZWVwQWxpdmUgaW4gYSBsZWF2ZSBwaGFzZSB3ZSBuZWVkIHRvIHJldHVybiBhIEtlZXBBbGl2ZVxyXG4vLyBwbGFjZWhvbGRlciB3aXRoIGVtcHR5IGNvbnRlbnQgdG8gYXZvaWQgdGhlIEtlZXBBbGl2ZSBpbnN0YW5jZSBmcm9tIGJlaW5nXHJcbi8vIHVubW91bnRlZC5cclxuZnVuY3Rpb24gZW1wdHlQbGFjZWhvbGRlcih2bm9kZSkge1xyXG4gICAgaWYgKGlzS2VlcEFsaXZlKHZub2RlKSkge1xyXG4gICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XHJcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIHJldHVybiB2bm9kZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRLZWVwQWxpdmVDaGlsZCh2bm9kZSkge1xyXG4gICAgcmV0dXJuIGlzS2VlcEFsaXZlKHZub2RlKVxyXG4gICAgICAgID8gdm5vZGUuY2hpbGRyZW5cclxuICAgICAgICAgICAgPyB2bm9kZS5jaGlsZHJlblswXVxyXG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxyXG4gICAgICAgIDogdm5vZGU7XHJcbn1cclxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCBob29rcykge1xyXG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovICYmIHZub2RlLmNvbXBvbmVudCkge1xyXG4gICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgaG9va3MpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgIHZub2RlLnNzQ29udGVudC50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NDb250ZW50KTtcclxuICAgICAgICB2bm9kZS5zc0ZhbGxiYWNrLnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0ZhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZub2RlLnRyYW5zaXRpb24gPSBob29rcztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGRyZW4sIGtlZXBDb21tZW50ID0gZmFsc2UpIHtcclxuICAgIGxldCByZXQgPSBbXTtcclxuICAgIGxldCBrZXllZEZyYWdtZW50Q291bnQgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgLy8gaGFuZGxlIGZyYWdtZW50IGNoaWxkcmVuIGNhc2UsIGUuZy4gdi1mb3JcclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgaWYgKGNoaWxkLnBhdGNoRmxhZyAmIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLylcclxuICAgICAgICAgICAgICAgIGtleWVkRnJhZ21lbnRDb3VudCsrO1xyXG4gICAgICAgICAgICByZXQgPSByZXQuY29uY2F0KGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihjaGlsZC5jaGlsZHJlbiwga2VlcENvbW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29tbWVudCBwbGFjZWhvbGRlcnMgc2hvdWxkIGJlIHNraXBwZWQsIGUuZy4gdi1pZlxyXG4gICAgICAgIGVsc2UgaWYgKGtlZXBDb21tZW50IHx8IGNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vICMxMTI2IGlmIGEgdHJhbnNpdGlvbiBjaGlsZHJlbiBsaXN0IGNvbnRhaW5zIG11bHRpcGxlIHN1YiBmcmFnbWVudHMsIHRoZXNlXHJcbiAgICAvLyBmcmFnbWVudHMgd2lsbCBiZSBtZXJnZWQgaW50byBhIGZsYXQgY2hpbGRyZW4gYXJyYXkuIFNpbmNlIGVhY2ggdi1mb3JcclxuICAgIC8vIGZyYWdtZW50IG1heSBjb250YWluIGRpZmZlcmVudCBzdGF0aWMgYmluZGluZ3MgaW5zaWRlLCB3ZSBuZWVkIHRvIGRlLXRvcFxyXG4gICAgLy8gdGhlc2UgY2hpbGRyZW4gdG8gZm9yY2UgZnVsbCBkaWZmcyB0byBlbnN1cmUgY29ycmVjdCBiZWhhdmlvci5cclxuICAgIGlmIChrZXllZEZyYWdtZW50Q291bnQgPiAxKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmV0W2ldLnBhdGNoRmxhZyA9IC0yIC8qIEJBSUwgKi87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG5jb25zdCBpc0tlZXBBbGl2ZSA9ICh2bm9kZSkgPT4gdm5vZGUudHlwZS5fX2lzS2VlcEFsaXZlO1xyXG5jb25zdCBLZWVwQWxpdmVJbXBsID0ge1xyXG4gICAgbmFtZTogYEtlZXBBbGl2ZWAsXHJcbiAgICAvLyBNYXJrZXIgZm9yIHNwZWNpYWwgaGFuZGxpbmcgaW5zaWRlIHRoZSByZW5kZXJlci4gV2UgYXJlIG5vdCB1c2luZyBhID09PVxyXG4gICAgLy8gY2hlY2sgZGlyZWN0bHkgb24gS2VlcEFsaXZlIGluIHRoZSByZW5kZXJlciwgYmVjYXVzZSBpbXBvcnRpbmcgaXQgZGlyZWN0bHlcclxuICAgIC8vIHdvdWxkIHByZXZlbnQgaXQgZnJvbSBiZWluZyB0cmVlLXNoYWtlbi5cclxuICAgIF9faXNLZWVwQWxpdmU6IHRydWUsXHJcbiAgICBpbmhlcml0UmVmOiB0cnVlLFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBpbmNsdWRlOiBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XSxcclxuICAgICAgICBleGNsdWRlOiBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XSxcclxuICAgICAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cclxuICAgIH0sXHJcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XHJcbiAgICAgICAgY29uc3QgY2FjaGUgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoKTtcclxuICAgICAgICBsZXQgY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBjb25zdCBwYXJlbnRTdXNwZW5zZSA9IGluc3RhbmNlLnN1c3BlbnNlO1xyXG4gICAgICAgIC8vIEtlZXBBbGl2ZSBjb21tdW5pY2F0ZXMgd2l0aCB0aGUgaW5zdGFudGlhdGVkIHJlbmRlcmVyIHZpYSB0aGVcclxuICAgICAgICAvLyBjdHggd2hlcmUgdGhlIHJlbmRlcmVyIHBhc3NlcyBpbiBpdHMgaW50ZXJuYWxzLFxyXG4gICAgICAgIC8vIGFuZCB0aGUgS2VlcEFsaXZlIGluc3RhbmNlIGV4cG9zZXMgYWN0aXZhdGUvZGVhY3RpdmF0ZSBpbXBsZW1lbnRhdGlvbnMuXHJcbiAgICAgICAgLy8gVGhlIHdob2xlIHBvaW50IG9mIHRoaXMgaXMgdG8gYXZvaWQgaW1wb3J0aW5nIEtlZXBBbGl2ZSBkaXJlY3RseSBpbiB0aGVcclxuICAgICAgICAvLyByZW5kZXJlciB0byBmYWNpbGl0YXRlIHRyZWUtc2hha2luZy5cclxuICAgICAgICBjb25zdCBzaGFyZWRDb250ZXh0ID0gaW5zdGFuY2UuY3R4O1xyXG4gICAgICAgIGNvbnN0IHsgcmVuZGVyZXI6IHsgcDogcGF0Y2gsIG06IG1vdmUsIHVtOiBfdW5tb3VudCwgbzogeyBjcmVhdGVFbGVtZW50IH0gfSB9ID0gc2hhcmVkQ29udGV4dDtcclxuICAgICAgICBjb25zdCBzdG9yYWdlQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgc2hhcmVkQ29udGV4dC5hY3RpdmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgIG1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIEVOVEVSICovLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIC8vIGluIGNhc2UgcHJvcHMgaGF2ZSBjaGFuZ2VkXHJcbiAgICAgICAgICAgIHBhdGNoKGluc3RhbmNlLnZub2RlLCB2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0RlYWN0aXZhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlLmEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZU1vdW50ZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodm5vZGVIb29rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgaW5zdGFuY2UucGFyZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNoYXJlZENvbnRleHQuZGVhY3RpdmF0ZSA9ICh2bm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcclxuICAgICAgICAgICAgbW92ZSh2bm9kZSwgc3RvcmFnZUNvbnRhaW5lciwgbnVsbCwgMSAvKiBMRUFWRSAqLywgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UuZGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZVVubW91bnRlZDtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZUhvb2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZS5wYXJlbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzRGVhY3RpdmF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmdW5jdGlvbiB1bm1vdW50KHZub2RlKSB7XHJcbiAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBzaGFwZUZsYWcgc28gaXQgY2FuIGJlIHByb3Blcmx5IHVubW91bnRlZFxyXG4gICAgICAgICAgICByZXNldFNoYXBlRmxhZyh2bm9kZSk7XHJcbiAgICAgICAgICAgIF91bm1vdW50KHZub2RlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBwcnVuZUNhY2hlKGZpbHRlcikge1xyXG4gICAgICAgICAgICBjYWNoZS5mb3JFYWNoKCh2bm9kZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gZ2V0TmFtZSh2bm9kZS50eXBlKTtcclxuICAgICAgICAgICAgICAgIGlmIChuYW1lICYmICghZmlsdGVyIHx8ICFmaWx0ZXIobmFtZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkoa2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnQgfHwgY2FjaGVkLnR5cGUgIT09IGN1cnJlbnQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChjYWNoZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgYWN0aXZlIGluc3RhbmNlIHNob3VsZCBubyBsb25nZXIgYmUga2VwdC1hbGl2ZS5cclxuICAgICAgICAgICAgICAgIC8vIHdlIGNhbid0IHVubW91bnQgaXQgbm93IGJ1dCBpdCBtaWdodCBiZSBsYXRlciwgc28gcmVzZXQgaXRzIGZsYWcgbm93LlxyXG4gICAgICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcoY3VycmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FjaGUuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgIGtleXMuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHBydW5lIGNhY2hlIG9uIGluY2x1ZGUvZXhjbHVkZSBwcm9wIGNoYW5nZVxyXG4gICAgICAgIHdhdGNoKCgpID0+IFtwcm9wcy5pbmNsdWRlLCBwcm9wcy5leGNsdWRlXSwgKFtpbmNsdWRlLCBleGNsdWRlXSkgPT4ge1xyXG4gICAgICAgICAgICBpbmNsdWRlICYmIHBydW5lQ2FjaGUobmFtZSA9PiBtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKTtcclxuICAgICAgICAgICAgZXhjbHVkZSAmJiBwcnVuZUNhY2hlKG5hbWUgPT4gIW1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpO1xyXG4gICAgICAgIH0sIFxyXG4gICAgICAgIC8vIHBydW5lIHBvc3QtcmVuZGVyIGFmdGVyIGBjdXJyZW50YCBoYXMgYmVlbiB1cGRhdGVkXHJcbiAgICAgICAgeyBmbHVzaDogJ3Bvc3QnIH0pO1xyXG4gICAgICAgIC8vIGNhY2hlIHN1YiB0cmVlIGFmdGVyIHJlbmRlclxyXG4gICAgICAgIGxldCBwZW5kaW5nQ2FjaGVLZXkgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlU3VidHJlZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gZml4ICMxNjIxLCB0aGUgcGVuZGluZ0NhY2hlS2V5IGNvdWxkIGJlIDBcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmdDYWNoZUtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQocGVuZGluZ0NhY2hlS2V5LCBnZXRJbm5lckNoaWxkKGluc3RhbmNlLnN1YlRyZWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgb25Nb3VudGVkKGNhY2hlU3VidHJlZSk7XHJcbiAgICAgICAgb25VcGRhdGVkKGNhY2hlU3VidHJlZSk7XHJcbiAgICAgICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcclxuICAgICAgICAgICAgY2FjaGUuZm9yRWFjaChjYWNoZWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdWJUcmVlLCBzdXNwZW5zZSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2bm9kZSA9IGdldElubmVyQ2hpbGQoc3ViVHJlZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkLnR5cGUgPT09IHZub2RlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGluc3RhbmNlIHdpbGwgYmUgdW5tb3VudGVkIGFzIHBhcnQgb2Yga2VlcC1hbGl2ZSdzIHVubW91bnRcclxuICAgICAgICAgICAgICAgICAgICByZXNldFNoYXBlRmxhZyh2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGludm9rZSBpdHMgZGVhY3RpdmF0ZWQgaG9vayBoZXJlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGEgPSB2bm9kZS5jb21wb25lbnQuZGE7XHJcbiAgICAgICAgICAgICAgICAgICAgZGEgJiYgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRhLCBzdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdW5tb3VudChjYWNoZWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIXNsb3RzLmRlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCByYXdWTm9kZSA9IGNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEtlZXBBbGl2ZSBzaG91bGQgY29udGFpbiBleGFjdGx5IG9uZSBjb21wb25lbnQgY2hpbGQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghaXNWTm9kZShyYXdWTm9kZSkgfHxcclxuICAgICAgICAgICAgICAgICghKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICEocmF3Vk5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSkpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB2bm9kZSA9IGdldElubmVyQ2hpbGQocmF3Vk5vZGUpO1xyXG4gICAgICAgICAgICBjb25zdCBjb21wID0gdm5vZGUudHlwZTtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldE5hbWUoY29tcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaW5jbHVkZSwgZXhjbHVkZSwgbWF4IH0gPSBwcm9wcztcclxuICAgICAgICAgICAgaWYgKChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XHJcbiAgICAgICAgICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdm5vZGU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qga2V5ID0gdm5vZGUua2V5ID09IG51bGwgPyBjb21wIDogdm5vZGUua2V5O1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWRWTm9kZSA9IGNhY2hlLmdldChrZXkpO1xyXG4gICAgICAgICAgICAvLyBjbG9uZSB2bm9kZSBpZiBpdCdzIHJldXNlZCBiZWNhdXNlIHdlIGFyZSBnb2luZyB0byBtdXRhdGUgaXRcclxuICAgICAgICAgICAgaWYgKHZub2RlLmVsKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd1ZOb2RlLnNzQ29udGVudCA9IHZub2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICMxNTEzIGl0J3MgcG9zc2libGUgZm9yIHRoZSByZXR1cm5lZCB2bm9kZSB0byBiZSBjbG9uZWQgZHVlIHRvIGF0dHJcclxuICAgICAgICAgICAgLy8gZmFsbHRocm91Z2ggb3Igc2NvcGVJZCwgc28gdGhlIHZub2RlIGhlcmUgbWF5IG5vdCBiZSB0aGUgZmluYWwgdm5vZGVcclxuICAgICAgICAgICAgLy8gdGhhdCBpcyBtb3VudGVkLiBJbnN0ZWFkIG9mIGNhY2hpbmcgaXQgZGlyZWN0bHksIHdlIHN0b3JlIHRoZSBwZW5kaW5nXHJcbiAgICAgICAgICAgIC8vIGtleSBhbmQgY2FjaGUgYGluc3RhbmNlLnN1YlRyZWVgICh0aGUgbm9ybWFsaXplZCB2bm9kZSkgaW5cclxuICAgICAgICAgICAgLy8gYmVmb3JlTW91bnQvYmVmb3JlVXBkYXRlIGhvb2tzLlxyXG4gICAgICAgICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBrZXk7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZWRWTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29weSBvdmVyIG1vdW50ZWQgc3RhdGVcclxuICAgICAgICAgICAgICAgIHZub2RlLmVsID0gY2FjaGVkVk5vZGUuZWw7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5jb21wb25lbnQgPSBjYWNoZWRWTm9kZS5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodm5vZGUudHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IHVwZGF0ZSB0cmFuc2l0aW9uIGhvb2tzIG9uIHN1YlRyZWVcclxuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIHZub2RlLnRyYW5zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgdm5vZGUgYmVpbmcgbW91bnRlZCBhcyBmcmVzaFxyXG4gICAgICAgICAgICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDUxMiAvKiBDT01QT05FTlRfS0VQVF9BTElWRSAqLztcclxuICAgICAgICAgICAgICAgIC8vIG1ha2UgdGhpcyBrZXkgdGhlIGZyZXNoZXN0XHJcbiAgICAgICAgICAgICAgICBrZXlzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAga2V5cy5hZGQoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGtleXMuYWRkKGtleSk7XHJcbiAgICAgICAgICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcclxuICAgICAgICAgICAgICAgIGlmIChtYXggJiYga2V5cy5zaXplID4gcGFyc2VJbnQobWF4LCAxMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoa2V5cy52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGF2b2lkIHZub2RlIGJlaW5nIHVubW91bnRlZFxyXG4gICAgICAgICAgICB2bm9kZS5zaGFwZUZsYWcgfD0gMjU2IC8qIENPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcclxuICAgICAgICAgICAgY3VycmVudCA9IHZub2RlO1xyXG4gICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufTtcclxuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXHJcbi8vIGFsc28gdG8gYXZvaWQgaW5saW5lIGltcG9ydCgpIGluIGdlbmVyYXRlZCBkLnRzIGZpbGVzXHJcbmNvbnN0IEtlZXBBbGl2ZSA9IEtlZXBBbGl2ZUltcGw7XHJcbmZ1bmN0aW9uIGdldE5hbWUoY29tcCkge1xyXG4gICAgcmV0dXJuIGNvbXAuZGlzcGxheU5hbWUgfHwgY29tcC5uYW1lO1xyXG59XHJcbmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkge1xyXG4gICAgaWYgKGlzQXJyYXkocGF0dGVybikpIHtcclxuICAgICAgICByZXR1cm4gcGF0dGVybi5zb21lKChwKSA9PiBtYXRjaGVzKHAsIG5hbWUpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU3RyaW5nKHBhdHRlcm4pKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwYXR0ZXJuLnRlc3QpIHtcclxuICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpO1xyXG4gICAgfVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBvbkFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcclxuICAgIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImFcIiAvKiBBQ1RJVkFURUQgKi8sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gb25EZWFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcclxuICAgIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImRhXCIgLyogREVBQ1RJVkFURUQgKi8sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIHR5cGUsIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgLy8gY2FjaGUgdGhlIGRlYWN0aXZhdGUgYnJhbmNoIGNoZWNrIHdyYXBwZXIgZm9yIGluamVjdGVkIGhvb2tzIHNvIHRoZSBzYW1lXHJcbiAgICAvLyBob29rIGNhbiBiZSBwcm9wZXJseSBkZWR1cGVkIGJ5IHRoZSBzY2hlZHVsZXIuIFwiX193ZGNcIiBzdGFuZHMgZm9yIFwid2l0aFxyXG4gICAgLy8gZGVhY3RpdmF0aW9uIGNoZWNrXCIuXHJcbiAgICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZGMgfHxcclxuICAgICAgICAoaG9vay5fX3dkYyA9ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gb25seSBmaXJlIHRoZSBob29rIGlmIHRoZSB0YXJnZXQgaW5zdGFuY2UgaXMgTk9UIGluIGEgZGVhY3RpdmF0ZWQgYnJhbmNoLlxyXG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IHRhcmdldDtcclxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmlzRGVhY3RpdmF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaG9vaygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgaW5qZWN0SG9vayh0eXBlLCB3cmFwcGVkSG9vaywgdGFyZ2V0KTtcclxuICAgIC8vIEluIGFkZGl0aW9uIHRvIHJlZ2lzdGVyaW5nIGl0IG9uIHRoZSB0YXJnZXQgaW5zdGFuY2UsIHdlIHdhbGsgdXAgdGhlIHBhcmVudFxyXG4gICAgLy8gY2hhaW4gYW5kIHJlZ2lzdGVyIGl0IG9uIGFsbCBhbmNlc3RvciBpbnN0YW5jZXMgdGhhdCBhcmUga2VlcC1hbGl2ZSByb290cy5cclxuICAgIC8vIFRoaXMgYXZvaWRzIHRoZSBuZWVkIHRvIHdhbGsgdGhlIGVudGlyZSBjb21wb25lbnQgdHJlZSB3aGVuIGludm9raW5nIHRoZXNlXHJcbiAgICAvLyBob29rcywgYW5kIG1vcmUgaW1wb3J0YW50bHksIGF2b2lkcyB0aGUgbmVlZCB0byB0cmFjayBjaGlsZCBjb21wb25lbnRzIGluXHJcbiAgICAvLyBhcnJheXMuXHJcbiAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQucGFyZW50O1xyXG4gICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQucGFyZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChpc0tlZXBBbGl2ZShjdXJyZW50LnBhcmVudC52bm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIGluamVjdFRvS2VlcEFsaXZlUm9vdCh3cmFwcGVkSG9vaywgdHlwZSwgdGFyZ2V0LCBjdXJyZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGluamVjdFRvS2VlcEFsaXZlUm9vdChob29rLCB0eXBlLCB0YXJnZXQsIGtlZXBBbGl2ZVJvb3QpIHtcclxuICAgIC8vIGluamVjdEhvb2sgd3JhcHMgdGhlIG9yaWdpbmFsIGZvciBlcnJvciBoYW5kbGluZywgc28gbWFrZSBzdXJlIHRvIHJlbW92ZVxyXG4gICAgLy8gdGhlIHdyYXBwZWQgdmVyc2lvbi5cclxuICAgIGNvbnN0IGluamVjdGVkID0gaW5qZWN0SG9vayh0eXBlLCBob29rLCBrZWVwQWxpdmVSb290LCB0cnVlIC8qIHByZXBlbmQgKi8pO1xyXG4gICAgb25Vbm1vdW50ZWQoKCkgPT4ge1xyXG4gICAgICAgIHJlbW92ZShrZWVwQWxpdmVSb290W3R5cGVdLCBpbmplY3RlZCk7XHJcbiAgICB9LCB0YXJnZXQpO1xyXG59XHJcbmZ1bmN0aW9uIHJlc2V0U2hhcGVGbGFnKHZub2RlKSB7XHJcbiAgICBsZXQgc2hhcGVGbGFnID0gdm5vZGUuc2hhcGVGbGFnO1xyXG4gICAgaWYgKHNoYXBlRmxhZyAmIDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcclxuICAgICAgICBzaGFwZUZsYWcgLT0gMjU2IC8qIENPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcclxuICAgIH1cclxuICAgIGlmIChzaGFwZUZsYWcgJiA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi8pIHtcclxuICAgICAgICBzaGFwZUZsYWcgLT0gNTEyIC8qIENPTVBPTkVOVF9LRVBUX0FMSVZFICovO1xyXG4gICAgfVxyXG4gICAgdm5vZGUuc2hhcGVGbGFnID0gc2hhcGVGbGFnO1xyXG59XHJcbmZ1bmN0aW9uIGdldElubmVyQ2hpbGQodm5vZGUpIHtcclxuICAgIHJldHVybiB2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8gPyB2bm9kZS5zc0NvbnRlbnQgOiB2bm9kZTtcclxufVxuXG5jb25zdCBpc0ludGVybmFsS2V5ID0gKGtleSkgPT4ga2V5WzBdID09PSAnXycgfHwga2V5ID09PSAnJHN0YWJsZSc7XHJcbmNvbnN0IG5vcm1hbGl6ZVNsb3RWYWx1ZSA9ICh2YWx1ZSkgPT4gaXNBcnJheSh2YWx1ZSlcclxuICAgID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZOb2RlKVxyXG4gICAgOiBbbm9ybWFsaXplVk5vZGUodmFsdWUpXTtcclxuY29uc3Qgbm9ybWFsaXplU2xvdCA9IChrZXksIHJhd1Nsb3QsIGN0eCkgPT4gd2l0aEN0eCgocHJvcHMpID0+IHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY3VycmVudEluc3RhbmNlKSB7XHJcbiAgICAgICAgd2FybihgU2xvdCBcIiR7a2V5fVwiIGludm9rZWQgb3V0c2lkZSBvZiB0aGUgcmVuZGVyIGZ1bmN0aW9uOiBgICtcclxuICAgICAgICAgICAgYHRoaXMgd2lsbCBub3QgdHJhY2sgZGVwZW5kZW5jaWVzIHVzZWQgaW4gdGhlIHNsb3QuIGAgK1xyXG4gICAgICAgICAgICBgSW52b2tlIHRoZSBzbG90IGZ1bmN0aW9uIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9ybWFsaXplU2xvdFZhbHVlKHJhd1Nsb3QocHJvcHMpKTtcclxufSwgY3R4KTtcclxuY29uc3Qgbm9ybWFsaXplT2JqZWN0U2xvdHMgPSAocmF3U2xvdHMsIHNsb3RzKSA9PiB7XHJcbiAgICBjb25zdCBjdHggPSByYXdTbG90cy5fY3R4O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmF3U2xvdHMpIHtcclxuICAgICAgICBpZiAoaXNJbnRlcm5hbEtleShrZXkpKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Nsb3RzW2tleV07XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHNsb3RzW2tleV0gPSBub3JtYWxpemVTbG90KGtleSwgdmFsdWUsIGN0eCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBzbG90IFwiJHtrZXl9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBQcmVmZXIgZnVuY3Rpb24gc2xvdHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgc2xvdHNba2V5XSA9ICgpID0+IG5vcm1hbGl6ZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5jb25zdCBub3JtYWxpemVWTm9kZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNLZWVwQWxpdmUoaW5zdGFuY2Uudm5vZGUpKSB7XHJcbiAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBkZWZhdWx0IHNsb3QuIGAgK1xyXG4gICAgICAgICAgICBgUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKGNoaWxkcmVuKTtcclxuICAgIGluc3RhbmNlLnNsb3RzLmRlZmF1bHQgPSAoKSA9PiBub3JtYWxpemVkO1xyXG59O1xyXG5jb25zdCBpbml0U2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XHJcbiAgICBpZiAoaW5zdGFuY2Uudm5vZGUuc2hhcGVGbGFnICYgMzIgLyogU0xPVFNfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5zbG90cyA9IGNoaWxkcmVuO1xyXG4gICAgICAgICAgICAvLyBtYWtlIGNvbXBpbGVyIG1hcmtlciBub24tZW51bWVyYWJsZVxyXG4gICAgICAgICAgICBkZWYoY2hpbGRyZW4sICdfJywgdHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgKGluc3RhbmNlLnNsb3RzID0ge30pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpbnN0YW5jZS5zbG90cyA9IHt9O1xyXG4gICAgICAgIGlmIChjaGlsZHJlbikge1xyXG4gICAgICAgICAgICBub3JtYWxpemVWTm9kZVNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVmKGluc3RhbmNlLnNsb3RzLCBJbnRlcm5hbE9iamVjdEtleSwgMSk7XHJcbn07XHJcbmNvbnN0IHVwZGF0ZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xyXG4gICAgY29uc3QgeyB2bm9kZSwgc2xvdHMgfSA9IGluc3RhbmNlO1xyXG4gICAgbGV0IG5lZWREZWxldGlvbkNoZWNrID0gdHJ1ZTtcclxuICAgIGxldCBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSBFTVBUWV9PQko7XHJcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMzIgLyogU0xPVFNfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAvLyBjb21waWxlZCBzbG90cy5cclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBQYXJlbnQgd2FzIEhNUiB1cGRhdGVkIHNvIHNsb3QgY29udGVudCBtYXkgaGF2ZSBjaGFuZ2VkLlxyXG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgdXBkYXRlIHNsb3RzIGFuZCBtYXJrIGluc3RhbmNlIGZvciBobXIgYXMgd2VsbFxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHNsb3RzLCBjaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gMSAvKiBTVEFCTEUgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGVkIEFORCBzdGFibGUuXHJcbiAgICAgICAgICAgICAgICAvLyBubyBuZWVkIHRvIHVwZGF0ZSwgYW5kIHNraXAgc3RhbGUgc2xvdHMgcmVtb3ZhbC5cclxuICAgICAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlZCBidXQgZHluYW1pYyAodi1pZi92LWZvciBvbiBzbG90cykgLSB1cGRhdGUgc2xvdHMsIGJ1dCBza2lwXHJcbiAgICAgICAgICAgICAgICAvLyBub3JtYWxpemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHNsb3RzLCBjaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gIWNoaWxkcmVuLiRzdGFibGU7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCBzbG90cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IGNoaWxkcmVuO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY2hpbGRyZW4pIHtcclxuICAgICAgICAvLyBub24gc2xvdCBvYmplY3QgY2hpbGRyZW4gKGRpcmVjdCB2YWx1ZSkgcGFzc2VkIHRvIGEgY29tcG9uZW50XHJcbiAgICAgICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xyXG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IHsgZGVmYXVsdDogMSB9O1xyXG4gICAgfVxyXG4gICAgLy8gZGVsZXRlIHN0YWxlIHNsb3RzXHJcbiAgICBpZiAobmVlZERlbGV0aW9uQ2hlY2spIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xyXG4gICAgICAgICAgICBpZiAoIWlzSW50ZXJuYWxLZXkoa2V5KSAmJiAhKGtleSBpbiBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgc2xvdHNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcblxuLyoqXHJcblJ1bnRpbWUgaGVscGVyIGZvciBhcHBseWluZyBkaXJlY3RpdmVzIHRvIGEgdm5vZGUuIEV4YW1wbGUgdXNhZ2U6XHJcblxuY29uc3QgY29tcCA9IHJlc29sdmVDb21wb25lbnQoJ2NvbXAnKVxyXG5jb25zdCBmb28gPSByZXNvbHZlRGlyZWN0aXZlKCdmb28nKVxyXG5jb25zdCBiYXIgPSByZXNvbHZlRGlyZWN0aXZlKCdiYXInKVxyXG5cbnJldHVybiB3aXRoRGlyZWN0aXZlcyhoKGNvbXApLCBbXHJcbiAgW2ZvbywgdGhpcy54XSxcclxuICBbYmFyLCB0aGlzLnldXHJcbl0pXHJcbiovXHJcbmNvbnN0IGlzQnVpbHRJbkRpcmVjdGl2ZSA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnYmluZCxjbG9hayxlbHNlLWlmLGVsc2UsZm9yLGh0bWwsaWYsbW9kZWwsb24sb25jZSxwcmUsc2hvdyxzbG90LHRleHQnKTtcclxuZnVuY3Rpb24gdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpIHtcclxuICAgIGlmIChpc0J1aWx0SW5EaXJlY3RpdmUobmFtZSkpIHtcclxuICAgICAgICB3YXJuKCdEbyBub3QgdXNlIGJ1aWx0LWluIGRpcmVjdGl2ZSBpZHMgYXMgY3VzdG9tIGRpcmVjdGl2ZSBpZDogJyArIG5hbWUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBZGRzIGRpcmVjdGl2ZXMgdG8gYSBWTm9kZS5cclxuICovXHJcbmZ1bmN0aW9uIHdpdGhEaXJlY3RpdmVzKHZub2RlLCBkaXJlY3RpdmVzKSB7XHJcbiAgICBjb25zdCBpbnRlcm5hbEluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UgPT09IG51bGwpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybihgd2l0aERpcmVjdGl2ZXMgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgcmVuZGVyIGZ1bmN0aW9ucy5gKTtcclxuICAgICAgICByZXR1cm4gdm5vZGU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGludGVybmFsSW5zdGFuY2UucHJveHk7XHJcbiAgICBjb25zdCBiaW5kaW5ncyA9IHZub2RlLmRpcnMgfHwgKHZub2RlLmRpcnMgPSBbXSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGl2ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgW2RpciwgdmFsdWUsIGFyZywgbW9kaWZpZXJzID0gRU1QVFlfT0JKXSA9IGRpcmVjdGl2ZXNbaV07XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyKSkge1xyXG4gICAgICAgICAgICBkaXIgPSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudGVkOiBkaXIsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVkOiBkaXJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmluZGluZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGRpcixcclxuICAgICAgICAgICAgaW5zdGFuY2UsXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICBvbGRWYWx1ZTogdm9pZCAwLFxyXG4gICAgICAgICAgICBhcmcsXHJcbiAgICAgICAgICAgIG1vZGlmaWVyc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIHByZXZWTm9kZSwgaW5zdGFuY2UsIG5hbWUpIHtcclxuICAgIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycztcclxuICAgIGNvbnN0IG9sZEJpbmRpbmdzID0gcHJldlZOb2RlICYmIHByZXZWTm9kZS5kaXJzO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5kaW5ncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nc1tpXTtcclxuICAgICAgICBpZiAob2xkQmluZGluZ3MpIHtcclxuICAgICAgICAgICAgYmluZGluZy5vbGRWYWx1ZSA9IG9sZEJpbmRpbmdzW2ldLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBob29rID0gYmluZGluZy5kaXJbbmFtZV07XHJcbiAgICAgICAgaWYgKGhvb2spIHtcclxuICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgaW5zdGFuY2UsIDggLyogRElSRUNUSVZFX0hPT0sgKi8sIFtcclxuICAgICAgICAgICAgICAgIHZub2RlLmVsLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZyxcclxuICAgICAgICAgICAgICAgIHZub2RlLFxyXG4gICAgICAgICAgICAgICAgcHJldlZOb2RlXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBjcmVhdGVBcHBDb250ZXh0KCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhcHA6IG51bGwsXHJcbiAgICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgICAgIGlzTmF0aXZlVGFnOiBOTyxcclxuICAgICAgICAgICAgcGVyZm9ybWFuY2U6IGZhbHNlLFxyXG4gICAgICAgICAgICBnbG9iYWxQcm9wZXJ0aWVzOiB7fSxcclxuICAgICAgICAgICAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiB7fSxcclxuICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50OiBOTyxcclxuICAgICAgICAgICAgZXJyb3JIYW5kbGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHdhcm5IYW5kbGVyOiB1bmRlZmluZWRcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1peGluczogW10sXHJcbiAgICAgICAgY29tcG9uZW50czoge30sXHJcbiAgICAgICAgZGlyZWN0aXZlczoge30sXHJcbiAgICAgICAgcHJvdmlkZXM6IE9iamVjdC5jcmVhdGUobnVsbClcclxuICAgIH07XHJcbn1cclxubGV0IHVpZCA9IDA7XHJcbmZ1bmN0aW9uIGNyZWF0ZUFwcEFQSShyZW5kZXIsIGh5ZHJhdGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVBcHAocm9vdENvbXBvbmVudCwgcm9vdFByb3BzID0gbnVsbCkge1xyXG4gICAgICAgIGlmIChyb290UHJvcHMgIT0gbnVsbCAmJiAhaXNPYmplY3Qocm9vdFByb3BzKSkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybihgcm9vdCBwcm9wcyBwYXNzZWQgdG8gYXBwLm1vdW50KCkgbXVzdCBiZSBhbiBvYmplY3QuYCk7XHJcbiAgICAgICAgICAgIHJvb3RQcm9wcyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XHJcbiAgICAgICAgY29uc3QgaW5zdGFsbGVkUGx1Z2lucyA9IG5ldyBTZXQoKTtcclxuICAgICAgICBsZXQgaXNNb3VudGVkID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgYXBwID0gKGNvbnRleHQuYXBwID0ge1xyXG4gICAgICAgICAgICBfdWlkOiB1aWQrKyxcclxuICAgICAgICAgICAgX2NvbXBvbmVudDogcm9vdENvbXBvbmVudCxcclxuICAgICAgICAgICAgX3Byb3BzOiByb290UHJvcHMsXHJcbiAgICAgICAgICAgIF9jb250YWluZXI6IG51bGwsXHJcbiAgICAgICAgICAgIF9jb250ZXh0OiBjb250ZXh0LFxyXG4gICAgICAgICAgICB2ZXJzaW9uLFxyXG4gICAgICAgICAgICBnZXQgY29uZmlnKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29uZmlnO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQgY29uZmlnKHYpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBhcHAuY29uZmlnIGNhbm5vdCBiZSByZXBsYWNlZC4gTW9kaWZ5IGluZGl2aWR1YWwgb3B0aW9ucyBpbnN0ZWFkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1c2UocGx1Z2luLCAuLi5vcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5oYXMocGx1Z2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBQbHVnaW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwbHVnaW4gJiYgaXNGdW5jdGlvbihwbHVnaW4uaW5zdGFsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbi5pbnN0YWxsKGFwcCwgLi4ub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHBsdWdpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbihhcHAsIC4uLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQSBwbHVnaW4gbXVzdCBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgd2l0aCBhbiBcImluc3RhbGxcIiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGZ1bmN0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWl4aW4obWl4aW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0Lm1peGlucy5pbmNsdWRlcyhtaXhpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5taXhpbnMucHVzaChtaXhpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdsb2JhbCBtaXhpbiB3aXRoIHByb3BzL2VtaXRzIGRlLW9wdGltaXplcyBwcm9wcy9lbWl0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3JtYWxpemF0aW9uIGNhY2hpbmcuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaXhpbi5wcm9wcyB8fCBtaXhpbi5lbWl0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kZW9wdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ01peGluIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byB0YXJnZXQgYXBwJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWl4aW4ubmFtZSA/IGA6ICR7bWl4aW4ubmFtZX1gIDogJycpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKCdNaXhpbnMgYXJlIG9ubHkgYXZhaWxhYmxlIGluIGJ1aWxkcyBzdXBwb3J0aW5nIE9wdGlvbnMgQVBJJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb21wb25lbnQobmFtZSwgY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIGNvbnRleHQuY29uZmlnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29udGV4dC5jb21wb25lbnRzW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBpbiB0YXJnZXQgYXBwLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZGlyZWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29udGV4dC5kaXJlY3RpdmVzW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRGlyZWN0aXZlIFwiJHtuYW1lfVwiIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBpbiB0YXJnZXQgYXBwLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5kaXJlY3RpdmVzW25hbWVdID0gZGlyZWN0aXZlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW91bnQocm9vdENvbnRhaW5lciwgaXNIeWRyYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUocm9vdENvbXBvbmVudCwgcm9vdFByb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBhcHAgY29udGV4dCBvbiB0aGUgcm9vdCBWTm9kZS5cclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgc2V0IG9uIHRoZSByb290IGluc3RhbmNlIG9uIGluaXRpYWwgbW91bnQuXHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuYXBwQ29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSE1SIHJvb3QgcmVsb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlbG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcihjbG9uZVZOb2RlKHZub2RlKSwgcm9vdENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0h5ZHJhdGUgJiYgaHlkcmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlKHZub2RlLCByb290Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcih2bm9kZSwgcm9vdENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzTW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLl9jb250YWluZXIgPSByb290Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RDb250YWluZXIuX192dWVfYXBwX18gPSBhcHA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNJbml0QXBwKGFwcCwgdmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bm9kZS5jb21wb25lbnQucHJveHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBcHAgaGFzIGFscmVhZHkgYmVlbiBtb3VudGVkLlxcbmAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgSWYgeW91IHdhbnQgdG8gcmVtb3VudCB0aGUgc2FtZSBhcHAsIG1vdmUgeW91ciBhcHAgY3JlYXRpb24gbG9naWMgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpbnRvIGEgZmFjdG9yeSBmdW5jdGlvbiBhbmQgY3JlYXRlIGZyZXNoIGFwcCBpbnN0YW5jZXMgZm9yIGVhY2ggYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBtb3VudCAtIGUuZy4gXFxgY29uc3QgY3JlYXRlTXlBcHAgPSAoKSA9PiBjcmVhdGVBcHAoQXBwKVxcYGApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1bm1vdW50KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcihudWxsLCBhcHAuX2NvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNVbm1vdW50QXBwKGFwcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ2Fubm90IHVubW91bnQgYW4gYXBwIHRoYXQgaXMgbm90IG1vdW50ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgaW4gY29udGV4dC5wcm92aWRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEFwcCBhbHJlYWR5IHByb3ZpZGVzIHByb3BlcnR5IHdpdGgga2V5IFwiJHtTdHJpbmcoa2V5KX1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJdCB3aWxsIGJlIG92ZXJ3cml0dGVuIHdpdGggdGhlIG5ldyB2YWx1ZS5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFR5cGVTY3JpcHQgZG9lc24ndCBhbGxvdyBzeW1ib2xzIGFzIGluZGV4IHR5cGVcclxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMjQ1ODdcclxuICAgICAgICAgICAgICAgIGNvbnRleHQucHJvdmlkZXNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBhcHA7XHJcbiAgICB9O1xyXG59XG5cbmxldCBoYXNNaXNtYXRjaCA9IGZhbHNlO1xyXG5jb25zdCBpc1NWR0NvbnRhaW5lciA9IChjb250YWluZXIpID0+IC9zdmcvLnRlc3QoY29udGFpbmVyLm5hbWVzcGFjZVVSSSkgJiYgY29udGFpbmVyLnRhZ05hbWUgIT09ICdmb3JlaWduT2JqZWN0JztcclxuY29uc3QgaXNDb21tZW50ID0gKG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDggLyogQ09NTUVOVCAqLztcclxuLy8gTm90ZTogaHlkcmF0aW9uIGlzIERPTS1zcGVjaWZpY1xyXG4vLyBCdXQgd2UgaGF2ZSB0byBwbGFjZSBpdCBpbiBjb3JlIGR1ZSB0byB0aWdodCBjb3VwbGluZyB3aXRoIGNvcmUgLSBzcGxpdHRpbmdcclxuLy8gaXQgb3V0IGNyZWF0ZXMgYSB0b24gb2YgdW5uZWNlc3NhcnkgY29tcGxleGl0eS5cclxuLy8gSHlkcmF0aW9uIGFsc28gZGVwZW5kcyBvbiBzb21lIHJlbmRlcmVyIGludGVybmFsIGxvZ2ljIHdoaWNoIG5lZWRzIHRvIGJlXHJcbi8vIHBhc3NlZCBpbiB2aWEgYXJndW1lbnRzLlxyXG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMocmVuZGVyZXJJbnRlcm5hbHMpIHtcclxuICAgIGNvbnN0IHsgbXQ6IG1vdW50Q29tcG9uZW50LCBwOiBwYXRjaCwgbzogeyBwYXRjaFByb3AsIG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCByZW1vdmUsIGluc2VydCwgY3JlYXRlQ29tbWVudCB9IH0gPSByZW5kZXJlckludGVybmFscztcclxuICAgIGNvbnN0IGh5ZHJhdGUgPSAodm5vZGUsIGNvbnRhaW5lcikgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWNvbnRhaW5lci5oYXNDaGlsZE5vZGVzKCkpIHtcclxuICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBoeWRyYXRlIGV4aXN0aW5nIG1hcmt1cCBidXQgY29udGFpbmVyIGlzIGVtcHR5LiBgICtcclxuICAgICAgICAgICAgICAgIGBQZXJmb3JtaW5nIGZ1bGwgbW91bnQgaW5zdGVhZC5gKTtcclxuICAgICAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaGFzTWlzbWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICBoeWRyYXRlTm9kZShjb250YWluZXIuZmlyc3RDaGlsZCwgdm5vZGUsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XHJcbiAgICAgICAgaWYgKGhhc01pc21hdGNoICYmICFmYWxzZSkge1xyXG4gICAgICAgICAgICAvLyB0aGlzIGVycm9yIHNob3VsZCBzaG93IHVwIGluIHByb2R1Y3Rpb25cclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgSHlkcmF0aW9uIGNvbXBsZXRlZCBidXQgY29udGFpbnMgbWlzbWF0Y2hlcy5gKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZU5vZGUgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXNGcmFnbWVudFN0YXJ0ID0gaXNDb21tZW50KG5vZGUpICYmIG5vZGUuZGF0YSA9PT0gJ1snO1xyXG4gICAgICAgIGNvbnN0IG9uTWlzbWF0Y2ggPSAoKSA9PiBoYW5kbGVNaXNtYXRjaChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNGcmFnbWVudFN0YXJ0KTtcclxuICAgICAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSB2bm9kZTtcclxuICAgICAgICBjb25zdCBkb21UeXBlID0gbm9kZS5ub2RlVHlwZTtcclxuICAgICAgICB2bm9kZS5lbCA9IG5vZGU7XHJcbiAgICAgICAgbGV0IG5leHROb2RlID0gbnVsbDtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBUZXh0OlxyXG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDMgLyogVEVYVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiB0ZXh0IG1pc21hdGNoOmAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcXG4tIENsaWVudDogJHtKU09OLnN0cmluZ2lmeShub2RlLmRhdGEpfWAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcXG4tIFNlcnZlcjogJHtKU09OLnN0cmluZ2lmeSh2bm9kZS5jaGlsZHJlbil9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWVudDpcclxuICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4IC8qIENPTU1FTlQgKi8gfHwgaXNGcmFnbWVudFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU3RhdGljOlxyXG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDEgLyogRUxFTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIGFuY2hvciwgYWRvcHQgY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgc3RhdGljIHZub2RlIGhhcyBpdHMgY29udGVudCBzdHJpcHBlZCBkdXJpbmcgYnVpbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRvcHQgaXQgZnJvbSB0aGUgc2VydmVyLXJlbmRlcmVkIEhUTUwuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmVlZFRvQWRvcHRDb250ZW50ID0gIXZub2RlLmNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZub2RlLnN0YXRpY0NvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRUb0Fkb3B0Q29udGVudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuICs9IG5leHROb2RlLm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHZub2RlLnN0YXRpY0NvdW50IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhuZXh0Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZyYWdtZW50OlxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0ZyYWdtZW50U3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaHlkcmF0ZUZyYWdtZW50KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDEgLyogRUxFTUVOVCAqLyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS50eXBlICE9PSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaHlkcmF0ZUVsZW1lbnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHNldHRpbmcgdXAgdGhlIHJlbmRlciBlZmZlY3QsIGlmIHRoZSBpbml0aWFsIHZub2RlIGFscmVhZHlcclxuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgLmVsIHNldCwgdGhlIGNvbXBvbmVudCB3aWxsIHBlcmZvcm0gaHlkcmF0aW9uIGluc3RlYWQgb2YgbW91bnRcclxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBpdHMgc3ViLXRyZWUuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoeWRyYXRlQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VudENvbXBvbmVudCh2bm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihjb250YWluZXIpLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXN5bmMgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9hZEFzeW5jID0gdm5vZGUudHlwZS5fX2FzeW5jTG9hZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2FkQXN5bmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEFzeW5jKCkudGhlbihoeWRyYXRlQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGVDb21wb25lbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBiZSBhc3luYywgc28gaW4gdGhlIGNhc2Ugb2YgZnJhZ21lbnRzIHdlIGNhbm5vdCByZWx5XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb24gY29tcG9uZW50J3MgcmVuZGVyZWQgb3V0cHV0IHRvIGRldGVybWluZSB0aGUgZW5kIG9mIHRoZSBmcmFnbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluc3RlYWQsIHdlIGRvIGEgbG9va2FoZWFkIHRvIGZpbmQgdGhlIGVuZCBhbmNob3Igbm9kZS5cclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGlzRnJhZ21lbnRTdGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvcihub2RlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gOCAvKiBDT01NRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVDaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIHNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihwYXJlbnROb2RlKG5vZGUpKSwgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBIb3N0Vk5vZGUgdHlwZTonLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVmICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHNldFJlZihyZWYsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHROb2RlO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGh5ZHJhdGVFbGVtZW50ID0gKGVsLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IHsgcHJvcHMsIHBhdGNoRmxhZywgc2hhcGVGbGFnLCBkaXJzIH0gPSB2bm9kZTtcclxuICAgICAgICAvLyBza2lwIHByb3BzICYgY2hpbGRyZW4gaWYgdGhpcyBpcyBob2lzdGVkIHN0YXRpYyBub2Rlc1xyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgIT09IC0xIC8qIEhPSVNURUQgKi8pIHtcclxuICAgICAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2NyZWF0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICBpZiAocHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghb3B0aW1pemVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi8gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgMzIgLyogSFlEUkFURV9FVkVOVFMgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJvcChrZXkpICYmIGlzT24oa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hQcm9wKGVsLCBrZXksIG51bGwsIHByb3BzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMub25DbGljaykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZhc3QgcGF0aCBmb3IgY2xpY2sgbGlzdGVuZXJzICh3aGljaCBpcyBtb3N0IG9mdGVuKSB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGluZyB0aHJvdWdoIHByb3BzLlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoUHJvcChlbCwgJ29uQ2xpY2snLCBudWxsLCBwcm9wcy5vbkNsaWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB2bm9kZSAvIGRpcmVjdGl2ZSBob29rc1xyXG4gICAgICAgICAgICBsZXQgdm5vZGVIb29rcztcclxuICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2tzID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVNb3VudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSB8fCBkaXJzKSB7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGVIb29rcyAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdtb3VudGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY2hpbGRyZW5cclxuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovICYmXHJcbiAgICAgICAgICAgICAgICAvLyBza2lwIGlmIGVsZW1lbnQgaGFzIGlubmVySFRNTCAvIHRleHRDb250ZW50XHJcbiAgICAgICAgICAgICAgICAhKHByb3BzICYmIChwcm9wcy5pbm5lckhUTUwgfHwgcHJvcHMudGV4dENvbnRlbnQpKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBoeWRyYXRlQ2hpbGRyZW4oZWwuZmlyc3RDaGlsZCwgdm5vZGUsIGVsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzV2FybmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBpbiA8JHt2bm9kZS50eXBlfT46IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIG1vcmUgY2hpbGQgbm9kZXMgdGhhbiBjbGllbnQgdmRvbS5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIFNTUmVkIERPTSBjb250YWlucyBtb3JlIG5vZGVzIHRoYW4gaXQgc2hvdWxkLiBSZW1vdmUgdGhlbS5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXIgPSBuZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShjdXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsLnRleHRDb250ZW50ICE9PSB2bm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIHRleHQgY29udGVudCBtaXNtYXRjaCBpbiA8JHt2bm9kZS50eXBlfT46XFxuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLSBDbGllbnQ6ICR7ZWwudGV4dENvbnRlbnR9XFxuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLSBTZXJ2ZXI6ICR7dm5vZGUuY2hpbGRyZW59YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWwubmV4dFNpYmxpbmc7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZUNoaWxkcmVuID0gKG5vZGUsIHBhcmVudFZOb2RlLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXBhcmVudFZOb2RlLmR5bmFtaWNDaGlsZHJlbjtcclxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHBhcmVudFZOb2RlLmNoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IGwgPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZub2RlID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNoaWxkcmVuW2ldXHJcbiAgICAgICAgICAgICAgICA6IChjaGlsZHJlbltpXSA9IG5vcm1hbGl6ZVZOb2RlKGNoaWxkcmVuW2ldKSk7XHJcbiAgICAgICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gaHlkcmF0ZU5vZGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXNXYXJuZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggaW4gPCR7Y29udGFpbmVyLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+OiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIGZld2VyIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBTU1JlZCBET00gZGlkbid0IGNvbnRhaW4gZW5vdWdoIG5vZGVzLiBNb3VudCB0aGUgbWlzc2luZyBvbmVzLlxyXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZUZyYWdtZW50ID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBwYXJlbnROb2RlKG5vZGUpO1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSBoeWRyYXRlQ2hpbGRyZW4obmV4dFNpYmxpbmcobm9kZSksIHZub2RlLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgaWYgKG5leHQgJiYgaXNDb21tZW50KG5leHQpICYmIG5leHQuZGF0YSA9PT0gJ10nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0U2libGluZygodm5vZGUuYW5jaG9yID0gbmV4dCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZnJhZ21lbnQgZGlkbid0IGh5ZHJhdGUgc3VjY2Vzc2Z1bGx5LCBzaW5jZSB3ZSBkaWRuJ3QgZ2V0IGEgZW5kIGFuY2hvclxyXG4gICAgICAgICAgICAvLyBiYWNrLiBUaGlzIHNob3VsZCBoYXZlIGxlZCB0byBub2RlL2NoaWxkcmVuIG1pc21hdGNoIHdhcm5pbmdzLlxyXG4gICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBhbmNob3IgaXMgbWlzc2luZywgd2UgbmVlZCB0byBjcmVhdGUgb25lIGFuZCBpbnNlcnQgaXRcclxuICAgICAgICAgICAgaW5zZXJ0KCh2bm9kZS5hbmNob3IgPSBjcmVhdGVDb21tZW50KGBdYCkpLCBjb250YWluZXIsIG5leHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaGFuZGxlTWlzbWF0Y2ggPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzRnJhZ21lbnQpID0+IHtcclxuICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBub2RlIG1pc21hdGNoOlxcbi0gQ2xpZW50IHZub2RlOmAsIHZub2RlLnR5cGUsIGBcXG4tIFNlcnZlciByZW5kZXJlZCBET006YCwgbm9kZSwgbm9kZS5ub2RlVHlwZSA9PT0gMyAvKiBURVhUICovXHJcbiAgICAgICAgICAgICAgICA/IGAodGV4dClgXHJcbiAgICAgICAgICAgICAgICA6IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09ICdbJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gYChzdGFydCBvZiBmcmFnbWVudClgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgYCk7XHJcbiAgICAgICAgdm5vZGUuZWwgPSBudWxsO1xyXG4gICAgICAgIGlmIChpc0ZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleGNlc3NpdmUgZnJhZ21lbnQgbm9kZXNcclxuICAgICAgICAgICAgY29uc3QgZW5kID0gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpO1xyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gZW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XHJcbiAgICAgICAgcmVtb3ZlKG5vZGUpO1xyXG4gICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIsIG5leHQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lcikpO1xyXG4gICAgICAgIHJldHVybiBuZXh0O1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvciA9IChub2RlKSA9PiB7XHJcbiAgICAgICAgbGV0IG1hdGNoID0gMDtcclxuICAgICAgICB3aGlsZSAobm9kZSkge1xyXG4gICAgICAgICAgICBub2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgIGlmIChub2RlICYmIGlzQ29tbWVudChub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gJ1snKVxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoKys7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSAnXScpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gtLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV07XHJcbn1cblxubGV0IHN1cHBvcnRlZDtcclxubGV0IHBlcmY7XHJcbmZ1bmN0aW9uIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xyXG4gICAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcclxuICAgICAgICBwZXJmLm1hcmsoYHZ1ZS0ke3R5cGV9LSR7aW5zdGFuY2UudWlkfWApO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGVuZE1lYXN1cmUoaW5zdGFuY2UsIHR5cGUpIHtcclxuICAgIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRUYWcgPSBgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YDtcclxuICAgICAgICBjb25zdCBlbmRUYWcgPSBzdGFydFRhZyArIGA6ZW5kYDtcclxuICAgICAgICBwZXJmLm1hcmsoZW5kVGFnKTtcclxuICAgICAgICBwZXJmLm1lYXN1cmUoYDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpfT4gJHt0eXBlfWAsIHN0YXJ0VGFnLCBlbmRUYWcpO1xyXG4gICAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XHJcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XHJcbiAgICBpZiAoc3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gc3VwcG9ydGVkO1xyXG4gICAgfVxyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XHJcbiAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcclxuICAgICAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc3VwcG9ydGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcclxufVxuXG4vKipcclxuICogVGhpcyBpcyBvbmx5IGNhbGxlZCBpbiBlc20tYnVuZGxlciBidWlsZHMuXHJcbiAqIEl0IGlzIGNhbGxlZCB3aGVuIGEgcmVuZGVyZXIgaXMgY3JlYXRlZCwgaW4gYGJhc2VDcmVhdGVSZW5kZXJlcmAgc28gdGhhdFxyXG4gKiBpbXBvcnRpbmcgcnVudGltZS1jb3JlIGlzIHNpZGUtZWZmZWN0cyBmcmVlLlxyXG4gKlxyXG4gKiBpc3RhbmJ1bC1pZ25vcmUtbmV4dFxyXG4gKi9cclxuZnVuY3Rpb24gaW5pdEZlYXR1cmVGbGFncygpIHtcclxuICAgIGxldCBuZWVkV2FybiA9IGZhbHNlO1xyXG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9PUFRJT05TX0FQSV9fICE9PSAnYm9vbGVhbicpIHtcclxuICAgICAgICBuZWVkV2FybiA9IHRydWU7XHJcbiAgICAgICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX09QVElPTlNfQVBJX18gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9QUk9EX0RFVlRPT0xTX18gIT09ICdib29sZWFuJykge1xyXG4gICAgICAgIG5lZWRXYXJuID0gdHJ1ZTtcclxuICAgICAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfUFJPRF9ERVZUT09MU19fID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5lZWRXYXJuKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBZb3UgYXJlIHJ1bm5pbmcgdGhlIGVzbS1idW5kbGVyIGJ1aWxkIG9mIFZ1ZS4gSXQgaXMgcmVjb21tZW5kZWQgdG8gYCArXHJcbiAgICAgICAgICAgIGBjb25maWd1cmUgeW91ciBidW5kbGVyIHRvIGV4cGxpY2l0bHkgcmVwbGFjZSBmZWF0dXJlIGZsYWcgZ2xvYmFscyBgICtcclxuICAgICAgICAgICAgYHdpdGggYm9vbGVhbiBsaXRlcmFscyB0byBnZXQgcHJvcGVyIHRyZWUtc2hha2luZyBpbiB0aGUgZmluYWwgYnVuZGxlLiBgICtcclxuICAgICAgICAgICAgYFNlZSBodHRwOi8vbGluay52dWVqcy5vcmcvZmVhdHVyZS1mbGFncyBmb3IgbW9yZSBkZXRhaWxzLmApO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IHByb2RFZmZlY3RPcHRpb25zID0ge1xyXG4gICAgc2NoZWR1bGVyOiBxdWV1ZUpvYixcclxuICAgIC8vICMxODAxLCAjMjA0MyBjb21wb25lbnQgcmVuZGVyIGVmZmVjdHMgc2hvdWxkIGFsbG93IHJlY3Vyc2l2ZSB1cGRhdGVzXHJcbiAgICBhbGxvd1JlY3Vyc2U6IHRydWVcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlRGV2RWZmZWN0T3B0aW9ucyhpbnN0YW5jZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzY2hlZHVsZXI6IHF1ZXVlSm9iLFxyXG4gICAgICAgIGFsbG93UmVjdXJzZTogdHJ1ZSxcclxuICAgICAgICBvblRyYWNrOiBpbnN0YW5jZS5ydGMgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0YywgZSkgOiB2b2lkIDAsXHJcbiAgICAgICAgb25UcmlnZ2VyOiBpbnN0YW5jZS5ydGcgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0ZywgZSkgOiB2b2lkIDBcclxuICAgIH07XHJcbn1cclxuY29uc3QgcXVldWVQb3N0UmVuZGVyRWZmZWN0ID0gIHF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlXHJcbiAgICA7XHJcbmNvbnN0IHNldFJlZiA9IChyYXdSZWYsIG9sZFJhd1JlZiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUpID0+IHtcclxuICAgIGlmIChpc0FycmF5KHJhd1JlZikpIHtcclxuICAgICAgICByYXdSZWYuZm9yRWFjaCgociwgaSkgPT4gc2V0UmVmKHIsIG9sZFJhd1JlZiAmJiAoaXNBcnJheShvbGRSYXdSZWYpID8gb2xkUmF3UmVmW2ldIDogb2xkUmF3UmVmKSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgdmFsdWU7XHJcbiAgICBpZiAoIXZub2RlKSB7XHJcbiAgICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdm5vZGUuY29tcG9uZW50LnByb3h5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2bm9kZS5lbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGk6IG93bmVyLCByOiByZWYgfSA9IHJhd1JlZjtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIW93bmVyKSB7XHJcbiAgICAgICAgd2FybihgTWlzc2luZyByZWYgb3duZXIgY29udGV4dC4gcmVmIGNhbm5vdCBiZSB1c2VkIG9uIGhvaXN0ZWQgdm5vZGVzLiBgICtcclxuICAgICAgICAgICAgYEEgdm5vZGUgd2l0aCByZWYgbXVzdCBiZSBjcmVhdGVkIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uLmApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG9sZFJlZiA9IG9sZFJhd1JlZiAmJiBvbGRSYXdSZWYucjtcclxuICAgIGNvbnN0IHJlZnMgPSBvd25lci5yZWZzID09PSBFTVBUWV9PQkogPyAob3duZXIucmVmcyA9IHt9KSA6IG93bmVyLnJlZnM7XHJcbiAgICBjb25zdCBzZXR1cFN0YXRlID0gb3duZXIuc2V0dXBTdGF0ZTtcclxuICAgIC8vIHVuc2V0IG9sZCByZWZcclxuICAgIGlmIChvbGRSZWYgIT0gbnVsbCAmJiBvbGRSZWYgIT09IHJlZikge1xyXG4gICAgICAgIGlmIChpc1N0cmluZyhvbGRSZWYpKSB7XHJcbiAgICAgICAgICAgIHJlZnNbb2xkUmVmXSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgb2xkUmVmKSkge1xyXG4gICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtvbGRSZWZdID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc1JlZihvbGRSZWYpKSB7XHJcbiAgICAgICAgICAgIG9sZFJlZi52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGlzU3RyaW5nKHJlZikpIHtcclxuICAgICAgICBjb25zdCBkb1NldCA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVmc1tyZWZdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgcmVmKSkge1xyXG4gICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtyZWZdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vICMxNzg5OiBmb3Igbm9uLW51bGwgdmFsdWVzLCBzZXQgdGhlbSBhZnRlciByZW5kZXJcclxuICAgICAgICAvLyBudWxsIHZhbHVlcyBtZWFucyB0aGlzIGlzIHVubW91bnQgYW5kIGl0IHNob3VsZCBub3Qgb3ZlcndyaXRlIGFub3RoZXJcclxuICAgICAgICAvLyByZWYgd2l0aCB0aGUgc2FtZSBrZXlcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgZG9TZXQuaWQgPSAtMTtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRvU2V0LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkb1NldCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUmVmKHJlZikpIHtcclxuICAgICAgICBjb25zdCBkb1NldCA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVmLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgZG9TZXQuaWQgPSAtMTtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRvU2V0LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkb1NldCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocmVmKSkge1xyXG4gICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhyZWYsIHBhcmVudENvbXBvbmVudCwgMTIgLyogRlVOQ1RJT05fUkVGICovLCBbXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICByZWZzXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKCdJbnZhbGlkIHRlbXBsYXRlIHJlZiB0eXBlOicsIHZhbHVlLCBgKCR7dHlwZW9mIHZhbHVlfSlgKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFRoZSBjcmVhdGVSZW5kZXJlciBmdW5jdGlvbiBhY2NlcHRzIHR3byBnZW5lcmljIGFyZ3VtZW50czpcclxuICogSG9zdE5vZGUgYW5kIEhvc3RFbGVtZW50LCBjb3JyZXNwb25kaW5nIHRvIE5vZGUgYW5kIEVsZW1lbnQgdHlwZXMgaW4gdGhlXHJcbiAqIGhvc3QgZW52aXJvbm1lbnQuIEZvciBleGFtcGxlLCBmb3IgcnVudGltZS1kb20sIEhvc3ROb2RlIHdvdWxkIGJlIHRoZSBET01cclxuICogYE5vZGVgIGludGVyZmFjZSBhbmQgSG9zdEVsZW1lbnQgd291bGQgYmUgdGhlIERPTSBgRWxlbWVudGAgaW50ZXJmYWNlLlxyXG4gKlxyXG4gKiBDdXN0b20gcmVuZGVyZXJzIGNhbiBwYXNzIGluIHRoZSBwbGF0Zm9ybSBzcGVjaWZpYyB0eXBlcyBsaWtlIHRoaXM6XHJcbiAqXHJcbiAqIGBgYCBqc1xyXG4gKiBjb25zdCB7IHJlbmRlciwgY3JlYXRlQXBwIH0gPSBjcmVhdGVSZW5kZXJlcjxOb2RlLCBFbGVtZW50Pih7XHJcbiAqICAgcGF0Y2hQcm9wLFxyXG4gKiAgIC4uLm5vZGVPcHNcclxuICogfSlcclxuICogYGBgXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJlcihvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpO1xyXG59XHJcbi8vIFNlcGFyYXRlIEFQSSBmb3IgY3JlYXRpbmcgaHlkcmF0aW9uLWVuYWJsZWQgcmVuZGVyZXIuXHJcbi8vIEh5ZHJhdGlvbiBsb2dpYyBpcyBvbmx5IHVzZWQgd2hlbiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIG1ha2luZyBpdFxyXG4vLyB0cmVlLXNoYWthYmxlLlxyXG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyk7XHJcbn1cclxuLy8gaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZucykge1xyXG4gICAgLy8gY29tcGlsZS10aW1lIGZlYXR1cmUgZmxhZ3MgY2hlY2tcclxuICAgIHtcclxuICAgICAgICBpbml0RmVhdHVyZUZsYWdzKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGluc2VydDogaG9zdEluc2VydCwgcmVtb3ZlOiBob3N0UmVtb3ZlLCBwYXRjaFByb3A6IGhvc3RQYXRjaFByb3AsIGZvcmNlUGF0Y2hQcm9wOiBob3N0Rm9yY2VQYXRjaFByb3AsIGNyZWF0ZUVsZW1lbnQ6IGhvc3RDcmVhdGVFbGVtZW50LCBjcmVhdGVUZXh0OiBob3N0Q3JlYXRlVGV4dCwgY3JlYXRlQ29tbWVudDogaG9zdENyZWF0ZUNvbW1lbnQsIHNldFRleHQ6IGhvc3RTZXRUZXh0LCBzZXRFbGVtZW50VGV4dDogaG9zdFNldEVsZW1lbnRUZXh0LCBwYXJlbnROb2RlOiBob3N0UGFyZW50Tm9kZSwgbmV4dFNpYmxpbmc6IGhvc3ROZXh0U2libGluZywgc2V0U2NvcGVJZDogaG9zdFNldFNjb3BlSWQgPSBOT09QLCBjbG9uZU5vZGU6IGhvc3RDbG9uZU5vZGUsIGluc2VydFN0YXRpY0NvbnRlbnQ6IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50IH0gPSBvcHRpb25zO1xyXG4gICAgLy8gTm90ZTogZnVuY3Rpb25zIGluc2lkZSB0aGlzIGNsb3N1cmUgc2hvdWxkIHVzZSBgY29uc3QgeHh4ID0gKCkgPT4ge31gXHJcbiAgICAvLyBzdHlsZSBpbiBvcmRlciB0byBwcmV2ZW50IGJlaW5nIGlubGluZWQgYnkgbWluaWZpZXJzLlxyXG4gICAgY29uc3QgcGF0Y2ggPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciA9IG51bGwsIHBhcmVudENvbXBvbmVudCA9IG51bGwsIHBhcmVudFN1c3BlbnNlID0gbnVsbCwgaXNTVkcgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcclxuICAgICAgICAvLyBwYXRjaGluZyAmIG5vdCBzYW1lIHR5cGUsIHVubW91bnQgb2xkIHRyZWVcclxuICAgICAgICBpZiAobjEgJiYgIWlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XHJcbiAgICAgICAgICAgIGFuY2hvciA9IGdldE5leHRIb3N0Tm9kZShuMSk7XHJcbiAgICAgICAgICAgIHVubW91bnQobjEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICBuMSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuMi5wYXRjaEZsYWcgPT09IC0yIC8qIEJBSUwgKi8pIHtcclxuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG4yLmR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcmVmLCBzaGFwZUZsYWcgfSA9IG4yO1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFRleHQ6XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzVGV4dChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1lbnQ6XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzQ29tbWVudE5vZGUobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTdGF0aWM6XHJcbiAgICAgICAgICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdW50U3RhdGljTm9kZShuMiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoU3RhdGljTm9kZShuMSwgbjIsIGNvbnRhaW5lciwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRnJhZ21lbnQ6XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzRnJhZ21lbnQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRWxlbWVudChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0NvbXBvbmVudChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDY0IC8qIFRFTEVQT1JUICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZS5wcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIGludGVybmFscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICggc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZS5wcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIGludGVybmFscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIFZOb2RlIHR5cGU6JywgdHlwZSwgYCgke3R5cGVvZiB0eXBlfSlgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2V0IHJlZlxyXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCAmJiBwYXJlbnRDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgc2V0UmVmKHJlZiwgbjEgJiYgbjEucmVmLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NUZXh0ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpID0+IHtcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KChuMi5lbCA9IGhvc3RDcmVhdGVUZXh0KG4yLmNoaWxkcmVuKSksIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gKG4yLmVsID0gbjEuZWwpO1xyXG4gICAgICAgICAgICBpZiAobjIuY2hpbGRyZW4gIT09IG4xLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NDb21tZW50Tm9kZSA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydCgobjIuZWwgPSBob3N0Q3JlYXRlQ29tbWVudChuMi5jaGlsZHJlbiB8fCAnJykpLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIHN1cHBvcnQgZm9yIGR5bmFtaWMgY29tbWVudHNcclxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW91bnRTdGF0aWNOb2RlID0gKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpID0+IHtcclxuICAgICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERldiAvIEhNUiBvbmx5XHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHBhdGNoU3RhdGljTm9kZSA9IChuMSwgbjIsIGNvbnRhaW5lciwgaXNTVkcpID0+IHtcclxuICAgICAgICAvLyBzdGF0aWMgbm9kZXMgYXJlIG9ubHkgcGF0Y2hlZCBkdXJpbmcgZGV2IGZvciBITVJcclxuICAgICAgICBpZiAobjIuY2hpbGRyZW4gIT09IG4xLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGhvc3ROZXh0U2libGluZyhuMS5hbmNob3IpO1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgZXhpc3RpbmdcclxuICAgICAgICAgICAgcmVtb3ZlU3RhdGljTm9kZShuMSk7XHJcbiAgICAgICAgICAgIFtuMi5lbCwgbjIuYW5jaG9yXSA9IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50KG4yLmNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcclxuICAgICAgICAgICAgbjIuYW5jaG9yID0gbjEuYW5jaG9yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERldiAvIEhNUiBvbmx5XHJcbiAgICAgKi9cclxuICAgIGNvbnN0IG1vdmVTdGF0aWNOb2RlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xyXG4gICAgICAgIGxldCBjdXIgPSB2bm9kZS5lbDtcclxuICAgICAgICBjb25zdCBlbmQgPSB2bm9kZS5hbmNob3I7XHJcbiAgICAgICAgd2hpbGUgKGN1ciAmJiBjdXIgIT09IGVuZCkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGN1cik7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoY3VyLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGN1ciA9IG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhvc3RJbnNlcnQoZW5kLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXYgLyBITVIgb25seVxyXG4gICAgICovXHJcbiAgICBjb25zdCByZW1vdmVTdGF0aWNOb2RlID0gKHZub2RlKSA9PiB7XHJcbiAgICAgICAgbGV0IGN1ciA9IHZub2RlLmVsO1xyXG4gICAgICAgIHdoaWxlIChjdXIgJiYgY3VyICE9PSB2bm9kZS5hbmNob3IpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGhvc3ROZXh0U2libGluZyhjdXIpO1xyXG4gICAgICAgICAgICBob3N0UmVtb3ZlKGN1cik7XHJcbiAgICAgICAgICAgIGN1ciA9IG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhvc3RSZW1vdmUodm5vZGUuYW5jaG9yKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzRWxlbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgaXNTVkcgPSBpc1NWRyB8fCBuMi50eXBlID09PSAnc3ZnJztcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBtb3VudEVsZW1lbnQobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBhdGNoRWxlbWVudChuMSwgbjIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBtb3VudEVsZW1lbnQgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgbGV0IGVsO1xyXG4gICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCBwcm9wcywgc2hhcGVGbGFnLCB0cmFuc2l0aW9uLCBzY29wZUlkLCBwYXRjaEZsYWcsIGRpcnMgfSA9IHZub2RlO1xyXG4gICAgICAgIGlmICghKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHZub2RlLmVsICYmXHJcbiAgICAgICAgICAgIGhvc3RDbG9uZU5vZGUgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBwYXRjaEZsYWcgPT09IC0xIC8qIEhPSVNURUQgKi8pIHtcclxuICAgICAgICAgICAgLy8gSWYgYSB2bm9kZSBoYXMgbm9uLW51bGwgZWwsIGl0IG1lYW5zIGl0J3MgYmVpbmcgcmV1c2VkLlxyXG4gICAgICAgICAgICAvLyBPbmx5IHN0YXRpYyB2bm9kZXMgY2FuIGJlIHJldXNlZCwgc28gaXRzIG1vdW50ZWQgRE9NIG5vZGVzIHNob3VsZCBiZVxyXG4gICAgICAgICAgICAvLyBleGFjdGx5IHRoZSBzYW1lLCBhbmQgd2UgY2FuIHNpbXBseSBkbyBhIGNsb25lIGhlcmUuXHJcbiAgICAgICAgICAgIC8vIG9ubHkgZG8gdGhpcyBpbiBwcm9kdWN0aW9uIHNpbmNlIGNsb25lZCB0cmVlcyBjYW5ub3QgYmUgSE1SIHVwZGF0ZWQuXHJcbiAgICAgICAgICAgIGVsID0gdm5vZGUuZWwgPSBob3N0Q2xvbmVOb2RlKHZub2RlLmVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsID0gdm5vZGUuZWwgPSBob3N0Q3JlYXRlRWxlbWVudCh2bm9kZS50eXBlLCBpc1NWRywgcHJvcHMgJiYgcHJvcHMuaXMpO1xyXG4gICAgICAgICAgICAvLyBtb3VudCBjaGlsZHJlbiBmaXJzdCwgc2luY2Ugc29tZSBwcm9wcyBtYXkgcmVseSBvbiBjaGlsZCBjb250ZW50XHJcbiAgICAgICAgICAgIC8vIGJlaW5nIGFscmVhZHkgcmVuZGVyZWQsIGUuZy4gYDxzZWxlY3QgdmFsdWU+YFxyXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgOCAvKiBURVhUX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoZWwsIHZub2RlLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgbW91bnRDaGlsZHJlbih2bm9kZS5jaGlsZHJlbiwgZWwsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHICYmIHR5cGUgIT09ICdmb3JlaWduT2JqZWN0Jywgb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnY3JlYXRlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgICAgIGlmIChwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBudWxsLCBwcm9wc1trZXldLCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2NvcGVJZFxyXG4gICAgICAgICAgICBzZXRTY29wZUlkKGVsLCBzY29wZUlkLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnX192bm9kZScsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB2bm9kZSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsICdfX3Z1ZVBhcmVudENvbXBvbmVudCcsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJlbnRDb21wb25lbnQsXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlTW91bnQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gIzE1ODMgRm9yIGluc2lkZSBzdXNwZW5zZSArIHN1c3BlbnNlIG5vdCByZXNvbHZlZCBjYXNlLCBlbnRlciBob29rIHNob3VsZCBjYWxsIHdoZW4gc3VzcGVuc2UgcmVzb2x2ZWRcclxuICAgICAgICAvLyAjMTY4OSBGb3IgaW5zaWRlIHN1c3BlbnNlICsgc3VzcGVuc2UgcmVzb2x2ZWQgY2FzZSwganVzdCBjYWxsIGl0XHJcbiAgICAgICAgY29uc3QgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSAoIXBhcmVudFN1c3BlbnNlIHx8IChwYXJlbnRTdXNwZW5zZSAmJiAhcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkpICYmXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcclxuICAgICAgICAgICAgIXRyYW5zaXRpb24ucGVyc2lzdGVkO1xyXG4gICAgICAgIGlmIChuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcykge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8XHJcbiAgICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIHx8XHJcbiAgICAgICAgICAgIGRpcnMpIHtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzICYmIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdtb3VudGVkJyk7XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2V0U2NvcGVJZCA9IChlbCwgc2NvcGVJZCwgdm5vZGUsIHBhcmVudENvbXBvbmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChzY29wZUlkKSB7XHJcbiAgICAgICAgICAgIGhvc3RTZXRTY29wZUlkKGVsLCBzY29wZUlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcmVudENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBjb25zdCB0cmVlT3duZXJJZCA9IHBhcmVudENvbXBvbmVudC50eXBlLl9fc2NvcGVJZDtcclxuICAgICAgICAgICAgLy8gdm5vZGUncyBvd24gc2NvcGVJZCBhbmQgdGhlIGN1cnJlbnQgcGF0Y2hlZCBjb21wb25lbnQncyBzY29wZUlkIGlzXHJcbiAgICAgICAgICAgIC8vIGRpZmZlcmVudCAtIHRoaXMgaXMgYSBzbG90IGNvbnRlbnQgbm9kZS5cclxuICAgICAgICAgICAgaWYgKHRyZWVPd25lcklkICYmIHRyZWVPd25lcklkICE9PSBzY29wZUlkKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgdHJlZU93bmVySWQgKyAnLXMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgc3ViVHJlZSA9IHBhcmVudENvbXBvbmVudC5zdWJUcmVlO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHN1YlRyZWUudHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgICAgIHN1YlRyZWUgPVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclNpbmdsZVJvb3Qoc3ViVHJlZS5jaGlsZHJlbikgfHwgc3ViVHJlZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodm5vZGUgPT09IHN1YlRyZWUpIHtcclxuICAgICAgICAgICAgICAgIHNldFNjb3BlSWQoZWwsIHBhcmVudENvbXBvbmVudC52bm9kZS5zY29wZUlkLCBwYXJlbnRDb21wb25lbnQudm5vZGUsIHBhcmVudENvbXBvbmVudC5wYXJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCBzdGFydCA9IDApID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IChjaGlsZHJlbltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjaGlsZHJlbltpXSlcclxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pKTtcclxuICAgICAgICAgICAgcGF0Y2gobnVsbCwgY2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hFbGVtZW50ID0gKG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVsID0gKG4yLmVsID0gbjEuZWwpO1xyXG4gICAgICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBkaXJzIH0gPSBuMjtcclxuICAgICAgICAvLyAjMTQyNiB0YWtlIHRoZSBvbGQgdm5vZGUncyBwYXRjaCBmbGFnIGludG8gYWNjb3VudCBzaW5jZSB1c2VyIG1heSBjbG9uZSBhXHJcbiAgICAgICAgLy8gY29tcGlsZXItZ2VuZXJhdGVkIHZub2RlLCB3aGljaCBkZS1vcHRzIHRvIEZVTExfUFJPUFNcclxuICAgICAgICBwYXRjaEZsYWcgfD0gbjEucGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLztcclxuICAgICAgICBjb25zdCBvbGRQcm9wcyA9IG4xLnByb3BzIHx8IEVNUFRZX09CSjtcclxuICAgICAgICBjb25zdCBuZXdQcm9wcyA9IG4yLnByb3BzIHx8IEVNUFRZX09CSjtcclxuICAgICAgICBsZXQgdm5vZGVIb29rO1xyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkpIHtcclxuICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlVXBkYXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgKHRydWUgKSAmJiBpc0htclVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgIC8vIEhNUiB1cGRhdGVkLCBmb3JjZSBmdWxsIGRpZmZcclxuICAgICAgICAgICAgcGF0Y2hGbGFnID0gMDtcclxuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSBwcmVzZW5jZSBvZiBhIHBhdGNoRmxhZyBtZWFucyB0aGlzIGVsZW1lbnQncyByZW5kZXIgY29kZSB3YXNcclxuICAgICAgICAgICAgLy8gZ2VuZXJhdGVkIGJ5IHRoZSBjb21waWxlciBhbmQgY2FuIHRha2UgdGhlIGZhc3QgcGF0aC5cclxuICAgICAgICAgICAgLy8gaW4gdGhpcyBwYXRoIG9sZCBub2RlIGFuZCBuZXcgbm9kZSBhcmUgZ3VhcmFudGVlZCB0byBoYXZlIHRoZSBzYW1lIHNoYXBlXHJcbiAgICAgICAgICAgIC8vIChpLmUuIGF0IHRoZSBleGFjdCBzYW1lIHBvc2l0aW9uIGluIHRoZSBzb3VyY2UgdGVtcGxhdGUpXHJcbiAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiAxNiAvKiBGVUxMX1BST1BTICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlbGVtZW50IHByb3BzIGNvbnRhaW4gZHluYW1pYyBrZXlzLCBmdWxsIGRpZmYgbmVlZGVkXHJcbiAgICAgICAgICAgICAgICBwYXRjaFByb3BzKGVsLCBuMiwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjbGFzc1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBjbGFzcyBiaW5kaW5ncy5cclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiAyIC8qIENMQVNTICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFByb3BzLmNsYXNzICE9PSBuZXdQcm9wcy5jbGFzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAnY2xhc3MnLCBudWxsLCBuZXdQcm9wcy5jbGFzcywgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHN0eWxlXHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBkeW5hbWljIHN0eWxlIGJpbmRpbmdzXHJcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgNCAvKiBTVFlMRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsICdzdHlsZScsIG9sZFByb3BzLnN0eWxlLCBuZXdQcm9wcy5zdHlsZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcHJvcHNcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgcHJvcC9hdHRyIGJpbmRpbmdzXHJcbiAgICAgICAgICAgICAgICAvLyBvdGhlciB0aGFuIGNsYXNzIGFuZCBzdHlsZS4gVGhlIGtleXMgb2YgZHluYW1pYyBwcm9wL2F0dHJzIGFyZSBzYXZlZCBmb3JcclxuICAgICAgICAgICAgICAgIC8vIGZhc3RlciBpdGVyYXRpb24uXHJcbiAgICAgICAgICAgICAgICAvLyBOb3RlIGR5bmFtaWMga2V5cyBsaWtlIDpbZm9vXT1cImJhclwiIHdpbGwgY2F1c2UgdGhpcyBvcHRpbWl6YXRpb24gdG9cclxuICAgICAgICAgICAgICAgIC8vIGJhaWwgb3V0IGFuZCBnbyB0aHJvdWdoIGEgZnVsbCBkaWZmIGJlY2F1c2Ugd2UgbmVlZCB0byB1bnNldCB0aGUgb2xkIGtleVxyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDggLyogUFJPUFMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZmxhZyBpcyBwcmVzZW50IHRoZW4gZHluYW1pY1Byb3BzIG11c3QgYmUgbm9uLW51bGxcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gbjIuZHluYW1pY1Byb3BzO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNUb1VwZGF0ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gb2xkUHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaG9zdEZvcmNlUGF0Y2hQcm9wICYmIGhvc3RGb3JjZVBhdGNoUHJvcChlbCwga2V5KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgaXNTVkcsIG4xLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHRleHRcclxuICAgICAgICAgICAgLy8gVGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgb25seSBkeW5hbWljIHRleHQgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiAxIC8qIFRFWFQgKi8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChuMS5jaGlsZHJlbiAhPT0gbjIuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoZWwsIG4yLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkICYmIGR5bmFtaWNDaGlsZHJlbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIHVub3B0aW1pemVkLCBmdWxsIGRpZmZcclxuICAgICAgICAgICAgcGF0Y2hQcm9wcyhlbCwgbjIsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhcmVDaGlsZHJlblNWRyA9IGlzU1ZHICYmIG4yLnR5cGUgIT09ICdmb3JlaWduT2JqZWN0JztcclxuICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihuMS5keW5hbWljQ2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgZWwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGFyZUNoaWxkcmVuU1ZHKTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgKHRydWUgKSAmJlxyXG4gICAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50ICYmXHJcbiAgICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnQudHlwZS5fX2htcklkKSB7XHJcbiAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCkge1xyXG4gICAgICAgICAgICAvLyBmdWxsIGRpZmZcclxuICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGVsLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBhcmVDaGlsZHJlblNWRyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZVVwZGF0ZWQpIHx8IGRpcnMpIHtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XHJcbiAgICAgICAgICAgICAgICBkaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sobjIsIG4xLCBwYXJlbnRDb21wb25lbnQsICd1cGRhdGVkJyk7XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gVGhlIGZhc3QgcGF0aCBmb3IgYmxvY2tzLlxyXG4gICAgY29uc3QgcGF0Y2hCbG9ja0NoaWxkcmVuID0gKG9sZENoaWxkcmVuLCBuZXdDaGlsZHJlbiwgZmFsbGJhY2tDb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdWTm9kZSA9IG5ld0NoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGNvbnRhaW5lciAocGFyZW50IGVsZW1lbnQpIGZvciB0aGUgcGF0Y2guXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IFxyXG4gICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGEgRnJhZ21lbnQsIHdlIG5lZWQgdG8gcHJvdmlkZSB0aGUgYWN0dWFsIHBhcmVudFxyXG4gICAgICAgICAgICAvLyBvZiB0aGUgRnJhZ21lbnQgaXRzZWxmIHNvIGl0IGNhbiBtb3ZlIGl0cyBjaGlsZHJlbi5cclxuICAgICAgICAgICAgb2xkVk5vZGUudHlwZSA9PT0gRnJhZ21lbnQgfHxcclxuICAgICAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgZGlmZmVyZW50IG5vZGVzLCB0aGVyZSBpcyBnb2luZyB0byBiZSBhIHJlcGxhY2VtZW50XHJcbiAgICAgICAgICAgICAgICAvLyB3aGljaCBhbHNvIHJlcXVpcmVzIHRoZSBjb3JyZWN0IHBhcmVudCBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICFpc1NhbWVWTm9kZVR5cGUob2xkVk5vZGUsIG5ld1ZOb2RlKSB8fFxyXG4gICAgICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIGNvbXBvbmVudCwgaXQgY291bGQgY29udGFpbiBhbnl0aGluZy5cclxuICAgICAgICAgICAgICAgIG9sZFZOb2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovIHx8XHJcbiAgICAgICAgICAgICAgICBvbGRWTm9kZS5zaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqL1xyXG4gICAgICAgICAgICAgICAgPyBob3N0UGFyZW50Tm9kZShvbGRWTm9kZS5lbClcclxuICAgICAgICAgICAgICAgIDogLy8gSW4gb3RoZXIgY2FzZXMsIHRoZSBwYXJlbnQgY29udGFpbmVyIGlzIG5vdCBhY3R1YWxseSB1c2VkIHNvIHdlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8ganVzdCBwYXNzIHRoZSBibG9jayBlbGVtZW50IGhlcmUgdG8gYXZvaWQgYSBET00gcGFyZW50Tm9kZSBjYWxsLlxyXG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBwYXRjaChvbGRWTm9kZSwgbmV3Vk5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwYXRjaFByb3BzID0gKGVsLCB2bm9kZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRykgPT4ge1xyXG4gICAgICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV3UHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIC8vIGVtcHR5IHN0cmluZyBpcyBub3QgdmFsaWQgcHJvcFxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wKGtleSkpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYgfHxcclxuICAgICAgICAgICAgICAgICAgICAoaG9zdEZvcmNlUGF0Y2hQcm9wICYmIGhvc3RGb3JjZVBhdGNoUHJvcChlbCwga2V5KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIGlzU1ZHLCB2bm9kZS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2xkUHJvcHMgIT09IEVNUFRZX09CSikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2xkUHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkgJiYgIShrZXkgaW4gbmV3UHJvcHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgb2xkUHJvcHNba2V5XSwgbnVsbCwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzRnJhZ21lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50U3RhcnRBbmNob3IgPSAobjIuZWwgPSBuMSA/IG4xLmVsIDogaG9zdENyZWF0ZVRleHQoJycpKTtcclxuICAgICAgICBjb25zdCBmcmFnbWVudEVuZEFuY2hvciA9IChuMi5hbmNob3IgPSBuMSA/IG4xLmFuY2hvciA6IGhvc3RDcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4gfSA9IG4yO1xyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgPiAwKSB7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgICAgICAvLyBITVIgdXBkYXRlZCwgZm9yY2UgZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoRmxhZyA9IDA7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KGZyYWdtZW50U3RhcnRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgaG9zdEluc2VydChmcmFnbWVudEVuZEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAvLyBhIGZyYWdtZW50IGNhbiBvbmx5IGhhdmUgYXJyYXkgY2hpbGRyZW5cclxuICAgICAgICAgICAgLy8gc2luY2UgdGhleSBhcmUgZWl0aGVyIGdlbmVyYXRlZCBieSB0aGUgY29tcGlsZXIsIG9yIGltcGxpY2l0bHkgY3JlYXRlZFxyXG4gICAgICAgICAgICAvLyBmcm9tIGFycmF5cy5cclxuICAgICAgICAgICAgbW91bnRDaGlsZHJlbihuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBmcmFnbWVudEVuZEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovICYmXHJcbiAgICAgICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIC8vIGEgc3RhYmxlIGZyYWdtZW50ICh0ZW1wbGF0ZSByb290IG9yIDx0ZW1wbGF0ZSB2LWZvcj4pIGRvZXNuJ3QgbmVlZCB0b1xyXG4gICAgICAgICAgICAgICAgLy8gcGF0Y2ggY2hpbGRyZW4gb3JkZXIsIGJ1dCBpdCBtYXkgY29udGFpbiBkeW5hbWljQ2hpbGRyZW4uXHJcbiAgICAgICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnR5cGUuX19obXJJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAgICAgLy8gIzIwODAgaWYgdGhlIHN0YWJsZSBmcmFnbWVudCBoYXMgYSBrZXksIGl0J3MgYSA8dGVtcGxhdGUgdi1mb3I+IHRoYXQgbWF5XHJcbiAgICAgICAgICAgICAgICAvLyAgZ2V0IG1vdmVkIGFyb3VuZC4gTWFrZSBzdXJlIGFsbCByb290IGxldmVsIHZub2RlcyBpbmhlcml0IGVsLlxyXG4gICAgICAgICAgICAgICAgLy8gIzIxMzQgb3IgaWYgaXQncyBhIGNvbXBvbmVudCByb290LCBpdCBtYXkgYWxzbyBnZXQgbW92ZWQgYXJvdW5kXHJcbiAgICAgICAgICAgICAgICAvLyBhcyB0aGUgY29tcG9uZW50IGlzIGJlaW5nIG1vdmVkLlxyXG4gICAgICAgICAgICAgICAgbjIua2V5ICE9IG51bGwgfHxcclxuICAgICAgICAgICAgICAgICAgICAocGFyZW50Q29tcG9uZW50ICYmIG4yID09PSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgdHJ1ZSAvKiBzaGFsbG93ICovKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGtleWVkIC8gdW5rZXllZCwgb3IgbWFudWFsIGZyYWdtZW50cy5cclxuICAgICAgICAgICAgICAgIC8vIGZvciBrZXllZCAmIHVua2V5ZWQsIHNpbmNlIHRoZXkgYXJlIGNvbXBpbGVyIGdlbmVyYXRlZCBmcm9tIHYtZm9yLFxyXG4gICAgICAgICAgICAgICAgLy8gZWFjaCBjaGlsZCBpcyBndWFyYW50ZWVkIHRvIGJlIGEgYmxvY2sgc28gdGhlIGZyYWdtZW50IHdpbGwgbmV2ZXJcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgZHluYW1pY0NoaWxkcmVuLlxyXG4gICAgICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGNvbnRhaW5lciwgZnJhZ21lbnRFbmRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NDb21wb25lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChuMi5zaGFwZUZsYWcgJiA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguYWN0aXZhdGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1vdW50Q29tcG9uZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50Q29tcG9uZW50ID0gKGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IChpbml0aWFsVk5vZGUuY29tcG9uZW50ID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UoaW5pdGlhbFZOb2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAodHJ1ZSApICYmIGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xyXG4gICAgICAgICAgICByZWdpc3RlckhNUihpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KGluaXRpYWxWTm9kZSk7XHJcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGluamVjdCByZW5kZXJlciBpbnRlcm5hbHMgZm9yIGtlZXBBbGl2ZVxyXG4gICAgICAgIGlmIChpc0tlZXBBbGl2ZShpbml0aWFsVk5vZGUpKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmN0eC5yZW5kZXJlciA9IGludGVybmFscztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcmVzb2x2ZSBwcm9wcyBhbmQgc2xvdHMgZm9yIHNldHVwIGNvbnRleHRcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0dXBDb21wb25lbnQoaW5zdGFuY2UpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2V0dXAoKSBpcyBhc3luYy4gVGhpcyBjb21wb25lbnQgcmVsaWVzIG9uIGFzeW5jIGxvZ2ljIHRvIGJlIHJlc29sdmVkXHJcbiAgICAgICAgLy8gYmVmb3JlIHByb2NlZWRpbmdcclxuICAgICAgICBpZiAoIGluc3RhbmNlLmFzeW5jRGVwKSB7XHJcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCk7XHJcbiAgICAgICAgICAgIC8vIEdpdmUgaXQgYSBwbGFjZWhvbGRlciBpZiB0aGlzIGlzIG5vdCBoeWRyYXRpb25cclxuICAgICAgICAgICAgLy8gVE9ETyBoYW5kbGUgc2VsZi1kZWZpbmVkIGZhbGxiYWNrXHJcbiAgICAgICAgICAgIGlmICghaW5pdGlhbFZOb2RlLmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IChpbnN0YW5jZS5zdWJUcmVlID0gY3JlYXRlVk5vZGUoQ29tbWVudCkpO1xyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG51bGwsIHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZXR1cFJlbmRlckVmZmVjdChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHVwZGF0ZUNvbXBvbmVudCA9IChuMSwgbjIsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gKG4yLmNvbXBvbmVudCA9IG4xLmNvbXBvbmVudCk7XHJcbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCkpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgJiZcclxuICAgICAgICAgICAgICAgICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhc3luYyAmIHN0aWxsIHBlbmRpbmcgLSBqdXN0IHVwZGF0ZSBwcm9wcyBhbmQgc2xvdHNcclxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBjb21wb25lbnQncyByZWFjdGl2ZSBlZmZlY3QgZm9yIHJlbmRlciBpc24ndCBzZXQtdXAgeWV0XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG4yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbjIsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG5vcm1hbCB1cGRhdGVcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLm5leHQgPSBuMjtcclxuICAgICAgICAgICAgICAgIC8vIGluIGNhc2UgdGhlIGNoaWxkIGNvbXBvbmVudCBpcyBhbHNvIHF1ZXVlZCwgcmVtb3ZlIGl0IHRvIGF2b2lkXHJcbiAgICAgICAgICAgICAgICAvLyBkb3VibGUgdXBkYXRpbmcgdGhlIHNhbWUgY2hpbGQgY29tcG9uZW50IGluIHRoZSBzYW1lIGZsdXNoLlxyXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0ZUpvYihpbnN0YW5jZS51cGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2UudXBkYXRlIGlzIHRoZSByZWFjdGl2ZSBlZmZlY3QgcnVubmVyLlxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG5vIHVwZGF0ZSBuZWVkZWQuIGp1c3QgY29weSBvdmVyIHByb3BlcnRpZXNcclxuICAgICAgICAgICAgbjIuY29tcG9uZW50ID0gbjEuY29tcG9uZW50O1xyXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG4yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBzZXR1cFJlbmRlckVmZmVjdCA9IChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICAvLyBjcmVhdGUgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXJpbmdcclxuICAgICAgICBpbnN0YW5jZS51cGRhdGUgPSBlZmZlY3QoZnVuY3Rpb24gY29tcG9uZW50RWZmZWN0KCkge1xyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZub2RlSG9vaztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZWwsIHByb3BzIH0gPSBpbml0aWFsVk5vZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGJtLCBtLCBwYXJlbnQgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlTW91bnQgaG9va1xyXG4gICAgICAgICAgICAgICAgaWYgKGJtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoYm0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZUJlZm9yZU1vdW50XHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIGluaXRpYWxWTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyByZW5kZXJcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHN1YlRyZWUgPSAoaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgaHlkcmF0ZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGh5ZHJhdGVgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgaGFzIGFkb3B0ZWQgaG9zdCBub2RlIC0gcGVyZm9ybSBoeWRyYXRpb24gaW5zdGVhZCBvZiBtb3VudC5cclxuICAgICAgICAgICAgICAgICAgICBoeWRyYXRlTm9kZShpbml0aWFsVk5vZGUuZWwsIHN1YlRyZWUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxWTm9kZS5lbCA9IHN1YlRyZWUuZWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtb3VudGVkIGhvb2tcclxuICAgICAgICAgICAgICAgIGlmIChtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KG0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVNb3VudGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgaW5pdGlhbFZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmF0ZWQgaG9vayBmb3Iga2VlcC1hbGl2ZSByb290cy5cclxuICAgICAgICAgICAgICAgIC8vICMxNzQyIGFjdGl2YXRlZCBob29rIG11c3QgYmUgYWNjZXNzZWQgYWZ0ZXIgZmlyc3QgcmVuZGVyXHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgaG9vayBtYXkgYmUgaW5qZWN0ZWQgYnkgYSBjaGlsZCBrZWVwLWFsaXZlXHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGEgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGEgJiZcclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUuc2hhcGVGbGFnICYgMjU2IC8qIENPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChhLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRyaWdnZXJlZCBieSBtdXRhdGlvbiBvZiBjb21wb25lbnQncyBvd24gc3RhdGUgKG5leHQ6IG51bGwpXHJcbiAgICAgICAgICAgICAgICAvLyBPUiBwYXJlbnQgY2FsbGluZyBwcm9jZXNzQ29tcG9uZW50IChuZXh0OiBWTm9kZSlcclxuICAgICAgICAgICAgICAgIGxldCB7IG5leHQsIGJ1LCB1LCBwYXJlbnQsIHZub2RlIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGxldCBvcmlnaW5OZXh0ID0gbmV4dDtcclxuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG5leHQgfHwgaW5zdGFuY2Uudm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0LmVsID0gdm5vZGUuZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyKGluc3RhbmNlLCBuZXh0LCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHZub2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlVXBkYXRlIGhvb2tcclxuICAgICAgICAgICAgICAgIGlmIChidSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVCZWZvcmVVcGRhdGVcclxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyByZW5kZXJcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldlRyZWUgPSBpbnN0YW5jZS5zdWJUcmVlO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IG5leHRUcmVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXRjaChwcmV2VHJlZSwgbmV4dFRyZWUsIFxyXG4gICAgICAgICAgICAgICAgLy8gcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIHRlbGVwb3J0XHJcbiAgICAgICAgICAgICAgICBob3N0UGFyZW50Tm9kZShwcmV2VHJlZS5lbCksIFxyXG4gICAgICAgICAgICAgICAgLy8gYW5jaG9yIG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIGZyYWdtZW50XHJcbiAgICAgICAgICAgICAgICBnZXROZXh0SG9zdE5vZGUocHJldlRyZWUpLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQuZWwgPSBuZXh0VHJlZS5lbDtcclxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5OZXh0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VsZi10cmlnZ2VyZWQgdXBkYXRlLiBJbiBjYXNlIG9mIEhPQywgdXBkYXRlIHBhcmVudCBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBlbC4gSE9DIGlzIGluZGljYXRlZCBieSBwYXJlbnQgaW5zdGFuY2UncyBzdWJUcmVlIHBvaW50aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gY2hpbGQgY29tcG9uZW50J3Mgdm5vZGVcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVIT0NIb3N0RWwoaW5zdGFuY2UsIG5leHRUcmVlLmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZWQgaG9va1xyXG4gICAgICAgICAgICAgICAgaWYgKHUpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZVVwZGF0ZWRcclxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVVcGRhdGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gY3JlYXRlRGV2RWZmZWN0T3B0aW9ucyhpbnN0YW5jZSkgOiBwcm9kRWZmZWN0T3B0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyID0gKGluc3RhbmNlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIG5leHRWTm9kZS5jb21wb25lbnQgPSBpbnN0YW5jZTtcclxuICAgICAgICBjb25zdCBwcmV2UHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcztcclxuICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG5leHRWTm9kZTtcclxuICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbnVsbDtcclxuICAgICAgICB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgbmV4dFZOb2RlLnByb3BzLCBwcmV2UHJvcHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgdXBkYXRlU2xvdHMoaW5zdGFuY2UsIG5leHRWTm9kZS5jaGlsZHJlbik7XHJcbiAgICAgICAgLy8gcHJvcHMgdXBkYXRlIG1heSBoYXZlIHRyaWdnZXJlZCBwcmUtZmx1c2ggd2F0Y2hlcnMuXHJcbiAgICAgICAgLy8gZmx1c2ggdGhlbSBiZWZvcmUgdGhlIHJlbmRlciB1cGRhdGUuXHJcbiAgICAgICAgZmx1c2hQcmVGbHVzaENicyh1bmRlZmluZWQsIGluc3RhbmNlLnVwZGF0ZSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hDaGlsZHJlbiA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcclxuICAgICAgICBjb25zdCBjMSA9IG4xICYmIG4xLmNoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IHByZXZTaGFwZUZsYWcgPSBuMSA/IG4xLnNoYXBlRmxhZyA6IDA7XHJcbiAgICAgICAgY29uc3QgYzIgPSBuMi5jaGlsZHJlbjtcclxuICAgICAgICBjb25zdCB7IHBhdGNoRmxhZywgc2hhcGVGbGFnIH0gPSBuMjtcclxuICAgICAgICAvLyBmYXN0IHBhdGhcclxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNvdWxkIGJlIGVpdGhlciBmdWxseS1rZXllZCBvciBtaXhlZCAoc29tZSBrZXllZCBzb21lIG5vdClcclxuICAgICAgICAgICAgICAgIC8vIHByZXNlbmNlIG9mIHBhdGNoRmxhZyBtZWFucyBjaGlsZHJlbiBhcmUgZ3VhcmFudGVlZCB0byBiZSBhcnJheXNcclxuICAgICAgICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwYXRjaEZsYWcgJiAyNTYgLyogVU5LRVlFRF9GUkFHTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gdW5rZXllZFxyXG4gICAgICAgICAgICAgICAgcGF0Y2hVbmtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2hpbGRyZW4gaGFzIDMgcG9zc2liaWxpdGllczogdGV4dCwgYXJyYXkgb3Igbm8gY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAvLyB0ZXh0IGNoaWxkcmVuIGZhc3QgcGF0aFxyXG4gICAgICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjMiAhPT0gYzEpIHtcclxuICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsIGMyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gcHJldiBjaGlsZHJlbiB3YXMgYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHR3byBhcnJheXMsIGNhbm5vdCBhc3N1bWUgYW55dGhpbmcsIGRvIGZ1bGwgZGlmZlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIG5ldyBjaGlsZHJlbiwganVzdCB1bm1vdW50IG9sZFxyXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwcmV2IGNoaWxkcmVuIHdhcyB0ZXh0IE9SIG51bGxcclxuICAgICAgICAgICAgICAgIC8vIG5ldyBjaGlsZHJlbiBpcyBhcnJheSBPUiBudWxsXHJcbiAgICAgICAgICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG1vdW50IG5ldyBpZiBhcnJheVxyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhdGNoVW5rZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjMSA9IGMxIHx8IEVNUFRZX0FSUjtcclxuICAgICAgICBjMiA9IGMyIHx8IEVNUFRZX0FSUjtcclxuICAgICAgICBjb25zdCBvbGRMZW5ndGggPSBjMS5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gYzIubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGNvbW1vbkxlbmd0aCA9IE1hdGgubWluKG9sZExlbmd0aCwgbmV3TGVuZ3RoKTtcclxuICAgICAgICBsZXQgaTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tbW9uTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gKGMyW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xyXG4gICAgICAgICAgICBwYXRjaChjMVtpXSwgbmV4dENoaWxkLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGRcclxuICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlLCBmYWxzZSwgY29tbW9uTGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG1vdW50IG5ld1xyXG4gICAgICAgICAgICBtb3VudENoaWxkcmVuKGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgY29tbW9uTGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gY2FuIGJlIGFsbC1rZXllZCBvciBtaXhlZFxyXG4gICAgY29uc3QgcGF0Y2hLZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgY29uc3QgbDIgPSBjMi5sZW5ndGg7XHJcbiAgICAgICAgbGV0IGUxID0gYzEubGVuZ3RoIC0gMTsgLy8gcHJldiBlbmRpbmcgaW5kZXhcclxuICAgICAgICBsZXQgZTIgPSBsMiAtIDE7IC8vIG5leHQgZW5kaW5nIGluZGV4XHJcbiAgICAgICAgLy8gMS4gc3luYyBmcm9tIHN0YXJ0XHJcbiAgICAgICAgLy8gKGEgYikgY1xyXG4gICAgICAgIC8vIChhIGIpIGQgZVxyXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcclxuICAgICAgICAgICAgY29uc3QgbjEgPSBjMVtpXTtcclxuICAgICAgICAgICAgY29uc3QgbjIgPSAoYzJbaV0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSk7XHJcbiAgICAgICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xyXG4gICAgICAgICAgICAgICAgcGF0Y2gobjEsIG4yLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAyLiBzeW5jIGZyb20gZW5kXHJcbiAgICAgICAgLy8gYSAoYiBjKVxyXG4gICAgICAgIC8vIGQgZSAoYiBjKVxyXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcclxuICAgICAgICAgICAgY29uc3QgbjEgPSBjMVtlMV07XHJcbiAgICAgICAgICAgIGNvbnN0IG4yID0gKGMyW2UyXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltlMl0pXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2UyXSkpO1xyXG4gICAgICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoKG4xLCBuMiwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUxLS07XHJcbiAgICAgICAgICAgIGUyLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDMuIGNvbW1vbiBzZXF1ZW5jZSArIG1vdW50XHJcbiAgICAgICAgLy8gKGEgYilcclxuICAgICAgICAvLyAoYSBiKSBjXHJcbiAgICAgICAgLy8gaSA9IDIsIGUxID0gMSwgZTIgPSAyXHJcbiAgICAgICAgLy8gKGEgYilcclxuICAgICAgICAvLyBjIChhIGIpXHJcbiAgICAgICAgLy8gaSA9IDAsIGUxID0gLTEsIGUyID0gMFxyXG4gICAgICAgIGlmIChpID4gZTEpIHtcclxuICAgICAgICAgICAgaWYgKGkgPD0gZTIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRQb3MgPSBlMiArIDE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0UG9zIDwgbDIgPyBjMltuZXh0UG9zXS5lbCA6IHBhcmVudEFuY2hvcjtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgKGMyW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gNC4gY29tbW9uIHNlcXVlbmNlICsgdW5tb3VudFxyXG4gICAgICAgIC8vIChhIGIpIGNcclxuICAgICAgICAvLyAoYSBiKVxyXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDIsIGUyID0gMVxyXG4gICAgICAgIC8vIGEgKGIgYylcclxuICAgICAgICAvLyAoYiBjKVxyXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IDAsIGUyID0gLTFcclxuICAgICAgICBlbHNlIGlmIChpID4gZTIpIHtcclxuICAgICAgICAgICAgd2hpbGUgKGkgPD0gZTEpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoYzFbaV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDUuIHVua25vd24gc2VxdWVuY2VcclxuICAgICAgICAvLyBbaSAuLi4gZTEgKyAxXTogYSBiIFtjIGQgZV0gZiBnXHJcbiAgICAgICAgLy8gW2kgLi4uIGUyICsgMV06IGEgYiBbZSBkIGMgaF0gZiBnXHJcbiAgICAgICAgLy8gaSA9IDIsIGUxID0gNCwgZTIgPSA1XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHMxID0gaTsgLy8gcHJldiBzdGFydGluZyBpbmRleFxyXG4gICAgICAgICAgICBjb25zdCBzMiA9IGk7IC8vIG5leHQgc3RhcnRpbmcgaW5kZXhcclxuICAgICAgICAgICAgLy8gNS4xIGJ1aWxkIGtleTppbmRleCBtYXAgZm9yIG5ld0NoaWxkcmVuXHJcbiAgICAgICAgICAgIGNvbnN0IGtleVRvTmV3SW5kZXhNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHMyOyBpIDw9IGUyOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IChjMltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRDaGlsZC5rZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5VG9OZXdJbmRleE1hcC5oYXMobmV4dENoaWxkLmtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRHVwbGljYXRlIGtleXMgZm91bmQgZHVyaW5nIHVwZGF0ZTpgLCBKU09OLnN0cmluZ2lmeShuZXh0Q2hpbGQua2V5KSwgYE1ha2Ugc3VyZSBrZXlzIGFyZSB1bmlxdWUuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGtleVRvTmV3SW5kZXhNYXAuc2V0KG5leHRDaGlsZC5rZXksIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIDUuMiBsb29wIHRocm91Z2ggb2xkIGNoaWxkcmVuIGxlZnQgdG8gYmUgcGF0Y2hlZCBhbmQgdHJ5IHRvIHBhdGNoXHJcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIG5vZGVzICYgcmVtb3ZlIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50XHJcbiAgICAgICAgICAgIGxldCBqO1xyXG4gICAgICAgICAgICBsZXQgcGF0Y2hlZCA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvQmVQYXRjaGVkID0gZTIgLSBzMiArIDE7XHJcbiAgICAgICAgICAgIGxldCBtb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyB1c2VkIHRvIHRyYWNrIHdoZXRoZXIgYW55IG5vZGUgaGFzIG1vdmVkXHJcbiAgICAgICAgICAgIGxldCBtYXhOZXdJbmRleFNvRmFyID0gMDtcclxuICAgICAgICAgICAgLy8gd29ya3MgYXMgTWFwPG5ld0luZGV4LCBvbGRJbmRleD5cclxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG9sZEluZGV4IGlzIG9mZnNldCBieSArMVxyXG4gICAgICAgICAgICAvLyBhbmQgb2xkSW5kZXggPSAwIGlzIGEgc3BlY2lhbCB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBuZXcgbm9kZSBoYXNcclxuICAgICAgICAgICAgLy8gbm8gY29ycmVzcG9uZGluZyBvbGQgbm9kZS5cclxuICAgICAgICAgICAgLy8gdXNlZCBmb3IgZGV0ZXJtaW5pbmcgbG9uZ2VzdCBzdGFibGUgc3Vic2VxdWVuY2VcclxuICAgICAgICAgICAgY29uc3QgbmV3SW5kZXhUb09sZEluZGV4TWFwID0gbmV3IEFycmF5KHRvQmVQYXRjaGVkKTtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRvQmVQYXRjaGVkOyBpKyspXHJcbiAgICAgICAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBzMTsgaSA8PSBlMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2Q2hpbGQgPSBjMVtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaGVkID49IHRvQmVQYXRjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxsIG5ldyBjaGlsZHJlbiBoYXZlIGJlZW4gcGF0Y2hlZCBzbyB0aGlzIGNhbiBvbmx5IGJlIGEgcmVtb3ZhbFxyXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBuZXdJbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2Q2hpbGQua2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGtleVRvTmV3SW5kZXhNYXAuZ2V0KHByZXZDaGlsZC5rZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8ga2V5LWxlc3Mgbm9kZSwgdHJ5IHRvIGxvY2F0ZSBhIGtleS1sZXNzIG5vZGUgb2YgdGhlIHNhbWUgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IHMyOyBqIDw9IGUyOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtqIC0gczJdID09PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NhbWVWTm9kZVR5cGUocHJldkNoaWxkLCBjMltqXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGV4ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbbmV3SW5kZXggLSBzMl0gPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gbWF4TmV3SW5kZXhTb0Zhcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhOZXdJbmRleFNvRmFyID0gbmV3SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKHByZXZDaGlsZCwgYzJbbmV3SW5kZXhdLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoZWQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyA1LjMgbW92ZSBhbmQgbW91bnRcclxuICAgICAgICAgICAgLy8gZ2VuZXJhdGUgbG9uZ2VzdCBzdGFibGUgc3Vic2VxdWVuY2Ugb25seSB3aGVuIG5vZGVzIGhhdmUgbW92ZWRcclxuICAgICAgICAgICAgY29uc3QgaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UgPSBtb3ZlZFxyXG4gICAgICAgICAgICAgICAgPyBnZXRTZXF1ZW5jZShuZXdJbmRleFRvT2xkSW5kZXhNYXApXHJcbiAgICAgICAgICAgICAgICA6IEVNUFRZX0FSUjtcclxuICAgICAgICAgICAgaiA9IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIC8vIGxvb3BpbmcgYmFja3dhcmRzIHNvIHRoYXQgd2UgY2FuIHVzZSBsYXN0IHBhdGNoZWQgbm9kZSBhcyBhbmNob3JcclxuICAgICAgICAgICAgZm9yIChpID0gdG9CZVBhdGNoZWQgLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gczIgKyBpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gYzJbbmV4dEluZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHRJbmRleCArIDEgPCBsMiA/IGMyW25leHRJbmRleCArIDFdLmVsIDogcGFyZW50QW5jaG9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtpXSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdW50IG5ld1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1vdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBpZjpcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBzdGFibGUgc3Vic2VxdWVuY2UgKGUuZy4gYSByZXZlcnNlKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9SIGN1cnJlbnQgbm9kZSBpcyBub3QgYW1vbmcgdGhlIHN0YWJsZSBzZXF1ZW5jZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgMCB8fCBpICE9PSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZVtqXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIDIgLyogUkVPUkRFUiAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdmUgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSwgcGFyZW50U3VzcGVuc2UgPSBudWxsKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBlbCwgdHlwZSwgdHJhbnNpdGlvbiwgY2hpbGRyZW4sIHNoYXBlRmxhZyB9ID0gdm5vZGU7XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIG1vdmUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCBzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgdm5vZGUuc3VzcGVuc2UubW92ZShjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICB0eXBlLm1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaG9zdEluc2VydCh2bm9kZS5hbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzdGF0aWMgbm9kZSBtb3ZlIGNhbiBvbmx5IGhhcHBlbiB3aGVuIGZvcmNlIHVwZGF0aW5nIEhNUlxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgdHlwZSA9PT0gU3RhdGljKSB7XHJcbiAgICAgICAgICAgIG1vdmVTdGF0aWNOb2RlKHZub2RlLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2luZ2xlIG5vZGVzXHJcbiAgICAgICAgY29uc3QgbmVlZFRyYW5zaXRpb24gPSBtb3ZlVHlwZSAhPT0gMiAvKiBSRU9SREVSICovICYmXHJcbiAgICAgICAgICAgIHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uO1xyXG4gICAgICAgIGlmIChuZWVkVHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICBpZiAobW92ZVR5cGUgPT09IDAgLyogRU5URVIgKi8pIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xyXG4gICAgICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHRyYW5zaXRpb24uZW50ZXIoZWwpLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxlYXZlLCBkZWxheUxlYXZlLCBhZnRlckxlYXZlIH0gPSB0cmFuc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gKCkgPT4gaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYXZlKGVsLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVsYXlMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5TGVhdmUoZWwsIHJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHVubW91bnQgPSAodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCBwcm9wcywgcmVmLCBjaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBzaGFwZUZsYWcsIHBhdGNoRmxhZywgZGlycyB9ID0gdm5vZGU7XHJcbiAgICAgICAgLy8gdW5zZXQgcmVmXHJcbiAgICAgICAgaWYgKHJlZiAhPSBudWxsICYmIHBhcmVudENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LmN0eC5kZWFjdGl2YXRlKHZub2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzaG91bGRJbnZva2VEaXJzID0gc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovICYmIGRpcnM7XHJcbiAgICAgICAgbGV0IHZub2RlSG9vaztcclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVVbm1vdW50KSkge1xyXG4gICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIHVubW91bnRDb21wb25lbnQodm5vZGUuY29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCBzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLnN1c3BlbnNlLnVubW91bnQocGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2hvdWxkSW52b2tlRGlycykge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlVW5tb3VudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4gJiZcclxuICAgICAgICAgICAgICAgIC8vICMxMTUzOiBmYXN0IHBhdGggc2hvdWxkIG5vdCBiZSB0YWtlbiBmb3Igbm9uLXN0YWJsZSAodi1mb3IpIGZyYWdtZW50c1xyXG4gICAgICAgICAgICAgICAgKHR5cGUgIT09IEZyYWdtZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHBhdGNoRmxhZyA+IDAgJiYgcGF0Y2hGbGFnICYgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGZhc3QgcGF0aCBmb3IgYmxvY2sgbm9kZXM6IG9ubHkgbmVlZCB0byB1bm1vdW50IGR5bmFtaWMgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oZHluYW1pY0NoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHR5cGUgPT09IEZyYWdtZW50ICYmXHJcbiAgICAgICAgICAgICAgICAocGF0Y2hGbGFnICYgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgMjU2IC8qIFVOS0VZRURfRlJBR01FTlQgKi8pKSB8fFxyXG4gICAgICAgICAgICAgICAgKCFvcHRpbWl6ZWQgJiYgc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGFuIHVubW91bnRlZCB0ZWxlcG9ydCBzaG91bGQgYWx3YXlzIHJlbW92ZSBpdHMgY2hpbGRyZW4gaWYgbm90IGRpc2FibGVkXHJcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLyAmJlxyXG4gICAgICAgICAgICAgICAgKGRvUmVtb3ZlIHx8ICFpc1RlbGVwb3J0RGlzYWJsZWQodm5vZGUucHJvcHMpKSkge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUudHlwZS5yZW1vdmUodm5vZGUsIGludGVybmFscyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmUodm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZVVubW91bnRlZCkgfHwgc2hvdWxkSW52b2tlRGlycykge1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgc2hvdWxkSW52b2tlRGlycyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ3VubW91bnRlZCcpO1xyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbW92ZSA9IHZub2RlID0+IHtcclxuICAgICAgICBjb25zdCB7IHR5cGUsIGVsLCBhbmNob3IsIHRyYW5zaXRpb24gfSA9IHZub2RlO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xyXG4gICAgICAgICAgICByZW1vdmVGcmFnbWVudChlbCwgYW5jaG9yKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHR5cGUgPT09IFN0YXRpYykge1xyXG4gICAgICAgICAgICByZW1vdmVTdGF0aWNOb2RlKHZub2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwZXJmb3JtUmVtb3ZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBob3N0UmVtb3ZlKGVsKTtcclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkICYmIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5hZnRlckxlYXZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiZcclxuICAgICAgICAgICAgdHJhbnNpdGlvbiAmJlxyXG4gICAgICAgICAgICAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4gbGVhdmUoZWwsIHBlcmZvcm1SZW1vdmUpO1xyXG4gICAgICAgICAgICBpZiAoZGVsYXlMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsYXlMZWF2ZSh2bm9kZS5lbCwgcGVyZm9ybVJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwZXJmb3JtUmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbW92ZUZyYWdtZW50ID0gKGN1ciwgZW5kKSA9PiB7XHJcbiAgICAgICAgLy8gRm9yIGZyYWdtZW50cywgZGlyZWN0bHkgcmVtb3ZlIGFsbCBjb250YWluZWQgRE9NIG5vZGVzLlxyXG4gICAgICAgIC8vIChmcmFnbWVudCBjaGlsZCBub2RlcyBjYW5ub3QgaGF2ZSB0cmFuc2l0aW9uKVxyXG4gICAgICAgIGxldCBuZXh0O1xyXG4gICAgICAgIHdoaWxlIChjdXIgIT09IGVuZCkge1xyXG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGN1cik7XHJcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoY3VyKTtcclxuICAgICAgICAgICAgY3VyID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdFJlbW92ZShlbmQpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHVubW91bnRDb21wb25lbnQgPSAoaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgKHRydWUgKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgdW5yZWdpc3RlckhNUihpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgYnVtLCBlZmZlY3RzLCB1cGRhdGUsIHN1YlRyZWUsIHVtIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAvLyBiZWZvcmVVbm1vdW50IGhvb2tcclxuICAgICAgICBpZiAoYnVtKSB7XHJcbiAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1bSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlZmZlY3RzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWZmZWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc3RvcChlZmZlY3RzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB1cGRhdGUgbWF5IGJlIG51bGwgaWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGJlZm9yZSBpdHMgYXN5bmNcclxuICAgICAgICAvLyBzZXR1cCBoYXMgcmVzb2x2ZWQuXHJcbiAgICAgICAgaWYgKHVwZGF0ZSkge1xyXG4gICAgICAgICAgICBzdG9wKHVwZGF0ZSk7XHJcbiAgICAgICAgICAgIHVubW91bnQoc3ViVHJlZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHVubW91bnRlZCBob29rXHJcbiAgICAgICAgaWYgKHVtKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1bSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5pc1VubW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIC8vIEEgY29tcG9uZW50IHdpdGggYXN5bmMgZGVwIGluc2lkZSBhIHBlbmRpbmcgc3VzcGVuc2UgaXMgdW5tb3VudGVkIGJlZm9yZVxyXG4gICAgICAgIC8vIGl0cyBhc3luYyBkZXAgcmVzb2x2ZXMuIFRoaXMgc2hvdWxkIHJlbW92ZSB0aGUgZGVwIGZyb20gdGhlIHN1c3BlbnNlLCBhbmRcclxuICAgICAgICAvLyBjYXVzZSB0aGUgc3VzcGVuc2UgdG8gcmVzb2x2ZSBpbW1lZGlhdGVseSBpZiB0aGF0IHdhcyB0aGUgbGFzdCBkZXAuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSAmJlxyXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmXHJcbiAgICAgICAgICAgICFwYXJlbnRTdXNwZW5zZS5pc1VubW91bnRlZCAmJlxyXG4gICAgICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCAmJlxyXG4gICAgICAgICAgICAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCAmJlxyXG4gICAgICAgICAgICBpbnN0YW5jZS5zdXNwZW5zZUlkID09PSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQpIHtcclxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UuZGVwcy0tO1xyXG4gICAgICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UuZGVwcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHVubW91bnRDaGlsZHJlbiA9IChjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UsIHN0YXJ0ID0gMCkgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHVubW91bnQoY2hpbGRyZW5baV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBnZXROZXh0SG9zdE5vZGUgPSB2bm9kZSA9PiB7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXROZXh0SG9zdE5vZGUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gdm5vZGUuc3VzcGVuc2UubmV4dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaG9zdE5leHRTaWJsaW5nKCh2bm9kZS5hbmNob3IgfHwgdm5vZGUuZWwpKTtcclxuICAgIH07XHJcbiAgICBjb25zdCByZW5kZXIgPSAodm5vZGUsIGNvbnRhaW5lcikgPT4ge1xyXG4gICAgICAgIGlmICh2bm9kZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXIuX3Zub2RlKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KGNvbnRhaW5lci5fdm5vZGUsIG51bGwsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXRjaChjb250YWluZXIuX3Zub2RlIHx8IG51bGwsIHZub2RlLCBjb250YWluZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xyXG4gICAgICAgIGNvbnRhaW5lci5fdm5vZGUgPSB2bm9kZTtcclxuICAgIH07XHJcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB7XHJcbiAgICAgICAgcDogcGF0Y2gsXHJcbiAgICAgICAgdW06IHVubW91bnQsXHJcbiAgICAgICAgbTogbW92ZSxcclxuICAgICAgICByOiByZW1vdmUsXHJcbiAgICAgICAgbXQ6IG1vdW50Q29tcG9uZW50LFxyXG4gICAgICAgIG1jOiBtb3VudENoaWxkcmVuLFxyXG4gICAgICAgIHBjOiBwYXRjaENoaWxkcmVuLFxyXG4gICAgICAgIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLFxyXG4gICAgICAgIG46IGdldE5leHRIb3N0Tm9kZSxcclxuICAgICAgICBvOiBvcHRpb25zXHJcbiAgICB9O1xyXG4gICAgbGV0IGh5ZHJhdGU7XHJcbiAgICBsZXQgaHlkcmF0ZU5vZGU7XHJcbiAgICBpZiAoY3JlYXRlSHlkcmF0aW9uRm5zKSB7XHJcbiAgICAgICAgW2h5ZHJhdGUsIGh5ZHJhdGVOb2RlXSA9IGNyZWF0ZUh5ZHJhdGlvbkZucyhpbnRlcm5hbHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW5kZXIsXHJcbiAgICAgICAgaHlkcmF0ZSxcclxuICAgICAgICBjcmVhdGVBcHA6IGNyZWF0ZUFwcEFQSShyZW5kZXIsIGh5ZHJhdGUpXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGludm9rZVZOb2RlSG9vayhob29rLCBpbnN0YW5jZSwgdm5vZGUsIHByZXZWTm9kZSA9IG51bGwpIHtcclxuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA3IC8qIFZOT0RFX0hPT0sgKi8sIFtcclxuICAgICAgICB2bm9kZSxcclxuICAgICAgICBwcmV2Vk5vZGVcclxuICAgIF0pO1xyXG59XHJcbi8qKlxyXG4gKiAjMTE1NlxyXG4gKiBXaGVuIGEgY29tcG9uZW50IGlzIEhNUi1lbmFibGVkLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGFsbCBzdGF0aWMgbm9kZXNcclxuICogaW5zaWRlIGEgYmxvY2sgYWxzbyBpbmhlcml0IHRoZSBET00gZWxlbWVudCBmcm9tIHRoZSBwcmV2aW91cyB0cmVlIHNvIHRoYXRcclxuICogSE1SIHVwZGF0ZXMgKHdoaWNoIGFyZSBmdWxsIHVwZGF0ZXMpIGNhbiByZXRyaWV2ZSB0aGUgZWxlbWVudCBmb3IgcGF0Y2hpbmcuXHJcbiAqXHJcbiAqICMyMDgwXHJcbiAqIEluc2lkZSBrZXllZCBgdGVtcGxhdGVgIGZyYWdtZW50IHN0YXRpYyBjaGlsZHJlbiwgaWYgYSBmcmFnbWVudCBpcyBtb3ZlZCxcclxuICogdGhlIGNoaWxkcmVuIHdpbGwgYWx3YXlzIG1vdmVkIHNvIHRoYXQgbmVlZCBpbmhlcml0IGVsIGZvcm0gcHJldmlvdXMgbm9kZXNcclxuICogdG8gZW5zdXJlIGNvcnJlY3QgbW92ZWQgcG9zaXRpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBjaDEgPSBuMS5jaGlsZHJlbjtcclxuICAgIGNvbnN0IGNoMiA9IG4yLmNoaWxkcmVuO1xyXG4gICAgaWYgKGlzQXJyYXkoY2gxKSAmJiBpc0FycmF5KGNoMikpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoMS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyB0aGlzIGlzIG9ubHkgY2FsbGVkIGluIHRoZSBvcHRpbWl6ZWQgcGF0aCBzbyBhcnJheSBjaGlsZHJlbiBhcmVcclxuICAgICAgICAgICAgLy8gZ3VhcmFudGVlZCB0byBiZSB2bm9kZXNcclxuICAgICAgICAgICAgY29uc3QgYzEgPSBjaDFbaV07XHJcbiAgICAgICAgICAgIGxldCBjMiA9IGNoMltpXTtcclxuICAgICAgICAgICAgaWYgKGMyLnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJiAhYzIuZHluYW1pY0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYzIucGF0Y2hGbGFnIDw9IDAgfHwgYzIucGF0Y2hGbGFnID09PSAzMiAvKiBIWURSQVRFX0VWRU5UUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGMyID0gY2gyW2ldID0gY2xvbmVJZk1vdW50ZWQoY2gyW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFzaGFsbG93KVxyXG4gICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4oYzEsIGMyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhbHNvIGluaGVyaXQgZm9yIGNvbW1lbnQgbm9kZXMsIGJ1dCBub3QgcGxhY2Vob2xkZXJzIChlLmcuIHYtaWYgd2hpY2hcclxuICAgICAgICAgICAgLy8gd291bGQgaGF2ZSByZWNlaXZlZCAuZWwgZHVyaW5nIGJsb2NrIHBhdGNoKVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGMyLnR5cGUgPT09IENvbW1lbnQgJiYgIWMyLmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvbmdlc3RfaW5jcmVhc2luZ19zdWJzZXF1ZW5jZVxyXG5mdW5jdGlvbiBnZXRTZXF1ZW5jZShhcnIpIHtcclxuICAgIGNvbnN0IHAgPSBhcnIuc2xpY2UoKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFswXTtcclxuICAgIGxldCBpLCBqLCB1LCB2LCBjO1xyXG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGFyckkgPSBhcnJbaV07XHJcbiAgICAgICAgaWYgKGFyckkgIT09IDApIHtcclxuICAgICAgICAgICAgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmIChhcnJbal0gPCBhcnJJKSB7XHJcbiAgICAgICAgICAgICAgICBwW2ldID0gajtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdSA9IDA7XHJcbiAgICAgICAgICAgIHYgPSByZXN1bHQubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgd2hpbGUgKHUgPCB2KSB7XHJcbiAgICAgICAgICAgICAgICBjID0gKCh1ICsgdikgLyAyKSB8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyW3Jlc3VsdFtjXV0gPCBhcnJJKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdSA9IGMgKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdiA9IGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFyckkgPCBhcnJbcmVzdWx0W3VdXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcFtpXSA9IHJlc3VsdFt1IC0gMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbdV0gPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdSA9IHJlc3VsdC5sZW5ndGg7XHJcbiAgICB2ID0gcmVzdWx0W3UgLSAxXTtcclxuICAgIHdoaWxlICh1LS0gPiAwKSB7XHJcbiAgICAgICAgcmVzdWx0W3VdID0gdjtcclxuICAgICAgICB2ID0gcFt2XTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cblxuY29uc3QgaXNUZWxlcG9ydCA9ICh0eXBlKSA9PiB0eXBlLl9faXNUZWxlcG9ydDtcclxuY29uc3QgaXNUZWxlcG9ydERpc2FibGVkID0gKHByb3BzKSA9PiBwcm9wcyAmJiAocHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMuZGlzYWJsZWQgPT09ICcnKTtcclxuY29uc3QgcmVzb2x2ZVRhcmdldCA9IChwcm9wcywgc2VsZWN0KSA9PiB7XHJcbiAgICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IHByb3BzICYmIHByb3BzLnRvO1xyXG4gICAgaWYgKGlzU3RyaW5nKHRhcmdldFNlbGVjdG9yKSkge1xyXG4gICAgICAgIGlmICghc2VsZWN0KSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQ3VycmVudCByZW5kZXJlciBkb2VzIG5vdCBzdXBwb3J0IHN0cmluZyB0YXJnZXQgZm9yIFRlbGVwb3J0cy4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYChtaXNzaW5nIHF1ZXJ5U2VsZWN0b3IgcmVuZGVyZXIgb3B0aW9uKWApO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHNlbGVjdCh0YXJnZXRTZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gbG9jYXRlIFRlbGVwb3J0IHRhcmdldCB3aXRoIHNlbGVjdG9yIFwiJHt0YXJnZXRTZWxlY3Rvcn1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBOb3RlIHRoZSB0YXJnZXQgZWxlbWVudCBtdXN0IGV4aXN0IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQgLSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGkuZS4gdGhlIHRhcmdldCBjYW5ub3QgYmUgcmVuZGVyZWQgYnkgdGhlIGNvbXBvbmVudCBpdHNlbGYsIGFuZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGlkZWFsbHkgc2hvdWxkIGJlIG91dHNpZGUgb2YgdGhlIGVudGlyZSBWdWUgY29tcG9uZW50IHRyZWUuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICF0YXJnZXRTZWxlY3RvciAmJiAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIFRlbGVwb3J0IHRhcmdldDogJHt0YXJnZXRTZWxlY3Rvcn1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldFNlbGVjdG9yO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBUZWxlcG9ydEltcGwgPSB7XHJcbiAgICBfX2lzVGVsZXBvcnQ6IHRydWUsXHJcbiAgICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIGludGVybmFscykge1xyXG4gICAgICAgIGNvbnN0IHsgbWM6IG1vdW50Q2hpbGRyZW4sIHBjOiBwYXRjaENoaWxkcmVuLCBwYmM6IHBhdGNoQmxvY2tDaGlsZHJlbiwgbzogeyBpbnNlcnQsIHF1ZXJ5U2VsZWN0b3IsIGNyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQgfSB9ID0gaW50ZXJuYWxzO1xyXG4gICAgICAgIGNvbnN0IGRpc2FibGVkID0gaXNUZWxlcG9ydERpc2FibGVkKG4yLnByb3BzKTtcclxuICAgICAgICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4gfSA9IG4yO1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIGluc2VydCBhbmNob3JzIGluIHRoZSBtYWluIHZpZXdcclxuICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAobjIuZWwgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgICAgID8gY3JlYXRlQ29tbWVudCgndGVsZXBvcnQgc3RhcnQnKVxyXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1haW5BbmNob3IgPSAobjIuYW5jaG9yID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUNvbW1lbnQoJ3RlbGVwb3J0IGVuZCcpXHJcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZVRleHQoJycpKTtcclxuICAgICAgICAgICAgaW5zZXJ0KHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGluc2VydChtYWluQW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IChuMi50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KG4yLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEFuY2hvciA9IChuMi50YXJnZXRBbmNob3IgPSBjcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGluc2VydCh0YXJnZXRBbmNob3IsIHRhcmdldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQgb24gbW91bnQ6JywgdGFyZ2V0LCBgKCR7dHlwZW9mIHRhcmdldH0pYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbW91bnQgPSAoY29udGFpbmVyLCBhbmNob3IpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFRlbGVwb3J0ICphbHdheXMqIGhhcyBBcnJheSBjaGlsZHJlbi4gVGhpcyBpcyBlbmZvcmNlZCBpbiBib3RoIHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZXIgYW5kIHZub2RlIGNoaWxkcmVuIG5vcm1hbGl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgbW91bnQoY29udGFpbmVyLCBtYWluQW5jaG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIG1vdW50KHRhcmdldCwgdGFyZ2V0QW5jaG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIGNvbnRlbnRcclxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcclxuICAgICAgICAgICAgY29uc3QgbWFpbkFuY2hvciA9IChuMi5hbmNob3IgPSBuMS5hbmNob3IpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAobjIudGFyZ2V0ID0gbjEudGFyZ2V0KTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gKG4yLnRhcmdldEFuY2hvciA9IG4xLnRhcmdldEFuY2hvcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHdhc0Rpc2FibGVkID0gaXNUZWxlcG9ydERpc2FibGVkKG4xLnByb3BzKTtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbnRhaW5lciA9IHdhc0Rpc2FibGVkID8gY29udGFpbmVyIDogdGFyZ2V0O1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50QW5jaG9yID0gd2FzRGlzYWJsZWQgPyBtYWluQW5jaG9yIDogdGFyZ2V0QW5jaG9yO1xyXG4gICAgICAgICAgICBpZiAobjIuZHluYW1pY0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmYXN0IHBhdGggd2hlbiB0aGUgdGVsZXBvcnQgaGFwcGVucyB0byBiZSBhIGJsb2NrIHJvb3RcclxuICAgICAgICAgICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihuMS5keW5hbWljQ2hpbGRyZW4sIG4yLmR5bmFtaWNDaGlsZHJlbiwgY3VycmVudENvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgLy8gZXZlbiBpbiBibG9jayB0cmVlIG1vZGUgd2UgbmVlZCB0byBtYWtlIHN1cmUgYWxsIHJvb3QtbGV2ZWwgbm9kZXNcclxuICAgICAgICAgICAgICAgIC8vIGluIHRoZSB0ZWxlcG9ydCBpbmhlcml0IHByZXZpb3VzIERPTSByZWZlcmVuY2VzIHNvIHRoYXQgdGhleSBjYW5cclxuICAgICAgICAgICAgICAgIC8vIGJlIG1vdmVkIGluIGZ1dHVyZSBwYXRjaGVzLlxyXG4gICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFvcHRpbWl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBjdXJyZW50Q29udGFpbmVyLCBjdXJyZW50QW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXdhc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5hYmxlZCAtPiBkaXNhYmxlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaW50byBtYWluIGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIG1vdmVUZWxlcG9ydChuMiwgY29udGFpbmVyLCBtYWluQW5jaG9yLCBpbnRlcm5hbHMsIDEgLyogVE9HR0xFICovKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHRhcmdldCBjaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICBpZiAoKG4yLnByb3BzICYmIG4yLnByb3BzLnRvKSAhPT0gKG4xLnByb3BzICYmIG4xLnByb3BzLnRvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUYXJnZXQgPSAobjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChuMi5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0VGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUZWxlcG9ydChuMiwgbmV4dFRhcmdldCwgbnVsbCwgaW50ZXJuYWxzLCAwIC8qIFRBUkdFVF9DSEFOR0UgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQgb24gdXBkYXRlOicsIHRhcmdldCwgYCgke3R5cGVvZiB0YXJnZXR9KWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdhc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlzYWJsZWQgLT4gZW5hYmxlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaW50byB0ZWxlcG9ydCB0YXJnZXRcclxuICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIHRhcmdldCwgdGFyZ2V0QW5jaG9yLCBpbnRlcm5hbHMsIDEgLyogVE9HR0xFICovKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZW1vdmUodm5vZGUsIHsgcjogcmVtb3ZlLCBvOiB7IHJlbW92ZTogaG9zdFJlbW92ZSB9IH0pIHtcclxuICAgICAgICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4sIGFuY2hvciB9ID0gdm5vZGU7XHJcbiAgICAgICAgaG9zdFJlbW92ZShhbmNob3IpO1xyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmUoY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1vdmU6IG1vdmVUZWxlcG9ydCxcclxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVUZWxlcG9ydFxyXG59O1xyXG5mdW5jdGlvbiBtb3ZlVGVsZXBvcnQodm5vZGUsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCB7IG86IHsgaW5zZXJ0IH0sIG06IG1vdmUgfSwgbW92ZVR5cGUgPSAyIC8qIFJFT1JERVIgKi8pIHtcclxuICAgIC8vIG1vdmUgdGFyZ2V0IGFuY2hvciBpZiB0aGlzIGlzIGEgdGFyZ2V0IGNoYW5nZS5cclxuICAgIGlmIChtb3ZlVHlwZSA9PT0gMCAvKiBUQVJHRVRfQ0hBTkdFICovKSB7XHJcbiAgICAgICAgaW5zZXJ0KHZub2RlLnRhcmdldEFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBlbCwgYW5jaG9yLCBzaGFwZUZsYWcsIGNoaWxkcmVuLCBwcm9wcyB9ID0gdm5vZGU7XHJcbiAgICBjb25zdCBpc1Jlb3JkZXIgPSBtb3ZlVHlwZSA9PT0gMiAvKiBSRU9SREVSICovO1xyXG4gICAgLy8gbW92ZSBtYWluIHZpZXcgYW5jaG9yIGlmIHRoaXMgaXMgYSByZS1vcmRlci5cclxuICAgIGlmIChpc1Jlb3JkZXIpIHtcclxuICAgICAgICBpbnNlcnQoZWwsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcclxuICAgIH1cclxuICAgIC8vIGlmIHRoaXMgaXMgYSByZS1vcmRlciBhbmQgdGVsZXBvcnQgaXMgZW5hYmxlZCAoY29udGVudCBpcyBpbiB0YXJnZXQpXHJcbiAgICAvLyBkbyBub3QgbW92ZSBjaGlsZHJlbi4gU28gdGhlIG9wcG9zaXRlIGlzOiBvbmx5IG1vdmUgY2hpbGRyZW4gaWYgdGhpc1xyXG4gICAgLy8gaXMgbm90IGEgcmVvcmRlciwgb3IgdGhlIHRlbGVwb3J0IGlzIGRpc2FibGVkXHJcbiAgICBpZiAoIWlzUmVvcmRlciB8fCBpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpKSB7XHJcbiAgICAgICAgLy8gVGVsZXBvcnQgaGFzIGVpdGhlciBBcnJheSBjaGlsZHJlbiBvciBubyBjaGlsZHJlbi5cclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbW92ZShjaGlsZHJlbltpXSwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIDIgLyogUkVPUkRFUiAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBtb3ZlIG1haW4gdmlldyBhbmNob3IgaWYgdGhpcyBpcyBhIHJlLW9yZGVyLlxyXG4gICAgaWYgKGlzUmVvcmRlcikge1xyXG4gICAgICAgIGluc2VydChhbmNob3IsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoeWRyYXRlVGVsZXBvcnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCwgeyBvOiB7IG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCBxdWVyeVNlbGVjdG9yIH0gfSwgaHlkcmF0ZUNoaWxkcmVuKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSAodm5vZGUudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldCh2bm9kZS5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlIHRlbGVwb3J0cyByZW5kZXJlZCB0byB0aGUgc2FtZSB0YXJnZXQgZWxlbWVudCwgd2UgbmVlZCB0b1xyXG4gICAgICAgIC8vIHBpY2sgdXAgZnJvbSB3aGVyZSB0aGUgbGFzdCB0ZWxlcG9ydCBmaW5pc2hlZCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBub2RlXHJcbiAgICAgICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRhcmdldC5fbHBhIHx8IHRhcmdldC5maXJzdENoaWxkO1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICBpZiAoaXNUZWxlcG9ydERpc2FibGVkKHZub2RlLnByb3BzKSkge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gaHlkcmF0ZUNoaWxkcmVuKG5leHRTaWJsaW5nKG5vZGUpLCB2bm9kZSwgcGFyZW50Tm9kZShub2RlKSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciA9IHRhcmdldE5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciA9IGh5ZHJhdGVDaGlsZHJlbih0YXJnZXROb2RlLCB2bm9kZSwgdGFyZ2V0LCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRhcmdldC5fbHBhID1cclxuICAgICAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciAmJiBuZXh0U2libGluZyh2bm9kZS50YXJnZXRBbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB2bm9kZS5hbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUuYW5jaG9yKTtcclxufVxyXG4vLyBGb3JjZS1jYXN0ZWQgcHVibGljIHR5cGluZyBmb3IgaCBhbmQgVFNYIHByb3BzIGluZmVyZW5jZVxyXG5jb25zdCBUZWxlcG9ydCA9IFRlbGVwb3J0SW1wbDtcblxuY29uc3QgQ09NUE9ORU5UUyA9ICdjb21wb25lbnRzJztcclxuY29uc3QgRElSRUNUSVZFUyA9ICdkaXJlY3RpdmVzJztcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50KG5hbWUpIHtcclxuICAgIHJldHVybiByZXNvbHZlQXNzZXQoQ09NUE9ORU5UUywgbmFtZSkgfHwgbmFtZTtcclxufVxyXG5jb25zdCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UID0gU3ltYm9sKCk7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICBpZiAoaXNTdHJpbmcoY29tcG9uZW50KSkge1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlQXNzZXQoQ09NUE9ORU5UUywgY29tcG9uZW50LCBmYWxzZSkgfHwgY29tcG9uZW50O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gaW52YWxpZCB0eXBlcyB3aWxsIGZhbGx0aHJvdWdoIHRvIGNyZWF0ZVZOb2RlIGFuZCByYWlzZSB3YXJuaW5nXHJcbiAgICAgICAgcmV0dXJuIChjb21wb25lbnQgfHwgTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNvbHZlRGlyZWN0aXZlKG5hbWUpIHtcclxuICAgIHJldHVybiByZXNvbHZlQXNzZXQoRElSRUNUSVZFUywgbmFtZSk7XHJcbn1cclxuLy8gaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0KHR5cGUsIG5hbWUsIHdhcm5NaXNzaW5nID0gdHJ1ZSkge1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfHwgY3VycmVudEluc3RhbmNlO1xyXG4gICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcclxuICAgICAgICAvLyBzZWxmIG5hbWUgaGFzIGhpZ2hlc3QgcHJpb3JpdHlcclxuICAgICAgICBpZiAodHlwZSA9PT0gQ09NUE9ORU5UUykge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxmTmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcclxuICAgICAgICAgICAgaWYgKHNlbGZOYW1lICYmXHJcbiAgICAgICAgICAgICAgICAoc2VsZk5hbWUgPT09IG5hbWUgfHxcclxuICAgICAgICAgICAgICAgICAgICBzZWxmTmFtZSA9PT0gY2FtZWxpemUobmFtZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICBzZWxmTmFtZSA9PT0gY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IFxyXG4gICAgICAgIC8vIGxvY2FsIHJlZ2lzdHJhdGlvblxyXG4gICAgICAgIC8vIGNoZWNrIGluc3RhbmNlW3R5cGVdIGZpcnN0IGZvciBjb21wb25lbnRzIHdpdGggbWl4aW4gb3IgZXh0ZW5kcy5cclxuICAgICAgICByZXNvbHZlKGluc3RhbmNlW3R5cGVdIHx8IENvbXBvbmVudFt0eXBlXSwgbmFtZSkgfHxcclxuICAgICAgICAgICAgLy8gZ2xvYmFsIHJlZ2lzdHJhdGlvblxyXG4gICAgICAgICAgICByZXNvbHZlKGluc3RhbmNlLmFwcENvbnRleHRbdHlwZV0sIG5hbWUpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xyXG4gICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gcmVzb2x2ZSAke3R5cGUuc2xpY2UoMCwgLTEpfTogJHtuYW1lfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgcmVzb2x2ZSR7Y2FwaXRhbGl6ZSh0eXBlLnNsaWNlKDAsIC0xKSl9IGAgK1xyXG4gICAgICAgICAgICBgY2FuIG9ubHkgYmUgdXNlZCBpbiByZW5kZXIoKSBvciBzZXR1cCgpLmApO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlc29sdmUocmVnaXN0cnksIG5hbWUpIHtcclxuICAgIHJldHVybiAocmVnaXN0cnkgJiZcclxuICAgICAgICAocmVnaXN0cnlbbmFtZV0gfHxcclxuICAgICAgICAgICAgcmVnaXN0cnlbY2FtZWxpemUobmFtZSldIHx8XHJcbiAgICAgICAgICAgIHJlZ2lzdHJ5W2NhcGl0YWxpemUoY2FtZWxpemUobmFtZSkpXSkpO1xyXG59XG5cbmNvbnN0IEZyYWdtZW50ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdGcmFnbWVudCcgOiB1bmRlZmluZWQpO1xyXG5jb25zdCBUZXh0ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdUZXh0JyA6IHVuZGVmaW5lZCk7XHJcbmNvbnN0IENvbW1lbnQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ0NvbW1lbnQnIDogdW5kZWZpbmVkKTtcclxuY29uc3QgU3RhdGljID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdTdGF0aWMnIDogdW5kZWZpbmVkKTtcclxuLy8gU2luY2Ugdi1pZiBhbmQgdi1mb3IgYXJlIHRoZSB0d28gcG9zc2libGUgd2F5cyBub2RlIHN0cnVjdHVyZSBjYW4gZHluYW1pY2FsbHlcclxuLy8gY2hhbmdlLCBvbmNlIHdlIGNvbnNpZGVyIHYtaWYgYnJhbmNoZXMgYW5kIGVhY2ggdi1mb3IgZnJhZ21lbnQgYSBibG9jaywgd2VcclxuLy8gY2FuIGRpdmlkZSBhIHRlbXBsYXRlIGludG8gbmVzdGVkIGJsb2NrcywgYW5kIHdpdGhpbiBlYWNoIGJsb2NrIHRoZSBub2RlXHJcbi8vIHN0cnVjdHVyZSB3b3VsZCBiZSBzdGFibGUuIFRoaXMgYWxsb3dzIHVzIHRvIHNraXAgbW9zdCBjaGlsZHJlbiBkaWZmaW5nXHJcbi8vIGFuZCBvbmx5IHdvcnJ5IGFib3V0IHRoZSBkeW5hbWljIG5vZGVzIChpbmRpY2F0ZWQgYnkgcGF0Y2ggZmxhZ3MpLlxyXG5jb25zdCBibG9ja1N0YWNrID0gW107XHJcbmxldCBjdXJyZW50QmxvY2sgPSBudWxsO1xyXG4vKipcclxuICogT3BlbiBhIGJsb2NrLlxyXG4gKiBUaGlzIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBgY3JlYXRlQmxvY2tgLiBJdCBjYW5ub3QgYmUgcGFydCBvZiBgY3JlYXRlQmxvY2tgXHJcbiAqIGJlY2F1c2UgdGhlIGNoaWxkcmVuIG9mIHRoZSBibG9jayBhcmUgZXZhbHVhdGVkIGJlZm9yZSBgY3JlYXRlQmxvY2tgIGl0c2VsZlxyXG4gKiBpcyBjYWxsZWQuIFRoZSBnZW5lcmF0ZWQgY29kZSB0eXBpY2FsbHkgbG9va3MgbGlrZSB0aGlzOlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiBmdW5jdGlvbiByZW5kZXIoKSB7XHJcbiAqICAgcmV0dXJuIChvcGVuQmxvY2soKSxjcmVhdGVCbG9jaygnZGl2JywgbnVsbCwgWy4uLl0pKVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiBkaXNhYmxlVHJhY2tpbmcgaXMgdHJ1ZSB3aGVuIGNyZWF0aW5nIGEgdi1mb3IgZnJhZ21lbnQgYmxvY2ssIHNpbmNlIGEgdi1mb3JcclxuICogZnJhZ21lbnQgYWx3YXlzIGRpZmZzIGl0cyBjaGlsZHJlbi5cclxuICpcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIG9wZW5CbG9jayhkaXNhYmxlVHJhY2tpbmcgPSBmYWxzZSkge1xyXG4gICAgYmxvY2tTdGFjay5wdXNoKChjdXJyZW50QmxvY2sgPSBkaXNhYmxlVHJhY2tpbmcgPyBudWxsIDogW10pKTtcclxufVxyXG5mdW5jdGlvbiBjbG9zZUJsb2NrKCkge1xyXG4gICAgYmxvY2tTdGFjay5wb3AoKTtcclxuICAgIGN1cnJlbnRCbG9jayA9IGJsb2NrU3RhY2tbYmxvY2tTdGFjay5sZW5ndGggLSAxXSB8fCBudWxsO1xyXG59XHJcbi8vIFdoZXRoZXIgd2Ugc2hvdWxkIGJlIHRyYWNraW5nIGR5bmFtaWMgY2hpbGQgbm9kZXMgaW5zaWRlIGEgYmxvY2suXHJcbi8vIE9ubHkgdHJhY2tzIHdoZW4gdGhpcyB2YWx1ZSBpcyA+IDBcclxuLy8gV2UgYXJlIG5vdCB1c2luZyBhIHNpbXBsZSBib29sZWFuIGJlY2F1c2UgdGhpcyB2YWx1ZSBtYXkgbmVlZCB0byBiZVxyXG4vLyBpbmNyZW1lbnRlZC9kZWNyZW1lbnRlZCBieSBuZXN0ZWQgdXNhZ2Ugb2Ygdi1vbmNlIChzZWUgYmVsb3cpXHJcbmxldCBzaG91bGRUcmFjayA9IDE7XHJcbi8qKlxyXG4gKiBCbG9jayB0cmFja2luZyBzb21ldGltZXMgbmVlZHMgdG8gYmUgZGlzYWJsZWQsIGZvciBleGFtcGxlIGR1cmluZyB0aGVcclxuICogY3JlYXRpb24gb2YgYSB0cmVlIHRoYXQgbmVlZHMgdG8gYmUgY2FjaGVkIGJ5IHYtb25jZS4gVGhlIGNvbXBpbGVyIGdlbmVyYXRlc1xyXG4gKiBjb2RlIGxpa2UgdGhpczpcclxuICpcclxuICogYGBgIGpzXHJcbiAqIF9jYWNoZVsxXSB8fCAoXHJcbiAqICAgc2V0QmxvY2tUcmFja2luZygtMSksXHJcbiAqICAgX2NhY2hlWzFdID0gY3JlYXRlVk5vZGUoLi4uKSxcclxuICogICBzZXRCbG9ja1RyYWNraW5nKDEpLFxyXG4gKiAgIF9jYWNoZVsxXVxyXG4gKiApXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gc2V0QmxvY2tUcmFja2luZyh2YWx1ZSkge1xyXG4gICAgc2hvdWxkVHJhY2sgKz0gdmFsdWU7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2NrIHJvb3Qgdm5vZGUuIFRha2VzIHRoZSBzYW1lIGV4YWN0IGFyZ3VtZW50cyBhcyBgY3JlYXRlVk5vZGVgLlxyXG4gKiBBIGJsb2NrIHJvb3Qga2VlcHMgdHJhY2sgb2YgZHluYW1pYyBub2RlcyB3aXRoaW4gdGhlIGJsb2NrIGluIHRoZVxyXG4gKiBgZHluYW1pY0NoaWxkcmVuYCBhcnJheS5cclxuICpcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJsb2NrKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMpIHtcclxuICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgdHJ1ZSAvKiBpc0Jsb2NrOiBwcmV2ZW50IGEgYmxvY2sgZnJvbSB0cmFja2luZyBpdHNlbGYgKi8pO1xyXG4gICAgLy8gc2F2ZSBjdXJyZW50IGJsb2NrIGNoaWxkcmVuIG9uIHRoZSBibG9jayB2bm9kZVxyXG4gICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUjtcclxuICAgIC8vIGNsb3NlIGJsb2NrXHJcbiAgICBjbG9zZUJsb2NrKCk7XHJcbiAgICAvLyBhIGJsb2NrIGlzIGFsd2F5cyBnb2luZyB0byBiZSBwYXRjaGVkLCBzbyB0cmFjayBpdCBhcyBhIGNoaWxkIG9mIGl0c1xyXG4gICAgLy8gcGFyZW50IGJsb2NrXHJcbiAgICBpZiAoc2hvdWxkVHJhY2sgPiAwICYmIGN1cnJlbnRCbG9jaykge1xyXG4gICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2bm9kZTtcclxufVxyXG5mdW5jdGlvbiBpc1ZOb2RlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgPyB2YWx1ZS5fX3ZfaXNWTm9kZSA9PT0gdHJ1ZSA6IGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICBuMi5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLyAmJlxyXG4gICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5oYXMobjIudHlwZSkpIHtcclxuICAgICAgICAvLyBITVIgb25seTogaWYgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBob3QtdXBkYXRlZCwgZm9yY2UgYSByZWxvYWQuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG4xLnR5cGUgPT09IG4yLnR5cGUgJiYgbjEua2V5ID09PSBuMi5rZXk7XHJcbn1cclxubGV0IHZub2RlQXJnc1RyYW5zZm9ybWVyO1xyXG4vKipcclxuICogSW50ZXJuYWwgQVBJIGZvciByZWdpc3RlcmluZyBhbiBhcmd1bWVudHMgdHJhbnNmb3JtIGZvciBjcmVhdGVWTm9kZVxyXG4gKiB1c2VkIGZvciBjcmVhdGluZyBzdHVicyBpbiB0aGUgdGVzdC11dGlsc1xyXG4gKiBJdCBpcyAqaW50ZXJuYWwqIGJ1dCBuZWVkcyB0byBiZSBleHBvc2VkIGZvciB0ZXN0LXV0aWxzIHRvIHBpY2sgdXAgcHJvcGVyXHJcbiAqIHR5cGluZ3NcclxuICovXHJcbmZ1bmN0aW9uIHRyYW5zZm9ybVZOb2RlQXJncyh0cmFuc2Zvcm1lcikge1xyXG4gICAgdm5vZGVBcmdzVHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcjtcclxufVxyXG5jb25zdCBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtID0gKC4uLmFyZ3MpID0+IHtcclxuICAgIHJldHVybiBfY3JlYXRlVk5vZGUoLi4uKHZub2RlQXJnc1RyYW5zZm9ybWVyXHJcbiAgICAgICAgPyB2bm9kZUFyZ3NUcmFuc2Zvcm1lcihhcmdzLCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpXHJcbiAgICAgICAgOiBhcmdzKSk7XHJcbn07XHJcbmNvbnN0IEludGVybmFsT2JqZWN0S2V5ID0gYF9fdkludGVybmFsYDtcclxuY29uc3Qgbm9ybWFsaXplS2V5ID0gKHsga2V5IH0pID0+IGtleSAhPSBudWxsID8ga2V5IDogbnVsbDtcclxuY29uc3Qgbm9ybWFsaXplUmVmID0gKHsgcmVmIH0pID0+IHtcclxuICAgIHJldHVybiAocmVmICE9IG51bGxcclxuICAgICAgICA/IGlzQXJyYXkocmVmKVxyXG4gICAgICAgICAgICA/IHJlZlxyXG4gICAgICAgICAgICA6IHsgaTogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCByOiByZWYgfVxyXG4gICAgICAgIDogbnVsbCk7XHJcbn07XHJcbmNvbnN0IGNyZWF0ZVZOb2RlID0gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgPyBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtXHJcbiAgICA6IF9jcmVhdGVWTm9kZSk7XHJcbmZ1bmN0aW9uIF9jcmVhdGVWTm9kZSh0eXBlLCBwcm9wcyA9IG51bGwsIGNoaWxkcmVuID0gbnVsbCwgcGF0Y2hGbGFnID0gMCwgZHluYW1pY1Byb3BzID0gbnVsbCwgaXNCbG9ja05vZGUgPSBmYWxzZSkge1xyXG4gICAgaWYgKCF0eXBlIHx8IHR5cGUgPT09IE5VTExfRFlOQU1JQ19DT01QT05FTlQpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICF0eXBlKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgdm5vZGUgdHlwZSB3aGVuIGNyZWF0aW5nIHZub2RlOiAke3R5cGV9LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0eXBlID0gQ29tbWVudDtcclxuICAgIH1cclxuICAgIGlmIChpc1ZOb2RlKHR5cGUpKSB7XHJcbiAgICAgICAgLy8gY3JlYXRlVk5vZGUgcmVjZWl2aW5nIGFuIGV4aXN0aW5nIHZub2RlLiBUaGlzIGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxyXG4gICAgICAgIC8vIDxjb21wb25lbnQgOmlzPVwidm5vZGVcIi8+XHJcbiAgICAgICAgLy8gIzIwNzggbWFrZSBzdXJlIHRvIG1lcmdlIHJlZnMgZHVyaW5nIHRoZSBjbG9uZSBpbnN0ZWFkIG9mIG92ZXJ3cml0aW5nIGl0XHJcbiAgICAgICAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZSh0eXBlLCBwcm9wcywgdHJ1ZSAvKiBtZXJnZVJlZjogdHJ1ZSAqLyk7XHJcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKGNsb25lZCwgY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xvbmVkO1xyXG4gICAgfVxyXG4gICAgLy8gY2xhc3MgY29tcG9uZW50IG5vcm1hbGl6YXRpb24uXHJcbiAgICBpZiAoaXNDbGFzc0NvbXBvbmVudCh0eXBlKSkge1xyXG4gICAgICAgIHR5cGUgPSB0eXBlLl9fdmNjT3B0cztcclxuICAgIH1cclxuICAgIC8vIGNsYXNzICYgc3R5bGUgbm9ybWFsaXphdGlvbi5cclxuICAgIGlmIChwcm9wcykge1xyXG4gICAgICAgIC8vIGZvciByZWFjdGl2ZSBvciBwcm94eSBvYmplY3RzLCB3ZSBuZWVkIHRvIGNsb25lIGl0IHRvIGVuYWJsZSBtdXRhdGlvbi5cclxuICAgICAgICBpZiAoaXNQcm94eShwcm9wcykgfHwgSW50ZXJuYWxPYmplY3RLZXkgaW4gcHJvcHMpIHtcclxuICAgICAgICAgICAgcHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHsgY2xhc3M6IGtsYXNzLCBzdHlsZSB9ID0gcHJvcHM7XHJcbiAgICAgICAgaWYgKGtsYXNzICYmICFpc1N0cmluZyhrbGFzcykpIHtcclxuICAgICAgICAgICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc09iamVjdChzdHlsZSkpIHtcclxuICAgICAgICAgICAgLy8gcmVhY3RpdmUgc3RhdGUgb2JqZWN0cyBuZWVkIHRvIGJlIGNsb25lZCBzaW5jZSB0aGV5IGFyZSBsaWtlbHkgdG8gYmVcclxuICAgICAgICAgICAgLy8gbXV0YXRlZFxyXG4gICAgICAgICAgICBpZiAoaXNQcm94eShzdHlsZSkgJiYgIWlzQXJyYXkoc3R5bGUpKSB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZSA9IGV4dGVuZCh7fSwgc3R5bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGVuY29kZSB0aGUgdm5vZGUgdHlwZSBpbmZvcm1hdGlvbiBpbnRvIGEgYml0bWFwXHJcbiAgICBjb25zdCBzaGFwZUZsYWcgPSBpc1N0cmluZyh0eXBlKVxyXG4gICAgICAgID8gMSAvKiBFTEVNRU5UICovXHJcbiAgICAgICAgOiAgaXNTdXNwZW5zZSh0eXBlKVxyXG4gICAgICAgICAgICA/IDEyOCAvKiBTVVNQRU5TRSAqL1xyXG4gICAgICAgICAgICA6IGlzVGVsZXBvcnQodHlwZSlcclxuICAgICAgICAgICAgICAgID8gNjQgLyogVEVMRVBPUlQgKi9cclxuICAgICAgICAgICAgICAgIDogaXNPYmplY3QodHlwZSlcclxuICAgICAgICAgICAgICAgICAgICA/IDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovXHJcbiAgICAgICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKHR5cGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gMiAvKiBGVU5DVElPTkFMX0NPTVBPTkVOVCAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovICYmIGlzUHJveHkodHlwZSkpIHtcclxuICAgICAgICB0eXBlID0gdG9SYXcodHlwZSk7XHJcbiAgICAgICAgd2FybihgVnVlIHJlY2VpdmVkIGEgQ29tcG9uZW50IHdoaWNoIHdhcyBtYWRlIGEgcmVhY3RpdmUgb2JqZWN0LiBUaGlzIGNhbiBgICtcclxuICAgICAgICAgICAgYGxlYWQgdG8gdW5uZWNlc3NhcnkgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQsIGFuZCBzaG91bGQgYmUgYXZvaWRlZCBieSBgICtcclxuICAgICAgICAgICAgYG1hcmtpbmcgdGhlIGNvbXBvbmVudCB3aXRoIFxcYG1hcmtSYXdcXGAgb3IgdXNpbmcgXFxgc2hhbGxvd1JlZlxcYCBgICtcclxuICAgICAgICAgICAgYGluc3RlYWQgb2YgXFxgcmVmXFxgLmAsIGBcXG5Db21wb25lbnQgdGhhdCB3YXMgbWFkZSByZWFjdGl2ZTogYCwgdHlwZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2bm9kZSA9IHtcclxuICAgICAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcclxuICAgICAgICBbXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi9dOiB0cnVlLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgcHJvcHMsXHJcbiAgICAgICAga2V5OiBwcm9wcyAmJiBub3JtYWxpemVLZXkocHJvcHMpLFxyXG4gICAgICAgIHJlZjogcHJvcHMgJiYgbm9ybWFsaXplUmVmKHByb3BzKSxcclxuICAgICAgICBzY29wZUlkOiBjdXJyZW50U2NvcGVJZCxcclxuICAgICAgICBjaGlsZHJlbjogbnVsbCxcclxuICAgICAgICBjb21wb25lbnQ6IG51bGwsXHJcbiAgICAgICAgc3VzcGVuc2U6IG51bGwsXHJcbiAgICAgICAgc3NDb250ZW50OiBudWxsLFxyXG4gICAgICAgIHNzRmFsbGJhY2s6IG51bGwsXHJcbiAgICAgICAgZGlyczogbnVsbCxcclxuICAgICAgICB0cmFuc2l0aW9uOiBudWxsLFxyXG4gICAgICAgIGVsOiBudWxsLFxyXG4gICAgICAgIGFuY2hvcjogbnVsbCxcclxuICAgICAgICB0YXJnZXQ6IG51bGwsXHJcbiAgICAgICAgdGFyZ2V0QW5jaG9yOiBudWxsLFxyXG4gICAgICAgIHN0YXRpY0NvdW50OiAwLFxyXG4gICAgICAgIHNoYXBlRmxhZyxcclxuICAgICAgICBwYXRjaEZsYWcsXHJcbiAgICAgICAgZHluYW1pY1Byb3BzLFxyXG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbjogbnVsbCxcclxuICAgICAgICBhcHBDb250ZXh0OiBudWxsXHJcbiAgICB9O1xyXG4gICAgLy8gdmFsaWRhdGUga2V5XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHZub2RlLmtleSAhPT0gdm5vZGUua2V5KSB7XHJcbiAgICAgICAgd2FybihgVk5vZGUgY3JlYXRlZCB3aXRoIGludmFsaWQga2V5IChOYU4pLiBWTm9kZSB0eXBlOmAsIHZub2RlLnR5cGUpO1xyXG4gICAgfVxyXG4gICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuKTtcclxuICAgIC8vIG5vcm1hbGl6ZSBzdXNwZW5zZSBjaGlsZHJlblxyXG4gICAgaWYgKCBzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnQsIGZhbGxiYWNrIH0gPSBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuKHZub2RlKTtcclxuICAgICAgICB2bm9kZS5zc0NvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIHZub2RlLnNzRmFsbGJhY2sgPSBmYWxsYmFjaztcclxuICAgIH1cclxuICAgIGlmIChzaG91bGRUcmFjayA+IDAgJiZcclxuICAgICAgICAvLyBhdm9pZCBhIGJsb2NrIG5vZGUgZnJvbSB0cmFja2luZyBpdHNlbGZcclxuICAgICAgICAhaXNCbG9ja05vZGUgJiZcclxuICAgICAgICAvLyBoYXMgY3VycmVudCBwYXJlbnQgYmxvY2tcclxuICAgICAgICBjdXJyZW50QmxvY2sgJiZcclxuICAgICAgICAvLyBwcmVzZW5jZSBvZiBhIHBhdGNoIGZsYWcgaW5kaWNhdGVzIHRoaXMgbm9kZSBuZWVkcyBwYXRjaGluZyBvbiB1cGRhdGVzLlxyXG4gICAgICAgIC8vIGNvbXBvbmVudCBub2RlcyBhbHNvIHNob3VsZCBhbHdheXMgYmUgcGF0Y2hlZCwgYmVjYXVzZSBldmVuIGlmIHRoZVxyXG4gICAgICAgIC8vIGNvbXBvbmVudCBkb2Vzbid0IG5lZWQgdG8gdXBkYXRlLCBpdCBuZWVkcyB0byBwZXJzaXN0IHRoZSBpbnN0YW5jZSBvbiB0b1xyXG4gICAgICAgIC8vIHRoZSBuZXh0IHZub2RlIHNvIHRoYXQgaXQgY2FuIGJlIHByb3Blcmx5IHVubW91bnRlZCBsYXRlci5cclxuICAgICAgICAocGF0Y2hGbGFnID4gMCB8fCBzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykgJiZcclxuICAgICAgICAvLyB0aGUgRVZFTlRTIGZsYWcgaXMgb25seSBmb3IgaHlkcmF0aW9uIGFuZCBpZiBpdCBpcyB0aGUgb25seSBmbGFnLCB0aGVcclxuICAgICAgICAvLyB2bm9kZSBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgZHluYW1pYyBkdWUgdG8gaGFuZGxlciBjYWNoaW5nLlxyXG4gICAgICAgIHBhdGNoRmxhZyAhPT0gMzIgLyogSFlEUkFURV9FVkVOVFMgKi8pIHtcclxuICAgICAgICBjdXJyZW50QmxvY2sucHVzaCh2bm9kZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn1cclxuZnVuY3Rpb24gY2xvbmVWTm9kZSh2bm9kZSwgZXh0cmFQcm9wcywgbWVyZ2VSZWYgPSBmYWxzZSkge1xyXG4gICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IE5PVCB1c2luZyBzcHJlYWQgb3IgZXh0ZW5kIHRvIGF2b2lkIHRoZSBydW50aW1lXHJcbiAgICAvLyBrZXkgZW51bWVyYXRpb24gY29zdC5cclxuICAgIGNvbnN0IHsgcHJvcHMsIHJlZiwgcGF0Y2hGbGFnIH0gPSB2bm9kZTtcclxuICAgIGNvbnN0IG1lcmdlZFByb3BzID0gZXh0cmFQcm9wcyA/IG1lcmdlUHJvcHMocHJvcHMgfHwge30sIGV4dHJhUHJvcHMpIDogcHJvcHM7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxyXG4gICAgICAgIFtcIl9fdl9za2lwXCIgLyogU0tJUCAqL106IHRydWUsXHJcbiAgICAgICAgdHlwZTogdm5vZGUudHlwZSxcclxuICAgICAgICBwcm9wczogbWVyZ2VkUHJvcHMsXHJcbiAgICAgICAga2V5OiBtZXJnZWRQcm9wcyAmJiBub3JtYWxpemVLZXkobWVyZ2VkUHJvcHMpLFxyXG4gICAgICAgIHJlZjogZXh0cmFQcm9wcyAmJiBleHRyYVByb3BzLnJlZlxyXG4gICAgICAgICAgICA/IC8vICMyMDc4IGluIHRoZSBjYXNlIG9mIDxjb21wb25lbnQgOmlzPVwidm5vZGVcIiByZWY9XCJleHRyYVwiLz5cclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB2bm9kZSBpdHNlbGYgYWxyZWFkeSBoYXMgYSByZWYsIGNsb25lVk5vZGUgd2lsbCBuZWVkIHRvIG1lcmdlXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgcmVmcyBzbyB0aGUgc2luZ2xlIHZub2RlIGNhbiBiZSBzZXQgb24gbXVsdGlwbGUgcmVmc1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VSZWYgJiYgcmVmXHJcbiAgICAgICAgICAgICAgICAgICAgPyBpc0FycmF5KHJlZilcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWYuY29uY2F0KG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbcmVmLCBub3JtYWxpemVSZWYoZXh0cmFQcm9wcyldXHJcbiAgICAgICAgICAgICAgICAgICAgOiBub3JtYWxpemVSZWYoZXh0cmFQcm9wcylcclxuICAgICAgICAgICAgOiByZWYsXHJcbiAgICAgICAgc2NvcGVJZDogdm5vZGUuc2NvcGVJZCxcclxuICAgICAgICBjaGlsZHJlbjogdm5vZGUuY2hpbGRyZW4sXHJcbiAgICAgICAgdGFyZ2V0OiB2bm9kZS50YXJnZXQsXHJcbiAgICAgICAgdGFyZ2V0QW5jaG9yOiB2bm9kZS50YXJnZXRBbmNob3IsXHJcbiAgICAgICAgc3RhdGljQ291bnQ6IHZub2RlLnN0YXRpY0NvdW50LFxyXG4gICAgICAgIHNoYXBlRmxhZzogdm5vZGUuc2hhcGVGbGFnLFxyXG4gICAgICAgIC8vIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgd2l0aCBleHRyYSBwcm9wcywgd2UgY2FuIG5vIGxvbmdlciBhc3N1bWUgaXRzXHJcbiAgICAgICAgLy8gZXhpc3RpbmcgcGF0Y2ggZmxhZyB0byBiZSByZWxpYWJsZSBhbmQgbmVlZCB0byBhZGQgdGhlIEZVTExfUFJPUFMgZmxhZy5cclxuICAgICAgICAvLyBub3RlOiBwZXJzZXJ2ZSBmbGFnIGZvciBmcmFnbWVudHMgc2luY2UgdGhleSB1c2UgdGhlIGZsYWcgZm9yIGNoaWxkcmVuXHJcbiAgICAgICAgLy8gZmFzdCBwYXRocyBvbmx5LlxyXG4gICAgICAgIHBhdGNoRmxhZzogZXh0cmFQcm9wcyAmJiB2bm9kZS50eXBlICE9PSBGcmFnbWVudFxyXG4gICAgICAgICAgICA/IHBhdGNoRmxhZyA9PT0gLTEgLy8gaG9pc3RlZCBub2RlXHJcbiAgICAgICAgICAgICAgICA/IDE2IC8qIEZVTExfUFJPUFMgKi9cclxuICAgICAgICAgICAgICAgIDogcGF0Y2hGbGFnIHwgMTYgLyogRlVMTF9QUk9QUyAqL1xyXG4gICAgICAgICAgICA6IHBhdGNoRmxhZyxcclxuICAgICAgICBkeW5hbWljUHJvcHM6IHZub2RlLmR5bmFtaWNQcm9wcyxcclxuICAgICAgICBkeW5hbWljQ2hpbGRyZW46IHZub2RlLmR5bmFtaWNDaGlsZHJlbixcclxuICAgICAgICBhcHBDb250ZXh0OiB2bm9kZS5hcHBDb250ZXh0LFxyXG4gICAgICAgIGRpcnM6IHZub2RlLmRpcnMsXHJcbiAgICAgICAgdHJhbnNpdGlvbjogdm5vZGUudHJhbnNpdGlvbixcclxuICAgICAgICAvLyBUaGVzZSBzaG91bGQgdGVjaG5pY2FsbHkgb25seSBiZSBub24tbnVsbCBvbiBtb3VudGVkIFZOb2Rlcy4gSG93ZXZlcixcclxuICAgICAgICAvLyB0aGV5ICpzaG91bGQqIGJlIGNvcGllZCBmb3Iga2VwdC1hbGl2ZSB2bm9kZXMuIFNvIHdlIGp1c3QgYWx3YXlzIGNvcHlcclxuICAgICAgICAvLyB0aGVtIHNpbmNlIHRoZW0gYmVpbmcgbm9uLW51bGwgZHVyaW5nIGEgbW91bnQgZG9lc24ndCBhZmZlY3QgdGhlIGxvZ2ljIGFzXHJcbiAgICAgICAgLy8gdGhleSB3aWxsIHNpbXBseSBiZSBvdmVyd3JpdHRlbi5cclxuICAgICAgICBjb21wb25lbnQ6IHZub2RlLmNvbXBvbmVudCxcclxuICAgICAgICBzdXNwZW5zZTogdm5vZGUuc3VzcGVuc2UsXHJcbiAgICAgICAgc3NDb250ZW50OiB2bm9kZS5zc0NvbnRlbnQgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0NvbnRlbnQpLFxyXG4gICAgICAgIHNzRmFsbGJhY2s6IHZub2RlLnNzRmFsbGJhY2sgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0ZhbGxiYWNrKSxcclxuICAgICAgICBlbDogdm5vZGUuZWwsXHJcbiAgICAgICAgYW5jaG9yOiB2bm9kZS5hbmNob3JcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodGV4dCA9ICcgJywgZmxhZyA9IDApIHtcclxuICAgIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCB0ZXh0LCBmbGFnKTtcclxufVxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY1ZOb2RlKGNvbnRlbnQsIG51bWJlck9mTm9kZXMpIHtcclxuICAgIC8vIEEgc3RhdGljIHZub2RlIGNhbiBjb250YWluIG11bHRpcGxlIHN0cmluZ2lmaWVkIGVsZW1lbnRzLCBhbmQgdGhlIG51bWJlclxyXG4gICAgLy8gb2YgZWxlbWVudHMgaXMgbmVjZXNzYXJ5IGZvciBoeWRyYXRpb24uXHJcbiAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKFN0YXRpYywgbnVsbCwgY29udGVudCk7XHJcbiAgICB2bm9kZS5zdGF0aWNDb3VudCA9IG51bWJlck9mTm9kZXM7XHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50Vk5vZGUodGV4dCA9ICcnLCBcclxuLy8gd2hlbiB1c2VkIGFzIHRoZSB2LWVsc2UgYnJhbmNoLCB0aGUgY29tbWVudCBub2RlIG11c3QgYmUgY3JlYXRlZCBhcyBhXHJcbi8vIGJsb2NrIHRvIGVuc3VyZSBjb3JyZWN0IHVwZGF0ZXMuXHJcbmFzQmxvY2sgPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIGFzQmxvY2tcclxuICAgICAgICA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soQ29tbWVudCwgbnVsbCwgdGV4dCkpXHJcbiAgICAgICAgOiBjcmVhdGVWTm9kZShDb21tZW50LCBudWxsLCB0ZXh0KTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVWTm9kZShjaGlsZCkge1xyXG4gICAgaWYgKGNoaWxkID09IG51bGwgfHwgdHlwZW9mIGNoaWxkID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAvLyBlbXB0eSBwbGFjZWhvbGRlclxyXG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShDb21tZW50KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkoY2hpbGQpKSB7XHJcbiAgICAgICAgLy8gZnJhZ21lbnRcclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoRnJhZ21lbnQsIG51bGwsIGNoaWxkKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAvLyBhbHJlYWR5IHZub2RlLCB0aGlzIHNob3VsZCBiZSB0aGUgbW9zdCBjb21tb24gc2luY2UgY29tcGlsZWQgdGVtcGxhdGVzXHJcbiAgICAgICAgLy8gYWx3YXlzIHByb2R1Y2UgYWxsLXZub2RlIGNoaWxkcmVuIGFycmF5c1xyXG4gICAgICAgIHJldHVybiBjaGlsZC5lbCA9PT0gbnVsbCA/IGNoaWxkIDogY2xvbmVWTm9kZShjaGlsZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBzdHJpbmdzIGFuZCBudW1iZXJzXHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFRleHQsIG51bGwsIFN0cmluZyhjaGlsZCkpO1xyXG4gICAgfVxyXG59XHJcbi8vIG9wdGltaXplZCBub3JtYWxpemF0aW9uIGZvciB0ZW1wbGF0ZS1jb21waWxlZCByZW5kZXIgZm5zXHJcbmZ1bmN0aW9uIGNsb25lSWZNb3VudGVkKGNoaWxkKSB7XHJcbiAgICByZXR1cm4gY2hpbGQuZWwgPT09IG51bGwgPyBjaGlsZCA6IGNsb25lVk5vZGUoY2hpbGQpO1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbikge1xyXG4gICAgbGV0IHR5cGUgPSAwO1xyXG4gICAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHZub2RlO1xyXG4gICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcclxuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KGNoaWxkcmVuKSkge1xyXG4gICAgICAgIHR5cGUgPSAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovIHx8IHNoYXBlRmxhZyAmIDY0IC8qIFRFTEVQT1JUICovKSB7XHJcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSBzbG90IHRvIHBsYWluIGNoaWxkcmVuIGZvciBwbGFpbiBlbGVtZW50IGFuZCBUZWxlcG9ydFxyXG4gICAgICAgICAgICBjb25zdCBzbG90ID0gY2hpbGRyZW4uZGVmYXVsdDtcclxuICAgICAgICAgICAgaWYgKHNsb3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIF9jIG1hcmtlciBpcyBhZGRlZCBieSB3aXRoQ3R4KCkgaW5kaWNhdGluZyB0aGlzIGlzIGEgY29tcGlsZWQgc2xvdFxyXG4gICAgICAgICAgICAgICAgc2xvdC5fYyAmJiBzZXRDb21waWxlZFNsb3RSZW5kZXJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgc2xvdCgpKTtcclxuICAgICAgICAgICAgICAgIHNsb3QuX2MgJiYgc2V0Q29tcGlsZWRTbG90UmVuZGVyaW5nKC0xKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0eXBlID0gMzIgLyogU0xPVFNfQ0hJTERSRU4gKi87XHJcbiAgICAgICAgICAgIGNvbnN0IHNsb3RGbGFnID0gY2hpbGRyZW4uXztcclxuICAgICAgICAgICAgaWYgKCFzbG90RmxhZyAmJiAhKEludGVybmFsT2JqZWN0S2V5IGluIGNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uX2N0eCA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzbG90RmxhZyA9PT0gMyAvKiBGT1JXQVJERUQgKi8gJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhIGNoaWxkIGNvbXBvbmVudCByZWNlaXZlcyBmb3J3YXJkZWQgc2xvdHMgZnJvbSB0aGUgcGFyZW50LlxyXG4gICAgICAgICAgICAgICAgLy8gaXRzIHNsb3QgdHlwZSBpcyBkZXRlcm1pbmVkIGJ5IGl0cyBwYXJlbnQncyBzbG90IHR5cGUuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnZub2RlLnBhdGNoRmxhZyAmIDEwMjQgLyogRFlOQU1JQ19TTE9UUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLl8gPSAyIC8qIERZTkFNSUMgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUucGF0Y2hGbGFnIHw9IDEwMjQgLyogRFlOQU1JQ19TTE9UUyAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLl8gPSAxIC8qIFNUQUJMRSAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgY2hpbGRyZW4gPSB7IGRlZmF1bHQ6IGNoaWxkcmVuLCBfY3R4OiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfTtcclxuICAgICAgICB0eXBlID0gMzIgLyogU0xPVFNfQ0hJTERSRU4gKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjaGlsZHJlbiA9IFN0cmluZyhjaGlsZHJlbik7XHJcbiAgICAgICAgLy8gZm9yY2UgdGVsZXBvcnQgY2hpbGRyZW4gdG8gYXJyYXkgc28gaXQgY2FuIGJlIG1vdmVkIGFyb3VuZFxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICB0eXBlID0gMTYgLyogQVJSQVlfQ0hJTERSRU4gKi87XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHlwZSA9IDggLyogVEVYVF9DSElMRFJFTiAqLztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2bm9kZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgdm5vZGUuc2hhcGVGbGFnIHw9IHR5cGU7XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VQcm9wcyguLi5hcmdzKSB7XHJcbiAgICBjb25zdCByZXQgPSBleHRlbmQoe30sIGFyZ3NbMF0pO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgdG9NZXJnZSA9IGFyZ3NbaV07XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdG9NZXJnZSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0LmNsYXNzICE9PSB0b01lcmdlLmNsYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0LmNsYXNzID0gbm9ybWFsaXplQ2xhc3MoW3JldC5jbGFzcywgdG9NZXJnZS5jbGFzc10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0LnN0eWxlID0gbm9ybWFsaXplU3R5bGUoW3JldC5zdHlsZSwgdG9NZXJnZS5zdHlsZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzT24oa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSByZXRba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluY29taW5nID0gdG9NZXJnZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nICE9PSBpbmNvbWluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldFtrZXldID0gZXhpc3RpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIHRvTWVyZ2Vba2V5XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpbmNvbWluZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXRba2V5XSA9IHRvTWVyZ2Vba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cblxuZnVuY3Rpb24gcHJvdmlkZShrZXksIHZhbHVlKSB7XHJcbiAgICBpZiAoIWN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgcHJvdmlkZSgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbGV0IHByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnByb3ZpZGVzO1xyXG4gICAgICAgIC8vIGJ5IGRlZmF1bHQgYW4gaW5zdGFuY2UgaW5oZXJpdHMgaXRzIHBhcmVudCdzIHByb3ZpZGVzIG9iamVjdFxyXG4gICAgICAgIC8vIGJ1dCB3aGVuIGl0IG5lZWRzIHRvIHByb3ZpZGUgdmFsdWVzIG9mIGl0cyBvd24sIGl0IGNyZWF0ZXMgaXRzXHJcbiAgICAgICAgLy8gb3duIHByb3ZpZGVzIG9iamVjdCB1c2luZyBwYXJlbnQgcHJvdmlkZXMgb2JqZWN0IGFzIHByb3RvdHlwZS5cclxuICAgICAgICAvLyB0aGlzIHdheSBpbiBgaW5qZWN0YCB3ZSBjYW4gc2ltcGx5IGxvb2sgdXAgaW5qZWN0aW9ucyBmcm9tIGRpcmVjdFxyXG4gICAgICAgIC8vIHBhcmVudCBhbmQgbGV0IHRoZSBwcm90b3R5cGUgY2hhaW4gZG8gdGhlIHdvcmsuXHJcbiAgICAgICAgY29uc3QgcGFyZW50UHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucGFyZW50ICYmIGN1cnJlbnRJbnN0YW5jZS5wYXJlbnQucHJvdmlkZXM7XHJcbiAgICAgICAgaWYgKHBhcmVudFByb3ZpZGVzID09PSBwcm92aWRlcykge1xyXG4gICAgICAgICAgICBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50UHJvdmlkZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUUyBkb2Vzbid0IGFsbG93IHN5bWJvbCBhcyBpbmRleCB0eXBlXHJcbiAgICAgICAgcHJvdmlkZXNba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGluamVjdChrZXksIGRlZmF1bHRWYWx1ZSwgdHJlYXREZWZhdWx0QXNGYWN0b3J5ID0gZmFsc2UpIHtcclxuICAgIC8vIGZhbGxiYWNrIHRvIGBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2VgIHNvIHRoYXQgdGhpcyBjYW4gYmUgY2FsbGVkIGluXHJcbiAgICAvLyBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZSB8fCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAvLyAjMjQwMFxyXG4gICAgICAgIC8vIHRvIHN1cHBvcnQgYGFwcC51c2VgIHBsdWdpbnMsXHJcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gYXBwQ29udGV4dCdzIGBwcm92aWRlc2AgaWYgdGhlIGludGFuY2UgaXMgYXQgcm9vdFxyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVzID0gaW5zdGFuY2UucGFyZW50ID09IG51bGxcclxuICAgICAgICAgICAgPyBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0ICYmIGluc3RhbmNlLnZub2RlLmFwcENvbnRleHQucHJvdmlkZXNcclxuICAgICAgICAgICAgOiBpbnN0YW5jZS5wYXJlbnQucHJvdmlkZXM7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVzICYmIGtleSBpbiBwcm92aWRlcykge1xyXG4gICAgICAgICAgICAvLyBUUyBkb2Vzbid0IGFsbG93IHN5bWJvbCBhcyBpbmRleCB0eXBlXHJcbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJlYXREZWZhdWx0QXNGYWN0b3J5ICYmIGlzRnVuY3Rpb24oZGVmYXVsdFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgPyBkZWZhdWx0VmFsdWUoKVxyXG4gICAgICAgICAgICAgICAgOiBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBpbmplY3Rpb24gXCIke1N0cmluZyhrZXkpfVwiIG5vdCBmb3VuZC5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGBpbmplY3QoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpIG9yIGZ1bmN0aW9uYWwgY29tcG9uZW50cy5gKTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBjcmVhdGVEdXBsaWNhdGVDaGVja2VyKCkge1xyXG4gICAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgcmV0dXJuICh0eXBlLCBrZXkpID0+IHtcclxuICAgICAgICBpZiAoY2FjaGVba2V5XSkge1xyXG4gICAgICAgICAgICB3YXJuKGAke3R5cGV9IHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluICR7Y2FjaGVba2V5XX0uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjYWNoZVtrZXldID0gdHlwZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmxldCBpc0luQmVmb3JlQ3JlYXRlID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSwgb3B0aW9ucywgZGVmZXJyZWREYXRhID0gW10sIGRlZmVycmVkV2F0Y2ggPSBbXSwgZGVmZXJyZWRQcm92aWRlID0gW10sIGFzTWl4aW4gPSBmYWxzZSkge1xyXG4gICAgY29uc3QgeyBcclxuICAgIC8vIGNvbXBvc2l0aW9uXHJcbiAgICBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zLCBcclxuICAgIC8vIHN0YXRlXHJcbiAgICBkYXRhOiBkYXRhT3B0aW9ucywgY29tcHV0ZWQ6IGNvbXB1dGVkT3B0aW9ucywgbWV0aG9kcywgd2F0Y2g6IHdhdGNoT3B0aW9ucywgcHJvdmlkZTogcHJvdmlkZU9wdGlvbnMsIGluamVjdDogaW5qZWN0T3B0aW9ucywgXHJcbiAgICAvLyBhc3NldHNcclxuICAgIGNvbXBvbmVudHMsIGRpcmVjdGl2ZXMsIFxyXG4gICAgLy8gbGlmZWN5Y2xlXHJcbiAgICBiZWZvcmVNb3VudCwgbW91bnRlZCwgYmVmb3JlVXBkYXRlLCB1cGRhdGVkLCBhY3RpdmF0ZWQsIGRlYWN0aXZhdGVkLCBiZWZvcmVEZXN0cm95LCBiZWZvcmVVbm1vdW50LCBkZXN0cm95ZWQsIHVubW91bnRlZCwgcmVuZGVyLCByZW5kZXJUcmFja2VkLCByZW5kZXJUcmlnZ2VyZWQsIGVycm9yQ2FwdHVyZWQgfSA9IG9wdGlvbnM7XHJcbiAgICBjb25zdCBwdWJsaWNUaGlzID0gaW5zdGFuY2UucHJveHk7XHJcbiAgICBjb25zdCBjdHggPSBpbnN0YW5jZS5jdHg7XHJcbiAgICBjb25zdCBnbG9iYWxNaXhpbnMgPSBpbnN0YW5jZS5hcHBDb250ZXh0Lm1peGlucztcclxuICAgIGlmIChhc01peGluICYmIHJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1ApIHtcclxuICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSByZW5kZXI7XHJcbiAgICB9XHJcbiAgICAvLyBhcHBseU9wdGlvbnMgaXMgY2FsbGVkIG5vbi1hcy1taXhpbiBvbmNlIHBlciBpbnN0YW5jZVxyXG4gICAgaWYgKCFhc01peGluKSB7XHJcbiAgICAgICAgaXNJbkJlZm9yZUNyZWF0ZSA9IHRydWU7XHJcbiAgICAgICAgY2FsbFN5bmNIb29rKCdiZWZvcmVDcmVhdGUnLCBcImJjXCIgLyogQkVGT1JFX0NSRUFURSAqLywgb3B0aW9ucywgaW5zdGFuY2UsIGdsb2JhbE1peGlucyk7XHJcbiAgICAgICAgaXNJbkJlZm9yZUNyZWF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgZmlyc3RcclxuICAgICAgICBhcHBseU1peGlucyhpbnN0YW5jZSwgZ2xvYmFsTWl4aW5zLCBkZWZlcnJlZERhdGEsIGRlZmVycmVkV2F0Y2gsIGRlZmVycmVkUHJvdmlkZSk7XHJcbiAgICB9XHJcbiAgICAvLyBleHRlbmRpbmcgYSBiYXNlIGNvbXBvbmVudC4uLlxyXG4gICAgaWYgKGV4dGVuZHNPcHRpb25zKSB7XHJcbiAgICAgICAgYXBwbHlPcHRpb25zKGluc3RhbmNlLCBleHRlbmRzT3B0aW9ucywgZGVmZXJyZWREYXRhLCBkZWZlcnJlZFdhdGNoLCBkZWZlcnJlZFByb3ZpZGUsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgLy8gbG9jYWwgbWl4aW5zXHJcbiAgICBpZiAobWl4aW5zKSB7XHJcbiAgICAgICAgYXBwbHlNaXhpbnMoaW5zdGFuY2UsIG1peGlucywgZGVmZXJyZWREYXRhLCBkZWZlcnJlZFdhdGNoLCBkZWZlcnJlZFByb3ZpZGUpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIDogbnVsbDtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjb25zdCBbcHJvcHNPcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcclxuICAgICAgICBpZiAocHJvcHNPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiUHJvcHNcIiAvKiBQUk9QUyAqLywga2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG9wdGlvbnMgaW5pdGlhbGl6YXRpb24gb3JkZXIgKHRvIGJlIGNvbnNpc3RlbnQgd2l0aCBWdWUgMik6XHJcbiAgICAvLyAtIHByb3BzIChhbHJlYWR5IGRvbmUgb3V0c2lkZSBvZiB0aGlzIGZ1bmN0aW9uKVxyXG4gICAgLy8gLSBpbmplY3RcclxuICAgIC8vIC0gbWV0aG9kc1xyXG4gICAgLy8gLSBkYXRhIChkZWZlcnJlZCBzaW5jZSBpdCByZWxpZXMgb24gYHRoaXNgIGFjY2VzcylcclxuICAgIC8vIC0gY29tcHV0ZWRcclxuICAgIC8vIC0gd2F0Y2ggKGRlZmVycmVkIHNpbmNlIGl0IHJlbGllcyBvbiBgdGhpc2AgYWNjZXNzKVxyXG4gICAgaWYgKGluamVjdE9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoaXNBcnJheShpbmplY3RPcHRpb25zKSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluamVjdE9wdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGluamVjdE9wdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IGluamVjdChrZXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkluamVjdFwiIC8qIElOSkVDVCAqLywga2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW5qZWN0T3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0ID0gaW5qZWN0T3B0aW9uc1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KG9wdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHhba2V5XSA9IGluamVjdChvcHQuZnJvbSB8fCBrZXksIG9wdC5kZWZhdWx0LCB0cnVlIC8qIHRyZWF0IGRlZmF1bHQgZnVuY3Rpb24gYXMgZmFjdG9yeSAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHhba2V5XSA9IGluamVjdChvcHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkluamVjdFwiIC8qIElOSkVDVCAqLywga2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChtZXRob2RzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbWV0aG9kcykge1xyXG4gICAgICAgICAgICBjb25zdCBtZXRob2RIYW5kbGVyID0gbWV0aG9kc1trZXldO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihtZXRob2RIYW5kbGVyKSkge1xyXG4gICAgICAgICAgICAgICAgY3R4W2tleV0gPSBtZXRob2RIYW5kbGVyLmJpbmQocHVibGljVGhpcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiTWV0aG9kc1wiIC8qIE1FVEhPRFMgKi8sIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBNZXRob2QgXCIke2tleX1cIiBoYXMgdHlwZSBcIiR7dHlwZW9mIG1ldGhvZEhhbmRsZXJ9XCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBgICtcclxuICAgICAgICAgICAgICAgICAgICBgRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghYXNNaXhpbikge1xyXG4gICAgICAgIGlmIChkZWZlcnJlZERhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGRlZmVycmVkRGF0YS5mb3JFYWNoKGRhdGFGbiA9PiByZXNvbHZlRGF0YShpbnN0YW5jZSwgZGF0YUZuLCBwdWJsaWNUaGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkYXRhT3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXNvbHZlRGF0YShpbnN0YW5jZSwgZGF0YU9wdGlvbnMsIHB1YmxpY1RoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhd0RhdGEgPSB0b1JhdyhpbnN0YW5jZS5kYXRhKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiRGF0YVwiIC8qIERBVEEgKi8sIGtleSk7XHJcbiAgICAgICAgICAgICAgICAvLyBleHBvc2UgZGF0YSBvbiBjdHggZHVyaW5nIGRldlxyXG4gICAgICAgICAgICAgICAgaWYgKGtleVswXSAhPT0gJyQnICYmIGtleVswXSAhPT0gJ18nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiByYXdEYXRhW2tleV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZGF0YU9wdGlvbnMpIHtcclxuICAgICAgICBkZWZlcnJlZERhdGEucHVzaChkYXRhT3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBpZiAoY29tcHV0ZWRPcHRpb25zKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY29tcHV0ZWRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdCA9IGNvbXB1dGVkT3B0aW9uc1trZXldO1xyXG4gICAgICAgICAgICBjb25zdCBnZXQgPSBpc0Z1bmN0aW9uKG9wdClcclxuICAgICAgICAgICAgICAgID8gb3B0LmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgIDogaXNGdW5jdGlvbihvcHQuZ2V0KVxyXG4gICAgICAgICAgICAgICAgICAgID8gb3B0LmdldC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBOT09QO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGdldCA9PT0gTk9PUCkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgQ29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBoYXMgbm8gZ2V0dGVyLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHNldCA9ICFpc0Z1bmN0aW9uKG9wdCkgJiYgaXNGdW5jdGlvbihvcHQuc2V0KVxyXG4gICAgICAgICAgICAgICAgPyBvcHQuc2V0LmJpbmQocHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgIDogKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgPyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYFdyaXRlIG9wZXJhdGlvbiBmYWlsZWQ6IGNvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgcmVhZG9ubHkuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDogTk9PUDtcclxuICAgICAgICAgICAgY29uc3QgYyA9IGNvbXB1dGVkKHtcclxuICAgICAgICAgICAgICAgIGdldCxcclxuICAgICAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBjLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgc2V0OiB2ID0+IChjLnZhbHVlID0gdilcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkNvbXB1dGVkXCIgLyogQ09NUFVURUQgKi8sIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAod2F0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgZGVmZXJyZWRXYXRjaC5wdXNoKHdhdGNoT3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFzTWl4aW4gJiYgZGVmZXJyZWRXYXRjaC5sZW5ndGgpIHtcclxuICAgICAgICBkZWZlcnJlZFdhdGNoLmZvckVhY2god2F0Y2hPcHRpb25zID0+IHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gd2F0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGVXYXRjaGVyKHdhdGNoT3B0aW9uc1trZXldLCBjdHgsIHB1YmxpY1RoaXMsIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChwcm92aWRlT3B0aW9ucykge1xyXG4gICAgICAgIGRlZmVycmVkUHJvdmlkZS5wdXNoKHByb3ZpZGVPcHRpb25zKTtcclxuICAgIH1cclxuICAgIGlmICghYXNNaXhpbiAmJiBkZWZlcnJlZFByb3ZpZGUubGVuZ3RoKSB7XHJcbiAgICAgICAgZGVmZXJyZWRQcm92aWRlLmZvckVhY2gocHJvdmlkZU9wdGlvbnMgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcm92aWRlcyA9IGlzRnVuY3Rpb24ocHJvdmlkZU9wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICA/IHByb3ZpZGVPcHRpb25zLmNhbGwocHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgIDogcHJvdmlkZU9wdGlvbnM7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3ZpZGVzKSB7XHJcbiAgICAgICAgICAgICAgICBwcm92aWRlKGtleSwgcHJvdmlkZXNba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIGFzc2V0IG9wdGlvbnMuXHJcbiAgICAvLyBUbyByZWR1Y2UgbWVtb3J5IHVzYWdlLCBvbmx5IGNvbXBvbmVudHMgd2l0aCBtaXhpbnMgb3IgZXh0ZW5kcyB3aWxsIGhhdmVcclxuICAgIC8vIHJlc29sdmVkIGFzc2V0IHJlZ2lzdHJ5IGF0dGFjaGVkIHRvIGluc3RhbmNlLlxyXG4gICAgaWYgKGFzTWl4aW4pIHtcclxuICAgICAgICBpZiAoY29tcG9uZW50cykge1xyXG4gICAgICAgICAgICBleHRlbmQoaW5zdGFuY2UuY29tcG9uZW50cyB8fFxyXG4gICAgICAgICAgICAgICAgKGluc3RhbmNlLmNvbXBvbmVudHMgPSBleHRlbmQoe30sIGluc3RhbmNlLnR5cGUuY29tcG9uZW50cykpLCBjb21wb25lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcmVjdGl2ZXMpIHtcclxuICAgICAgICAgICAgZXh0ZW5kKGluc3RhbmNlLmRpcmVjdGl2ZXMgfHxcclxuICAgICAgICAgICAgICAgIChpbnN0YW5jZS5kaXJlY3RpdmVzID0gZXh0ZW5kKHt9LCBpbnN0YW5jZS50eXBlLmRpcmVjdGl2ZXMpKSwgZGlyZWN0aXZlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gbGlmZWN5Y2xlIG9wdGlvbnNcclxuICAgIGlmICghYXNNaXhpbikge1xyXG4gICAgICAgIGNhbGxTeW5jSG9vaygnY3JlYXRlZCcsIFwiY1wiIC8qIENSRUFURUQgKi8sIG9wdGlvbnMsIGluc3RhbmNlLCBnbG9iYWxNaXhpbnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGJlZm9yZU1vdW50KSB7XHJcbiAgICAgICAgb25CZWZvcmVNb3VudChiZWZvcmVNb3VudC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmIChtb3VudGVkKSB7XHJcbiAgICAgICAgb25Nb3VudGVkKG1vdW50ZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoYmVmb3JlVXBkYXRlKSB7XHJcbiAgICAgICAgb25CZWZvcmVVcGRhdGUoYmVmb3JlVXBkYXRlLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKHVwZGF0ZWQpIHtcclxuICAgICAgICBvblVwZGF0ZWQodXBkYXRlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmIChhY3RpdmF0ZWQpIHtcclxuICAgICAgICBvbkFjdGl2YXRlZChhY3RpdmF0ZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZGVhY3RpdmF0ZWQpIHtcclxuICAgICAgICBvbkRlYWN0aXZhdGVkKGRlYWN0aXZhdGVkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKGVycm9yQ2FwdHVyZWQpIHtcclxuICAgICAgICBvbkVycm9yQ2FwdHVyZWQoZXJyb3JDYXB0dXJlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmIChyZW5kZXJUcmFja2VkKSB7XHJcbiAgICAgICAgb25SZW5kZXJUcmFja2VkKHJlbmRlclRyYWNrZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVuZGVyVHJpZ2dlcmVkKSB7XHJcbiAgICAgICAgb25SZW5kZXJUcmlnZ2VyZWQocmVuZGVyVHJpZ2dlcmVkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBiZWZvcmVEZXN0cm95KSB7XHJcbiAgICAgICAgd2FybihgXFxgYmVmb3JlRGVzdHJveVxcYCBoYXMgYmVlbiByZW5hbWVkIHRvIFxcYGJlZm9yZVVubW91bnRcXGAuYCk7XHJcbiAgICB9XHJcbiAgICBpZiAoYmVmb3JlVW5tb3VudCkge1xyXG4gICAgICAgIG9uQmVmb3JlVW5tb3VudChiZWZvcmVVbm1vdW50LmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBkZXN0cm95ZWQpIHtcclxuICAgICAgICB3YXJuKGBcXGBkZXN0cm95ZWRcXGAgaGFzIGJlZW4gcmVuYW1lZCB0byBcXGB1bm1vdW50ZWRcXGAuYCk7XHJcbiAgICB9XHJcbiAgICBpZiAodW5tb3VudGVkKSB7XHJcbiAgICAgICAgb25Vbm1vdW50ZWQodW5tb3VudGVkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNhbGxTeW5jSG9vayhuYW1lLCB0eXBlLCBvcHRpb25zLCBpbnN0YW5jZSwgZ2xvYmFsTWl4aW5zKSB7XHJcbiAgICBjYWxsSG9va0Zyb21NaXhpbnMobmFtZSwgdHlwZSwgZ2xvYmFsTWl4aW5zLCBpbnN0YW5jZSk7XHJcbiAgICBjb25zdCB7IGV4dGVuZHM6IGJhc2UsIG1peGlucyB9ID0gb3B0aW9ucztcclxuICAgIGlmIChiYXNlKSB7XHJcbiAgICAgICAgY2FsbEhvb2tGcm9tRXh0ZW5kcyhuYW1lLCB0eXBlLCBiYXNlLCBpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBpZiAobWl4aW5zKSB7XHJcbiAgICAgICAgY2FsbEhvb2tGcm9tTWl4aW5zKG5hbWUsIHR5cGUsIG1peGlucywgaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VsZkhvb2sgPSBvcHRpb25zW25hbWVdO1xyXG4gICAgaWYgKHNlbGZIb29rKSB7XHJcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoc2VsZkhvb2suYmluZChpbnN0YW5jZS5wcm94eSksIGluc3RhbmNlLCB0eXBlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjYWxsSG9va0Zyb21FeHRlbmRzKG5hbWUsIHR5cGUsIGJhc2UsIGluc3RhbmNlKSB7XHJcbiAgICBpZiAoYmFzZS5leHRlbmRzKSB7XHJcbiAgICAgICAgY2FsbEhvb2tGcm9tRXh0ZW5kcyhuYW1lLCB0eXBlLCBiYXNlLmV4dGVuZHMsIGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJhc2VIb29rID0gYmFzZVtuYW1lXTtcclxuICAgIGlmIChiYXNlSG9vaykge1xyXG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGJhc2VIb29rLmJpbmQoaW5zdGFuY2UucHJveHkpLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2FsbEhvb2tGcm9tTWl4aW5zKG5hbWUsIHR5cGUsIG1peGlucywgaW5zdGFuY2UpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY2hhaW5lZE1peGlucyA9IG1peGluc1tpXS5taXhpbnM7XHJcbiAgICAgICAgaWYgKGNoYWluZWRNaXhpbnMpIHtcclxuICAgICAgICAgICAgY2FsbEhvb2tGcm9tTWl4aW5zKG5hbWUsIHR5cGUsIGNoYWluZWRNaXhpbnMsIGluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZm4gPSBtaXhpbnNbaV1bbmFtZV07XHJcbiAgICAgICAgaWYgKGZuKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuLmJpbmQoaW5zdGFuY2UucHJveHkpLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGFwcGx5TWl4aW5zKGluc3RhbmNlLCBtaXhpbnMsIGRlZmVycmVkRGF0YSwgZGVmZXJyZWRXYXRjaCwgZGVmZXJyZWRQcm92aWRlKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSwgbWl4aW5zW2ldLCBkZWZlcnJlZERhdGEsIGRlZmVycmVkV2F0Y2gsIGRlZmVycmVkUHJvdmlkZSwgdHJ1ZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZURhdGEoaW5zdGFuY2UsIGRhdGFGbiwgcHVibGljVGhpcykge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNGdW5jdGlvbihkYXRhRm4pKSB7XHJcbiAgICAgICAgd2FybihgVGhlIGRhdGEgb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbi4gYCArXHJcbiAgICAgICAgICAgIGBQbGFpbiBvYmplY3QgdXNhZ2UgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC5gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRhdGEgPSBkYXRhRm4uY2FsbChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNQcm9taXNlKGRhdGEpKSB7XHJcbiAgICAgICAgd2FybihgZGF0YSgpIHJldHVybmVkIGEgUHJvbWlzZSAtIG5vdGUgZGF0YSgpIGNhbm5vdCBiZSBhc3luYzsgSWYgeW91IGAgK1xyXG4gICAgICAgICAgICBgaW50ZW5kIHRvIHBlcmZvcm0gZGF0YSBmZXRjaGluZyBiZWZvcmUgY29tcG9uZW50IHJlbmRlcnMsIHVzZSBgICtcclxuICAgICAgICAgICAgYGFzeW5jIHNldHVwKCkgKyA8U3VzcGVuc2U+LmApO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBkYXRhKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuYCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpbnN0YW5jZS5kYXRhID09PSBFTVBUWV9PQkopIHtcclxuICAgICAgICBpbnN0YW5jZS5kYXRhID0gcmVhY3RpdmUoZGF0YSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBleGlzdGluZyBkYXRhOiB0aGlzIGlzIGEgbWl4aW4gb3IgZXh0ZW5kcy5cclxuICAgICAgICBleHRlbmQoaW5zdGFuY2UuZGF0YSwgZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlcihyYXcsIGN0eCwgcHVibGljVGhpcywga2V5KSB7XHJcbiAgICBjb25zdCBnZXR0ZXIgPSBrZXkuaW5jbHVkZXMoJy4nKVxyXG4gICAgICAgID8gY3JlYXRlUGF0aEdldHRlcihwdWJsaWNUaGlzLCBrZXkpXHJcbiAgICAgICAgOiAoKSA9PiBwdWJsaWNUaGlzW2tleV07XHJcbiAgICBpZiAoaXNTdHJpbmcocmF3KSkge1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBjdHhbcmF3XTtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xyXG4gICAgICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBoYW5kbGVyIHNwZWNpZmllZCBieSBrZXkgXCIke3Jhd31cImAsIGhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocmF3KSkge1xyXG4gICAgICAgIHdhdGNoKGdldHRlciwgcmF3LmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QocmF3KSkge1xyXG4gICAgICAgIGlmIChpc0FycmF5KHJhdykpIHtcclxuICAgICAgICAgICAgcmF3LmZvckVhY2gociA9PiBjcmVhdGVXYXRjaGVyKHIsIGN0eCwgcHVibGljVGhpcywga2V5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gaXNGdW5jdGlvbihyYXcuaGFuZGxlcilcclxuICAgICAgICAgICAgICAgID8gcmF3LmhhbmRsZXIuYmluZChwdWJsaWNUaGlzKVxyXG4gICAgICAgICAgICAgICAgOiBjdHhbcmF3LmhhbmRsZXJdO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xyXG4gICAgICAgICAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyLCByYXcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBoYW5kbGVyIHNwZWNpZmllZCBieSBrZXkgXCIke3Jhdy5oYW5kbGVyfVwiYCwgaGFuZGxlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIG9wdGlvbjogXCIke2tleX1cImAsIHJhdyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUGF0aEdldHRlcihjdHgsIHBhdGgpIHtcclxuICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBsZXQgY3VyID0gY3R4O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoICYmIGN1cjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGN1ciA9IGN1cltzZWdtZW50c1tpXV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXI7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCByYXcgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgY29uc3QgeyBfX21lcmdlZCwgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gcmF3O1xyXG4gICAgaWYgKF9fbWVyZ2VkKVxyXG4gICAgICAgIHJldHVybiBfX21lcmdlZDtcclxuICAgIGNvbnN0IGdsb2JhbE1peGlucyA9IGluc3RhbmNlLmFwcENvbnRleHQubWl4aW5zO1xyXG4gICAgaWYgKCFnbG9iYWxNaXhpbnMubGVuZ3RoICYmICFtaXhpbnMgJiYgIWV4dGVuZHNPcHRpb25zKVxyXG4gICAgICAgIHJldHVybiByYXc7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge307XHJcbiAgICBnbG9iYWxNaXhpbnMuZm9yRWFjaChtID0+IG1lcmdlT3B0aW9ucyhvcHRpb25zLCBtLCBpbnN0YW5jZSkpO1xyXG4gICAgbWVyZ2VPcHRpb25zKG9wdGlvbnMsIHJhdywgaW5zdGFuY2UpO1xyXG4gICAgcmV0dXJuIChyYXcuX19tZXJnZWQgPSBvcHRpb25zKTtcclxufVxyXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnModG8sIGZyb20sIGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCBzdHJhdHMgPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XHJcbiAgICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGZyb207XHJcbiAgICBleHRlbmRzT3B0aW9ucyAmJiBtZXJnZU9wdGlvbnModG8sIGV4dGVuZHNPcHRpb25zLCBpbnN0YW5jZSk7XHJcbiAgICBtaXhpbnMgJiZcclxuICAgICAgICBtaXhpbnMuZm9yRWFjaCgobSkgPT4gbWVyZ2VPcHRpb25zKHRvLCBtLCBpbnN0YW5jZSkpO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xyXG4gICAgICAgIGlmIChzdHJhdHMgJiYgaGFzT3duKHN0cmF0cywga2V5KSkge1xyXG4gICAgICAgICAgICB0b1trZXldID0gc3RyYXRzW2tleV0odG9ba2V5XSwgZnJvbVtrZXldLCBpbnN0YW5jZS5wcm94eSwga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRvW2tleV0gPSBmcm9tW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmNvbnN0IHB1YmxpY1Byb3BlcnRpZXNNYXAgPSBleHRlbmQoT2JqZWN0LmNyZWF0ZShudWxsKSwge1xyXG4gICAgJDogaSA9PiBpLFxyXG4gICAgJGVsOiBpID0+IGkudm5vZGUuZWwsXHJcbiAgICAkZGF0YTogaSA9PiBpLmRhdGEsXHJcbiAgICAkcHJvcHM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnByb3BzKSA6IGkucHJvcHMpLFxyXG4gICAgJGF0dHJzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5hdHRycykgOiBpLmF0dHJzKSxcclxuICAgICRzbG90czogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkuc2xvdHMpIDogaS5zbG90cyksXHJcbiAgICAkcmVmczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkucmVmcykgOiBpLnJlZnMpLFxyXG4gICAgJHBhcmVudDogaSA9PiBpLnBhcmVudCAmJiBpLnBhcmVudC5wcm94eSxcclxuICAgICRyb290OiBpID0+IGkucm9vdCAmJiBpLnJvb3QucHJveHksXHJcbiAgICAkZW1pdDogaSA9PiBpLmVtaXQsXHJcbiAgICAkb3B0aW9uczogaSA9PiAoX19WVUVfT1BUSU9OU19BUElfXyA/IHJlc29sdmVNZXJnZWRPcHRpb25zKGkpIDogaS50eXBlKSxcclxuICAgICRmb3JjZVVwZGF0ZTogaSA9PiAoKSA9PiBxdWV1ZUpvYihpLnVwZGF0ZSksXHJcbiAgICAkbmV4dFRpY2s6IGkgPT4gbmV4dFRpY2suYmluZChpLnByb3h5KSxcclxuICAgICR3YXRjaDogaSA9PiAoX19WVUVfT1BUSU9OU19BUElfXyA/IGluc3RhbmNlV2F0Y2guYmluZChpKSA6IE5PT1ApXHJcbn0pO1xyXG5jb25zdCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSB7XHJcbiAgICBnZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXkpIHtcclxuICAgICAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSwgZGF0YSwgcHJvcHMsIGFjY2Vzc0NhY2hlLCB0eXBlLCBhcHBDb250ZXh0IH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAvLyBsZXQgQHZ1ZS9yZWFjdGl2aXR5IGtub3cgaXQgc2hvdWxkIG5ldmVyIG9ic2VydmUgVnVlIHB1YmxpYyBpbnN0YW5jZXMuXHJcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGZvciBpbnRlcm5hbCBmb3JtYXR0ZXJzIHRvIGtub3cgdGhhdCB0aGlzIGlzIGEgVnVlIGluc3RhbmNlXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgPT09ICdfX2lzVnVlJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZGF0YSAvIHByb3BzIC8gY3R4XHJcbiAgICAgICAgLy8gVGhpcyBnZXR0ZXIgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IHByb3BlcnR5IGFjY2VzcyBvbiB0aGUgcmVuZGVyIGNvbnRleHRcclxuICAgICAgICAvLyBkdXJpbmcgcmVuZGVyIGFuZCBpcyBhIG1ham9yIGhvdHNwb3QuIFRoZSBtb3N0IGV4cGVuc2l2ZSBwYXJ0IG9mIHRoaXNcclxuICAgICAgICAvLyBpcyB0aGUgbXVsdGlwbGUgaGFzT3duKCkgY2FsbHMuIEl0J3MgbXVjaCBmYXN0ZXIgdG8gZG8gYSBzaW1wbGUgcHJvcGVydHlcclxuICAgICAgICAvLyBhY2Nlc3Mgb24gYSBwbGFpbiBvYmplY3QsIHNvIHdlIHVzZSBhbiBhY2Nlc3NDYWNoZSBvYmplY3QgKHdpdGggbnVsbFxyXG4gICAgICAgIC8vIHByb3RvdHlwZSkgdG8gbWVtb2l6ZSB3aGF0IGFjY2VzcyB0eXBlIGEga2V5IGNvcnJlc3BvbmRzIHRvLlxyXG4gICAgICAgIGxldCBub3JtYWxpemVkUHJvcHM7XHJcbiAgICAgICAgaWYgKGtleVswXSAhPT0gJyQnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBhY2Nlc3NDYWNoZVtrZXldO1xyXG4gICAgICAgICAgICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDAgLyogU0VUVVAgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxIC8qIERBVEEgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzIC8qIENPTlRFWFQgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIgLyogUFJPUFMgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQ6IGp1c3QgZmFsbHRocm91Z2hcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAwIC8qIFNFVFVQICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAxIC8qIERBVEEgKi87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAvLyBvbmx5IGNhY2hlIG90aGVyIHByb3BlcnRpZXMgd2hlbiBpbnN0YW5jZSBoYXMgZGVjbGFyZWQgKHRodXMgc3RhYmxlKVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICAobm9ybWFsaXplZFByb3BzID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSAmJlxyXG4gICAgICAgICAgICAgICAgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDIgLyogUFJPUFMgKi87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMyAvKiBDT05URVhUICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFfX1ZVRV9PUFRJT05TX0FQSV9fIHx8ICFpc0luQmVmb3JlQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gNCAvKiBPVEhFUiAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwdWJsaWNHZXR0ZXIgPSBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV07XHJcbiAgICAgICAgbGV0IGNzc01vZHVsZSwgZ2xvYmFsUHJvcGVydGllcztcclxuICAgICAgICAvLyBwdWJsaWMgJHh4eCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaWYgKHB1YmxpY0dldHRlcikge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnJGF0dHJzJykge1xyXG4gICAgICAgICAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHB1YmxpY0dldHRlcihpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgIC8vIGNzcyBtb2R1bGUgKGluamVjdGVkIGJ5IHZ1ZS1sb2FkZXIpXHJcbiAgICAgICAgKGNzc01vZHVsZSA9IHR5cGUuX19jc3NNb2R1bGVzKSAmJlxyXG4gICAgICAgICAgICAoY3NzTW9kdWxlID0gY3NzTW9kdWxlW2tleV0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjc3NNb2R1bGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcclxuICAgICAgICAgICAgLy8gdXNlciBtYXkgc2V0IGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGB0aGlzYCB0aGF0IHN0YXJ0IHdpdGggYCRgXHJcbiAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAzIC8qIENPTlRFWFQgKi87XHJcbiAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgLy8gZ2xvYmFsIHByb3BlcnRpZXNcclxuICAgICAgICAoKGdsb2JhbFByb3BlcnRpZXMgPSBhcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSxcclxuICAgICAgICAgICAgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxQcm9wZXJ0aWVzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgJiZcclxuICAgICAgICAgICAgKCFpc1N0cmluZyhrZXkpIHx8XHJcbiAgICAgICAgICAgICAgICAvLyAjMTA5MSBhdm9pZCBpbnRlcm5hbCBpc1JlZi9pc1ZOb2RlIGNoZWNrcyBvbiBjb21wb25lbnQgaW5zdGFuY2UgbGVhZGluZ1xyXG4gICAgICAgICAgICAgICAgLy8gdG8gaW5maW5pdGUgd2FybmluZyBsb29wXHJcbiAgICAgICAgICAgICAgICBrZXkuaW5kZXhPZignX192JykgIT09IDApKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiZcclxuICAgICAgICAgICAgICAgIChrZXlbMF0gPT09ICckJyB8fCBrZXlbMF0gPT09ICdfJykgJiZcclxuICAgICAgICAgICAgICAgIGhhc093bihkYXRhLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IG11c3QgYmUgYWNjZXNzZWQgdmlhICRkYXRhIGJlY2F1c2UgaXQgc3RhcnRzIHdpdGggYSByZXNlcnZlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICBgY2hhcmFjdGVyIChcIiRcIiBvciBcIl9cIikgYW5kIGlzIG5vdCBwcm94aWVkIG9uIHRoZSByZW5kZXIgY29udGV4dC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYGJ1dCBpcyBub3QgZGVmaW5lZCBvbiBpbnN0YW5jZS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhLCBzZXR1cFN0YXRlLCBjdHggfSA9IGluc3RhbmNlO1xyXG4gICAgICAgIGlmIChzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICAgICAgc2V0dXBTdGF0ZVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xyXG4gICAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5IGluIGluc3RhbmNlLnByb3BzKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBtdXRhdGUgcHJvcCBcIiR7a2V5fVwiLiBQcm9wcyBhcmUgcmVhZG9ubHkuYCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXlbMF0gPT09ICckJyAmJiBrZXkuc2xpY2UoMSkgaW4gaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYFByb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCAkIGFyZSByZXNlcnZlZCBhbmQgcmVhZG9ubHkuYCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGhhcyh7IF86IHsgZGF0YSwgc2V0dXBTdGF0ZSwgYWNjZXNzQ2FjaGUsIGN0eCwgYXBwQ29udGV4dCwgcHJvcHNPcHRpb25zIH0gfSwga2V5KSB7XHJcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRQcm9wcztcclxuICAgICAgICByZXR1cm4gKGFjY2Vzc0NhY2hlW2tleV0gIT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB8fFxyXG4gICAgICAgICAgICAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB8fFxyXG4gICAgICAgICAgICAoKG5vcm1hbGl6ZWRQcm9wcyA9IHByb3BzT3B0aW9uc1swXSkgJiYgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkgfHxcclxuICAgICAgICAgICAgaGFzT3duKGN0eCwga2V5KSB8fFxyXG4gICAgICAgICAgICBoYXNPd24ocHVibGljUHJvcGVydGllc01hcCwga2V5KSB8fFxyXG4gICAgICAgICAgICBoYXNPd24oYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywga2V5KSk7XHJcbiAgICB9XHJcbn07XHJcbmlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWZhbHNlKSB7XHJcbiAgICBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMub3duS2V5cyA9ICh0YXJnZXQpID0+IHtcclxuICAgICAgICB3YXJuKGBBdm9pZCBhcHAgbG9naWMgdGhhdCByZWxpZXMgb24gZW51bWVyYXRpbmcga2V5cyBvbiBhIGNvbXBvbmVudCBpbnN0YW5jZS4gYCArXHJcbiAgICAgICAgICAgIGBUaGUga2V5cyB3aWxsIGJlIGVtcHR5IGluIHByb2R1Y3Rpb24gbW9kZSB0byBhdm9pZCBwZXJmb3JtYW5jZSBvdmVyaGVhZC5gKTtcclxuICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IGV4dGVuZCh7fSwgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLCB7XHJcbiAgICBnZXQodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICAvLyBmYXN0IHBhdGggZm9yIHVuc2NvcGFibGVzIHdoZW4gdXNpbmcgYHdpdGhgIGJsb2NrXHJcbiAgICAgICAgaWYgKGtleSA9PT0gU3ltYm9sLnVuc2NvcGFibGVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5nZXQodGFyZ2V0LCBrZXksIHRhcmdldCk7XHJcbiAgICB9LFxyXG4gICAgaGFzKF8sIGtleSkge1xyXG4gICAgICAgIGNvbnN0IGhhcyA9IGtleVswXSAhPT0gJ18nICYmICFpc0dsb2JhbGx5V2hpdGVsaXN0ZWQoa2V5KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXMgJiYgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmhhcyhfLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gc2hvdWxkIG5vdCBzdGFydCB3aXRoIF8gd2hpY2ggaXMgYSByZXNlcnZlZCBwcmVmaXggZm9yIFZ1ZSBpbnRlcm5hbHMuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoYXM7XHJcbiAgICB9XHJcbn0pO1xyXG4vLyBJbiBkZXYgbW9kZSwgdGhlIHByb3h5IHRhcmdldCBleHBvc2VzIHRoZSBzYW1lIHByb3BlcnRpZXMgYXMgc2VlbiBvbiBgdGhpc2BcclxuLy8gZm9yIGVhc2llciBjb25zb2xlIGluc3BlY3Rpb24uIEluIHByb2QgbW9kZSBpdCB3aWxsIGJlIGFuIGVtcHR5IG9iamVjdCBzb1xyXG4vLyB0aGVzZSBwcm9wZXJ0aWVzIGRlZmluaXRpb25zIGNhbiBiZSBza2lwcGVkLlxyXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcclxuICAgIC8vIGV4cG9zZSBpbnRlcm5hbCBpbnN0YW5jZSBmb3IgcHJveHkgaGFuZGxlcnNcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGBfYCwge1xyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlXHJcbiAgICB9KTtcclxuICAgIC8vIGV4cG9zZSBwdWJsaWMgcHJvcGVydGllc1xyXG4gICAgT2JqZWN0LmtleXMocHVibGljUHJvcGVydGllc01hcCkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XShpbnN0YW5jZSksXHJcbiAgICAgICAgICAgIC8vIGludGVyY2VwdGVkIGJ5IHRoZSBwcm94eSBzbyBubyBuZWVkIGZvciBpbXBsZW1lbnRhdGlvbixcclxuICAgICAgICAgICAgLy8gYnV0IG5lZWRlZCB0byBwcmV2ZW50IHNldCBlcnJvcnNcclxuICAgICAgICAgICAgc2V0OiBOT09QXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIC8vIGV4cG9zZSBnbG9iYWwgcHJvcGVydGllc1xyXG4gICAgY29uc3QgeyBnbG9iYWxQcm9wZXJ0aWVzIH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZztcclxuICAgIE9iamVjdC5rZXlzKGdsb2JhbFByb3BlcnRpZXMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiBnbG9iYWxQcm9wZXJ0aWVzW2tleV0sXHJcbiAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbi8vIGRldiBvbmx5XHJcbmZ1bmN0aW9uIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB7IGN0eCwgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSB9ID0gaW5zdGFuY2U7XHJcbiAgICBpZiAocHJvcHNPcHRpb25zKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcHNPcHRpb25zKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gaW5zdGFuY2UucHJvcHNba2V5XSxcclxuICAgICAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vLyBkZXYgb25seVxyXG5mdW5jdGlvbiBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSB9ID0gaW5zdGFuY2U7XHJcbiAgICBPYmplY3Qua2V5cyh0b1JhdyhzZXR1cFN0YXRlKSkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGlmIChrZXlbMF0gPT09ICckJyB8fCBrZXlbMF0gPT09ICdfJykge1xyXG4gICAgICAgICAgICB3YXJuKGBzZXR1cCgpIHJldHVybiBwcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBcIiRcIiBvciBcIl9cIiBgICtcclxuICAgICAgICAgICAgICAgIGB3aGljaCBhcmUgcmVzZXJ2ZWQgcHJlZml4ZXMgZm9yIFZ1ZSBpbnRlcm5hbHMuYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiBzZXR1cFN0YXRlW2tleV0sXHJcbiAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cblxuY29uc3QgZW1wdHlBcHBDb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xyXG5sZXQgdWlkJDEgPSAwO1xyXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSh2bm9kZSwgcGFyZW50LCBzdXNwZW5zZSkge1xyXG4gICAgY29uc3QgdHlwZSA9IHZub2RlLnR5cGU7XHJcbiAgICAvLyBpbmhlcml0IHBhcmVudCBhcHAgY29udGV4dCAtIG9yIC0gaWYgcm9vdCwgYWRvcHQgZnJvbSByb290IHZub2RlXHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gKHBhcmVudCA/IHBhcmVudC5hcHBDb250ZXh0IDogdm5vZGUuYXBwQ29udGV4dCkgfHwgZW1wdHlBcHBDb250ZXh0O1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSB7XHJcbiAgICAgICAgdWlkOiB1aWQkMSsrLFxyXG4gICAgICAgIHZub2RlLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIGFwcENvbnRleHQsXHJcbiAgICAgICAgcm9vdDogbnVsbCxcclxuICAgICAgICBuZXh0OiBudWxsLFxyXG4gICAgICAgIHN1YlRyZWU6IG51bGwsXHJcbiAgICAgICAgdXBkYXRlOiBudWxsLFxyXG4gICAgICAgIHJlbmRlcjogbnVsbCxcclxuICAgICAgICBwcm94eTogbnVsbCxcclxuICAgICAgICB3aXRoUHJveHk6IG51bGwsXHJcbiAgICAgICAgZWZmZWN0czogbnVsbCxcclxuICAgICAgICBwcm92aWRlczogcGFyZW50ID8gcGFyZW50LnByb3ZpZGVzIDogT2JqZWN0LmNyZWF0ZShhcHBDb250ZXh0LnByb3ZpZGVzKSxcclxuICAgICAgICBhY2Nlc3NDYWNoZTogbnVsbCxcclxuICAgICAgICByZW5kZXJDYWNoZTogW10sXHJcbiAgICAgICAgLy8gbG9jYWwgcmVzb3ZsZWQgYXNzZXRzXHJcbiAgICAgICAgY29tcG9uZW50czogbnVsbCxcclxuICAgICAgICBkaXJlY3RpdmVzOiBudWxsLFxyXG4gICAgICAgIC8vIHJlc29sdmVkIHByb3BzIGFuZCBlbWl0cyBvcHRpb25zXHJcbiAgICAgICAgcHJvcHNPcHRpb25zOiBub3JtYWxpemVQcm9wc09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXHJcbiAgICAgICAgZW1pdHNPcHRpb25zOiBub3JtYWxpemVFbWl0c09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXHJcbiAgICAgICAgLy8gZW1pdFxyXG4gICAgICAgIGVtaXQ6IG51bGwsXHJcbiAgICAgICAgZW1pdHRlZDogbnVsbCxcclxuICAgICAgICAvLyBzdGF0ZVxyXG4gICAgICAgIGN0eDogRU1QVFlfT0JKLFxyXG4gICAgICAgIGRhdGE6IEVNUFRZX09CSixcclxuICAgICAgICBwcm9wczogRU1QVFlfT0JKLFxyXG4gICAgICAgIGF0dHJzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgc2xvdHM6IEVNUFRZX09CSixcclxuICAgICAgICByZWZzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgc2V0dXBTdGF0ZTogRU1QVFlfT0JKLFxyXG4gICAgICAgIHNldHVwQ29udGV4dDogbnVsbCxcclxuICAgICAgICAvLyBzdXNwZW5zZSByZWxhdGVkXHJcbiAgICAgICAgc3VzcGVuc2UsXHJcbiAgICAgICAgc3VzcGVuc2VJZDogc3VzcGVuc2UgPyBzdXNwZW5zZS5wZW5kaW5nSWQgOiAwLFxyXG4gICAgICAgIGFzeW5jRGVwOiBudWxsLFxyXG4gICAgICAgIGFzeW5jUmVzb2x2ZWQ6IGZhbHNlLFxyXG4gICAgICAgIC8vIGxpZmVjeWNsZSBob29rc1xyXG4gICAgICAgIC8vIG5vdCB1c2luZyBlbnVtcyBoZXJlIGJlY2F1c2UgaXQgcmVzdWx0cyBpbiBjb21wdXRlZCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaXNNb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBpc1VubW91bnRlZDogZmFsc2UsXHJcbiAgICAgICAgaXNEZWFjdGl2YXRlZDogZmFsc2UsXHJcbiAgICAgICAgYmM6IG51bGwsXHJcbiAgICAgICAgYzogbnVsbCxcclxuICAgICAgICBibTogbnVsbCxcclxuICAgICAgICBtOiBudWxsLFxyXG4gICAgICAgIGJ1OiBudWxsLFxyXG4gICAgICAgIHU6IG51bGwsXHJcbiAgICAgICAgdW06IG51bGwsXHJcbiAgICAgICAgYnVtOiBudWxsLFxyXG4gICAgICAgIGRhOiBudWxsLFxyXG4gICAgICAgIGE6IG51bGwsXHJcbiAgICAgICAgcnRnOiBudWxsLFxyXG4gICAgICAgIHJ0YzogbnVsbCxcclxuICAgICAgICBlYzogbnVsbFxyXG4gICAgfTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBpbnN0YW5jZS5jdHggPSBjcmVhdGVSZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGluc3RhbmNlLmN0eCA9IHsgXzogaW5zdGFuY2UgfTtcclxuICAgIH1cclxuICAgIGluc3RhbmNlLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCA6IGluc3RhbmNlO1xyXG4gICAgaW5zdGFuY2UuZW1pdCA9IGVtaXQuYmluZChudWxsLCBpbnN0YW5jZSk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluc3RhbmNlO1xyXG59XHJcbmxldCBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xyXG5jb25zdCBnZXRDdXJyZW50SW5zdGFuY2UgPSAoKSA9PiBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG5jb25zdCBzZXRDdXJyZW50SW5zdGFuY2UgPSAoaW5zdGFuY2UpID0+IHtcclxuICAgIGN1cnJlbnRJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG59O1xyXG5jb25zdCBpc0J1aWx0SW5UYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50Jyk7XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb25maWcpIHtcclxuICAgIGNvbnN0IGFwcElzTmF0aXZlVGFnID0gY29uZmlnLmlzTmF0aXZlVGFnIHx8IE5PO1xyXG4gICAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBhcHBJc05hdGl2ZVRhZyhuYW1lKSkge1xyXG4gICAgICAgIHdhcm4oJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgaWQ6ICcgKyBuYW1lKTtcclxuICAgIH1cclxufVxyXG5sZXQgaXNJblNTUkNvbXBvbmVudFNldHVwID0gZmFsc2U7XHJcbmZ1bmN0aW9uIHNldHVwQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUiA9IGZhbHNlKSB7XHJcbiAgICBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBpc1NTUjtcclxuICAgIGNvbnN0IHsgcHJvcHMsIGNoaWxkcmVuLCBzaGFwZUZsYWcgfSA9IGluc3RhbmNlLnZub2RlO1xyXG4gICAgY29uc3QgaXNTdGF0ZWZ1bCA9IHNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovO1xyXG4gICAgaW5pdFByb3BzKGluc3RhbmNlLCBwcm9wcywgaXNTdGF0ZWZ1bCwgaXNTU1IpO1xyXG4gICAgaW5pdFNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XHJcbiAgICBjb25zdCBzZXR1cFJlc3VsdCA9IGlzU3RhdGVmdWxcclxuICAgICAgICA/IHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKVxyXG4gICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgaXNJblNTUkNvbXBvbmVudFNldHVwID0gZmFsc2U7XHJcbiAgICByZXR1cm4gc2V0dXBSZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIHtcclxuICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgaWYgKENvbXBvbmVudC5uYW1lKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShDb21wb25lbnQubmFtZSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcG9uZW50LmNvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuY29tcG9uZW50cyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lc1tpXSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChDb21wb25lbnQuZGlyZWN0aXZlcykge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5kaXJlY3RpdmVzKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIDAuIGNyZWF0ZSByZW5kZXIgcHJveHkgcHJvcGVydHkgYWNjZXNzIGNhY2hlXHJcbiAgICBpbnN0YW5jZS5hY2Nlc3NDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAvLyAxLiBjcmVhdGUgcHVibGljIGluc3RhbmNlIC8gcmVuZGVyIHByb3h5XHJcbiAgICAvLyBhbHNvIG1hcmsgaXQgcmF3IHNvIGl0J3MgbmV2ZXIgb2JzZXJ2ZWRcclxuICAgIGluc3RhbmNlLnByb3h5ID0gbmV3IFByb3h5KGluc3RhbmNlLmN0eCwgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICAvLyAyLiBjYWxsIHNldHVwKClcclxuICAgIGNvbnN0IHsgc2V0dXAgfSA9IENvbXBvbmVudDtcclxuICAgIGlmIChzZXR1cCkge1xyXG4gICAgICAgIGNvbnN0IHNldHVwQ29udGV4dCA9IChpbnN0YW5jZS5zZXR1cENvbnRleHQgPVxyXG4gICAgICAgICAgICBzZXR1cC5sZW5ndGggPiAxID8gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSA6IG51bGwpO1xyXG4gICAgICAgIGN1cnJlbnRJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICBjb25zdCBzZXR1cFJlc3VsdCA9IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzZXR1cCwgaW5zdGFuY2UsIDAgLyogU0VUVVBfRlVOQ1RJT04gKi8sIFsocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2UucHJvcHMpIDogaW5zdGFuY2UucHJvcHMsIHNldHVwQ29udGV4dF0pO1xyXG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xyXG4gICAgICAgIGlmIChpc1Byb21pc2Uoc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1NTUikge1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBwcm9taXNlIHNvIHNlcnZlci1yZW5kZXJlciBjYW4gd2FpdCBvbiBpdFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwUmVzdWx0LnRoZW4oKHJlc29sdmVkUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHJlc29sdmVkUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gYXN5bmMgc2V0dXAgcmV0dXJuZWQgUHJvbWlzZS5cclxuICAgICAgICAgICAgICAgIC8vIGJhaWwgaGVyZSBhbmQgd2FpdCBmb3IgcmUtZW50cnkuXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCA9IHNldHVwUmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQsIGlzU1NSKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihzZXR1cFJlc3VsdCkpIHtcclxuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBhbiBpbmxpbmUgcmVuZGVyIGZ1bmN0aW9uXHJcbiAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gc2V0dXBSZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChzZXR1cFJlc3VsdCkpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzVk5vZGUoc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHNldHVwKCkgc2hvdWxkIG5vdCByZXR1cm4gVk5vZGVzIGRpcmVjdGx5IC0gYCArXHJcbiAgICAgICAgICAgICAgICBgcmV0dXJuIGEgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldHVwIHJldHVybmVkIGJpbmRpbmdzLlxyXG4gICAgICAgIC8vIGFzc3VtaW5nIGEgcmVuZGVyIGZ1bmN0aW9uIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaXMgcHJlc2VudC5cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5kZXZ0b29sc1Jhd1NldHVwU3RhdGUgPSBzZXR1cFJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFuY2Uuc2V0dXBTdGF0ZSA9IHByb3h5UmVmcyhzZXR1cFJlc3VsdCk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2V0dXBSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHdhcm4oYHNldHVwKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuIFJlY2VpdmVkOiAke3NldHVwUmVzdWx0ID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHNldHVwUmVzdWx0fWApO1xyXG4gICAgfVxyXG4gICAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UpO1xyXG59XHJcbmxldCBjb21waWxlO1xyXG4vKipcclxuICogRm9yIHJ1bnRpbWUtZG9tIHRvIHJlZ2lzdGVyIHRoZSBjb21waWxlci5cclxuICogTm90ZSB0aGUgZXhwb3J0ZWQgbWV0aG9kIHVzZXMgYW55IHRvIGF2b2lkIGQudHMgcmVseWluZyBvbiB0aGUgY29tcGlsZXIgdHlwZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlclJ1bnRpbWVDb21waWxlcihfY29tcGlsZSkge1xyXG4gICAgY29tcGlsZSA9IF9jb21waWxlO1xyXG59XHJcbmZ1bmN0aW9uIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUikge1xyXG4gICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcclxuICAgIC8vIHRlbXBsYXRlIC8gcmVuZGVyIGZ1bmN0aW9uIG5vcm1hbGl6YXRpb25cclxuICAgIGlmICghaW5zdGFuY2UucmVuZGVyKSB7XHJcbiAgICAgICAgLy8gY291bGQgYmUgc2V0IGZyb20gc2V0dXAoKVxyXG4gICAgICAgIGlmIChjb21waWxlICYmIENvbXBvbmVudC50ZW1wbGF0ZSAmJiAhQ29tcG9uZW50LnJlbmRlcikge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQ29tcG9uZW50LnJlbmRlciA9IGNvbXBpbGUoQ29tcG9uZW50LnRlbXBsYXRlLCB7XHJcbiAgICAgICAgICAgICAgICBpc0N1c3RvbUVsZW1lbnQ6IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmlzQ3VzdG9tRWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGRlbGltaXRlcnM6IENvbXBvbmVudC5kZWxpbWl0ZXJzXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlciA9IChDb21wb25lbnQucmVuZGVyIHx8IE5PT1ApO1xyXG4gICAgICAgIC8vIGZvciBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrcywgdGhlIHJlbmRlclxyXG4gICAgICAgIC8vIHByb3h5IHVzZWQgbmVlZHMgYSBkaWZmZXJlbnQgYGhhc2AgaGFuZGxlciB3aGljaCBpcyBtb3JlIHBlcmZvcm1hbnQgYW5kXHJcbiAgICAgICAgLy8gYWxzbyBvbmx5IGFsbG93cyBhIHdoaXRlbGlzdCBvZiBnbG9iYWxzIHRvIGZhbGx0aHJvdWdoLlxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5yZW5kZXIuX3JjKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLndpdGhQcm94eSA9IG5ldyBQcm94eShpbnN0YW5jZS5jdHgsIFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gc3VwcG9ydCBmb3IgMi54IG9wdGlvbnNcclxuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fKSB7XHJcbiAgICAgICAgY3VycmVudEluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgYXBwbHlPcHRpb25zKGluc3RhbmNlLCBDb21wb25lbnQpO1xyXG4gICAgICAgIGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICAvLyB3YXJuIG1pc3NpbmcgdGVtcGxhdGUvcmVuZGVyXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFDb21wb25lbnQucmVuZGVyICYmIGluc3RhbmNlLnJlbmRlciA9PT0gTk9PUCkge1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmICghY29tcGlsZSAmJiBDb21wb25lbnQudGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IHByb3ZpZGVkIHRlbXBsYXRlIG9wdGlvbiBidXQgYCArXHJcbiAgICAgICAgICAgICAgICBgcnVudGltZSBjb21waWxhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnVpbGQgb2YgVnVlLmAgK1xyXG4gICAgICAgICAgICAgICAgKCBgIENvbmZpZ3VyZSB5b3VyIGJ1bmRsZXIgdG8gYWxpYXMgXCJ2dWVcIiB0byBcInZ1ZS9kaXN0L3Z1ZS5lc20tYnVuZGxlci5qc1wiLmBcclxuICAgICAgICAgICAgICAgICAgICApIC8qIHNob3VsZCBub3QgaGFwcGVuICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBpcyBtaXNzaW5nIHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbi5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuY29uc3QgYXR0ckhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiAodGFyZ2V0LCBrZXkpID0+IHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcclxuICAgIH0sXHJcbiAgICBzZXQ6ICgpID0+IHtcclxuICAgICAgICB3YXJuKGBzZXR1cENvbnRleHQuYXR0cnMgaXMgcmVhZG9ubHkuYCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGRlbGV0ZVByb3BlcnR5OiAoKSA9PiB7XHJcbiAgICAgICAgd2Fybihgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgLy8gV2UgdXNlIGdldHRlcnMgaW4gZGV2IGluIGNhc2UgbGlicyBsaWtlIHRlc3QtdXRpbHMgb3ZlcndyaXRlIGluc3RhbmNlXHJcbiAgICAgICAgLy8gcHJvcGVydGllcyAob3ZlcndyaXRlcyBzaG91bGQgbm90IGJlIGRvbmUgaW4gcHJvZClcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIGdldCBhdHRycygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkoaW5zdGFuY2UuYXR0cnMsIGF0dHJIYW5kbGVycyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldCBzbG90cygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2Uuc2xvdHMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQgZW1pdCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IGluc3RhbmNlLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhdHRyczogaW5zdGFuY2UuYXR0cnMsXHJcbiAgICAgICAgICAgIHNsb3RzOiBpbnN0YW5jZS5zbG90cyxcclxuICAgICAgICAgICAgZW1pdDogaW5zdGFuY2UuZW1pdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuLy8gcmVjb3JkIGVmZmVjdHMgY3JlYXRlZCBkdXJpbmcgYSBjb21wb25lbnQncyBzZXR1cCgpIHNvIHRoYXQgdGhleSBjYW4gYmVcclxuLy8gc3RvcHBlZCB3aGVuIHRoZSBjb21wb25lbnQgdW5tb3VudHNcclxuZnVuY3Rpb24gcmVjb3JkSW5zdGFuY2VCb3VuZEVmZmVjdChlZmZlY3QpIHtcclxuICAgIGlmIChjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgICAgICAoY3VycmVudEluc3RhbmNlLmVmZmVjdHMgfHwgKGN1cnJlbnRJbnN0YW5jZS5lZmZlY3RzID0gW10pKS5wdXNoKGVmZmVjdCk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcclxuY29uc3QgY2xhc3NpZnkgPSAoc3RyKSA9PiBzdHIucmVwbGFjZShjbGFzc2lmeVJFLCBjID0+IGMudG9VcHBlckNhc2UoKSkucmVwbGFjZSgvWy1fXS9nLCAnJyk7XHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIGZvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIENvbXBvbmVudCwgaXNSb290ID0gZmFsc2UpIHtcclxuICAgIGxldCBuYW1lID0gaXNGdW5jdGlvbihDb21wb25lbnQpXHJcbiAgICAgICAgPyBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWVcclxuICAgICAgICA6IENvbXBvbmVudC5uYW1lO1xyXG4gICAgaWYgKCFuYW1lICYmIENvbXBvbmVudC5fX2ZpbGUpIHtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IENvbXBvbmVudC5fX2ZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xyXG4gICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgICBuYW1lID0gbWF0Y2hbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFuYW1lICYmIGluc3RhbmNlICYmIGluc3RhbmNlLnBhcmVudCkge1xyXG4gICAgICAgIC8vIHRyeSB0byBpbmZlciB0aGUgbmFtZSBiYXNlZCBvbiByZXZlcnNlIHJlc29sdXRpb25cclxuICAgICAgICBjb25zdCBpbmZlckZyb21SZWdpc3RyeSA9IChyZWdpc3RyeSkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByZWdpc3RyeSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lzdHJ5W2tleV0gPT09IENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIG5hbWUgPVxyXG4gICAgICAgICAgICBpbmZlckZyb21SZWdpc3RyeShpbnN0YW5jZS5jb21wb25lbnRzIHx8XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQudHlwZS5jb21wb25lbnRzKSB8fCBpbmZlckZyb21SZWdpc3RyeShpbnN0YW5jZS5hcHBDb250ZXh0LmNvbXBvbmVudHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWUgPyBjbGFzc2lmeShuYW1lKSA6IGlzUm9vdCA/IGBBcHBgIDogYEFub255bW91c2A7XHJcbn1cclxuZnVuY3Rpb24gaXNDbGFzc0NvbXBvbmVudCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUpICYmICdfX3ZjY09wdHMnIGluIHZhbHVlO1xyXG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVkKGdldHRlck9yT3B0aW9ucykge1xyXG4gICAgY29uc3QgYyA9IGNvbXB1dGVkJDEoZ2V0dGVyT3JPcHRpb25zKTtcclxuICAgIHJlY29yZEluc3RhbmNlQm91bmRFZmZlY3QoYy5lZmZlY3QpO1xyXG4gICAgcmV0dXJuIGM7XHJcbn1cblxuLy8gaW1wbGVtZW50YXRpb24sIGNsb3NlIHRvIG5vLW9wXHJcbmZ1bmN0aW9uIGRlZmluZUNvbXBvbmVudChvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvcHRpb25zKSA/IHsgc2V0dXA6IG9wdGlvbnMsIG5hbWU6IG9wdGlvbnMubmFtZSB9IDogb3B0aW9ucztcclxufVxuXG5mdW5jdGlvbiBkZWZpbmVBc3luY0NvbXBvbmVudChzb3VyY2UpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcclxuICAgICAgICBzb3VyY2UgPSB7IGxvYWRlcjogc291cmNlIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGxvYWRlciwgbG9hZGluZ0NvbXBvbmVudDogbG9hZGluZ0NvbXBvbmVudCwgZXJyb3JDb21wb25lbnQ6IGVycm9yQ29tcG9uZW50LCBkZWxheSA9IDIwMCwgdGltZW91dCwgLy8gdW5kZWZpbmVkID0gbmV2ZXIgdGltZXMgb3V0XHJcbiAgICBzdXNwZW5zaWJsZSA9IHRydWUsIG9uRXJyb3I6IHVzZXJPbkVycm9yIH0gPSBzb3VyY2U7XHJcbiAgICBsZXQgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xyXG4gICAgbGV0IHJlc29sdmVkQ29tcDtcclxuICAgIGxldCByZXRyaWVzID0gMDtcclxuICAgIGNvbnN0IHJldHJ5ID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHJpZXMrKztcclxuICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGxvYWQoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBsb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCB0aGlzUmVxdWVzdDtcclxuICAgICAgICByZXR1cm4gKHBlbmRpbmdSZXF1ZXN0IHx8XHJcbiAgICAgICAgICAgICh0aGlzUmVxdWVzdCA9IHBlbmRpbmdSZXF1ZXN0ID0gbG9hZGVyKClcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXJPbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlclJldHJ5ID0gKCkgPT4gcmVzb2x2ZShyZXRyeSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlckZhaWwgPSAoKSA9PiByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlck9uRXJyb3IoZXJyLCB1c2VyUmV0cnksIHVzZXJGYWlsLCByZXRyaWVzICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigoY29tcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNSZXF1ZXN0ICE9PSBwZW5kaW5nUmVxdWVzdCAmJiBwZW5kaW5nUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwZW5kaW5nUmVxdWVzdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWNvbXApIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBc3luYyBjb21wb25lbnQgbG9hZGVyIHJlc29sdmVkIHRvIHVuZGVmaW5lZC4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB5b3UgYXJlIHVzaW5nIHJldHJ5KCksIG1ha2Ugc3VyZSB0byByZXR1cm4gaXRzIHJldHVybiB2YWx1ZS5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGludGVyb3AgbW9kdWxlIGRlZmF1bHRcclxuICAgICAgICAgICAgICAgIGlmIChjb21wICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKGNvbXAuX19lc01vZHVsZSB8fCBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbXAgJiYgIWlzT2JqZWN0KGNvbXApICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFzeW5jIGNvbXBvbmVudCBsb2FkIHJlc3VsdDogJHtjb21wfWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb21wID0gY29tcDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wO1xyXG4gICAgICAgICAgICB9KSkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBkZWZpbmVDb21wb25lbnQoe1xyXG4gICAgICAgIF9fYXN5bmNMb2FkZXI6IGxvYWQsXHJcbiAgICAgICAgbmFtZTogJ0FzeW5jQ29tcG9uZW50V3JhcHBlcicsXHJcbiAgICAgICAgc2V0dXAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xyXG4gICAgICAgICAgICAvLyBhbHJlYWR5IHJlc29sdmVkXHJcbiAgICAgICAgICAgIGlmIChyZXNvbHZlZENvbXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBjcmVhdGVJbm5lckNvbXAocmVzb2x2ZWRDb21wLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDEzIC8qIEFTWU5DX0NPTVBPTkVOVF9MT0FERVIgKi8sICFlcnJvckNvbXBvbmVudCAvKiBkbyBub3QgdGhyb3cgaW4gZGV2IGlmIHVzZXIgcHJvdmlkZWQgZXJyb3IgY29tcG9uZW50ICovKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8gc3VzcGVuc2UtY29udHJvbGxlZCBvciBTU1IuXHJcbiAgICAgICAgICAgIGlmICgoIHN1c3BlbnNpYmxlICYmIGluc3RhbmNlLnN1c3BlbnNlKSB8fFxyXG4gICAgICAgICAgICAgICAgKGZhbHNlICkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkKClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihjb21wID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKGNvbXAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBlcnJvckNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZCA9IHJlZihmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gcmVmKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ZWQgPSByZWYoISFkZWxheSk7XHJcbiAgICAgICAgICAgIGlmIChkZWxheSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsYXllZC52YWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbG9hZGVkLnZhbHVlICYmICFlcnJvci52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYEFzeW5jIGNvbXBvbmVudCB0aW1lZCBvdXQgYWZ0ZXIgJHt0aW1lb3V0fW1zLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvYWQoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbG9hZGVkLnZhbHVlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IudmFsdWUgPSBlcnI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvYWRlZC52YWx1ZSAmJiByZXNvbHZlZENvbXApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IudmFsdWUgJiYgZXJyb3JDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoZXJyb3JDb21wb25lbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsb2FkaW5nQ29tcG9uZW50ICYmICFkZWxheWVkLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKGxvYWRpbmdDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUlubmVyQ29tcChjb21wLCB7IHZub2RlOiB7IHByb3BzLCBjaGlsZHJlbiB9IH0pIHtcclxuICAgIHJldHVybiBjcmVhdGVWTm9kZShjb21wLCBwcm9wcywgY2hpbGRyZW4pO1xyXG59XG5cbi8vIEFjdHVhbCBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiBoKHR5cGUsIHByb3BzT3JDaGlsZHJlbiwgY2hpbGRyZW4pIHtcclxuICAgIGNvbnN0IGwgPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgaWYgKGwgPT09IDIpIHtcclxuICAgICAgICBpZiAoaXNPYmplY3QocHJvcHNPckNoaWxkcmVuKSAmJiAhaXNBcnJheShwcm9wc09yQ2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgIC8vIHNpbmdsZSB2bm9kZSB3aXRob3V0IHByb3BzXHJcbiAgICAgICAgICAgIGlmIChpc1ZOb2RlKHByb3BzT3JDaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBudWxsLCBbcHJvcHNPckNoaWxkcmVuXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcHJvcHMgd2l0aG91dCBjaGlsZHJlblxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG9taXQgcHJvcHNcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIHByb3BzT3JDaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGwgPiAzKSB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobCA9PT0gMyAmJiBpc1ZOb2RlKGNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBzc3JDb250ZXh0S2V5ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBzc3JDb250ZXh0YCA6IGBgKTtcclxuY29uc3QgdXNlU1NSQ29udGV4dCA9ICgpID0+IHtcclxuICAgIHtcclxuICAgICAgICBjb25zdCBjdHggPSBpbmplY3Qoc3NyQ29udGV4dEtleSk7XHJcbiAgICAgICAgaWYgKCFjdHgpIHtcclxuICAgICAgICAgICAgd2FybihgU2VydmVyIHJlbmRlcmluZyBjb250ZXh0IG5vdCBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIG9ubHkgY2FsbCBgICtcclxuICAgICAgICAgICAgICAgIGB1c2VTc3JDb250ZXh0KCkgY29uZGl0aW9uYWxseSBpbiB0aGUgc2VydmVyIGJ1aWxkLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3R4O1xyXG4gICAgfVxyXG59O1xuXG5mdW5jdGlvbiBpbml0Q3VzdG9tRm9ybWF0dGVyKCkge1xyXG4gICAgaWYgKCEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgIXRydWUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCB2dWVTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojM2JhNzc2JyB9O1xyXG4gICAgY29uc3QgbnVtYmVyU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzBiMWJjOScgfTtcclxuICAgIGNvbnN0IHN0cmluZ1N0eWxlID0geyBzdHlsZTogJ2NvbG9yOiNiNjJlMjQnIH07XHJcbiAgICBjb25zdCBrZXl3b3JkU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzlkMjg4YycgfTtcclxuICAgIC8vIGN1c3RvbSBmb3JtYXR0ZXIgZm9yIENocm9tZVxyXG4gICAgLy8gaHR0cHM6Ly93d3cubWF0dHpldW5lcnQuY29tLzIwMTYvMDIvMTkvY3VzdG9tLWNocm9tZS1kZXZ0b29scy1vYmplY3QtZm9ybWF0dGVycy5odG1sXHJcbiAgICBjb25zdCBmb3JtYXR0ZXIgPSB7XHJcbiAgICAgICAgaGVhZGVyKG9iaikge1xyXG4gICAgICAgICAgICAvLyBUT0RPIGFsc28gZm9ybWF0IENvbXBvbmVudFB1YmxpY0luc3RhbmNlICYgY3R4LnNsb3RzL2F0dHJzIGluIHNldHVwXHJcbiAgICAgICAgICAgIGlmICghaXNPYmplY3Qob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9iai5fX2lzVnVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydkaXYnLCB2dWVTdHlsZSwgYFZ1ZUluc3RhbmNlYF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWYob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgZ2VuUmVmRmxhZyhvYmopXSxcclxuICAgICAgICAgICAgICAgICAgICAnPCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqLnZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICBgPmBcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShvYmopKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCAnUmVhY3RpdmUnXSxcclxuICAgICAgICAgICAgICAgICAgICAnPCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcclxuICAgICAgICAgICAgICAgICAgICBgPiR7aXNSZWFkb25seShvYmopID8gYCAocmVhZG9ubHkpYCA6IGBgfWBcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFkb25seShvYmopKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCAnUmVhZG9ubHknXSxcclxuICAgICAgICAgICAgICAgICAgICAnPCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcclxuICAgICAgICAgICAgICAgICAgICAnPidcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXNCb2R5KG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIG9iai5fX2lzVnVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keShvYmopIHtcclxuICAgICAgICAgICAgaWYgKG9iaiAmJiBvYmouX19pc1Z1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICAuLi5mb3JtYXRJbnN0YW5jZShvYmouJClcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZnVuY3Rpb24gZm9ybWF0SW5zdGFuY2UoaW5zdGFuY2UpIHtcclxuICAgICAgICBjb25zdCBibG9ja3MgPSBbXTtcclxuICAgICAgICBpZiAoaW5zdGFuY2UudHlwZS5wcm9wcyAmJiBpbnN0YW5jZS5wcm9wcykge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdwcm9wcycsIHRvUmF3KGluc3RhbmNlLnByb3BzKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5zdGFuY2Uuc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ3NldHVwJywgaW5zdGFuY2Uuc2V0dXBTdGF0ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5zdGFuY2UuZGF0YSAhPT0gRU1QVFlfT0JKKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2RhdGEnLCB0b1JhdyhpbnN0YW5jZS5kYXRhKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb21wdXRlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCAnY29tcHV0ZWQnKTtcclxuICAgICAgICBpZiAoY29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygnY29tcHV0ZWQnLCBjb21wdXRlZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbmplY3RlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCAnaW5qZWN0Jyk7XHJcbiAgICAgICAgaWYgKGluamVjdGVkKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2luamVjdGVkJywgaW5qZWN0ZWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmxvY2tzLnB1c2goW1xyXG4gICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICdzcGFuJyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToga2V5d29yZFN0eWxlLnN0eWxlICsgJztvcGFjaXR5OjAuNjYnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgJyQgKGludGVybmFsKTogJ1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbJ29iamVjdCcsIHsgb2JqZWN0OiBpbnN0YW5jZSB9XVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIHJldHVybiBibG9ja3M7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZUJsb2NrKHR5cGUsIHRhcmdldCkge1xyXG4gICAgICAgIHRhcmdldCA9IGV4dGVuZCh7fSwgdGFyZ2V0KTtcclxuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHRhcmdldCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCB7fV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICB7IHN0eWxlOiAnbGluZS1oZWlnaHQ6MS4yNWVtO21hcmdpbi1ib3R0b206MC42ZW0nIH0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnY29sb3I6IzQ3NjU4MidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0eXBlXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiAncGFkZGluZy1sZWZ0OjEuMjVlbSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAuLi5PYmplY3Qua2V5cyh0YXJnZXQpLm1hcChrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydzcGFuJywga2V5d29yZFN0eWxlLCBrZXkgKyAnOiAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUodGFyZ2V0W2tleV0sIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHYsIGFzUmF3ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIG51bWJlclN0eWxlLCB2XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBzdHJpbmdTdHlsZSwgSlNPTi5zdHJpbmdpZnkodildO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBrZXl3b3JkU3R5bGUsIHZdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc09iamVjdCh2KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gWydvYmplY3QnLCB7IG9iamVjdDogYXNSYXcgPyB0b1Jhdyh2KSA6IHYgfV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgc3RyaW5nU3R5bGUsIFN0cmluZyh2KV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdEtleXMoaW5zdGFuY2UsIHR5cGUpIHtcclxuICAgICAgICBjb25zdCBDb21wID0gaW5zdGFuY2UudHlwZTtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihDb21wKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGV4dHJhY3RlZCA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlLmN0eCkge1xyXG4gICAgICAgICAgICBpZiAoaXNLZXlPZlR5cGUoQ29tcCwga2V5LCB0eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBpbnN0YW5jZS5jdHhba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXh0cmFjdGVkO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaXNLZXlPZlR5cGUoQ29tcCwga2V5LCB0eXBlKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0cyA9IENvbXBbdHlwZV07XHJcbiAgICAgICAgaWYgKChpc0FycmF5KG9wdHMpICYmIG9wdHMuaW5jbHVkZXMoa2V5KSkgfHxcclxuICAgICAgICAgICAgKGlzT2JqZWN0KG9wdHMpICYmIGtleSBpbiBvcHRzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvbXAuZXh0ZW5kcyAmJiBpc0tleU9mVHlwZShDb21wLmV4dGVuZHMsIGtleSwgdHlwZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChDb21wLm1peGlucyAmJiBDb21wLm1peGlucy5zb21lKG0gPT4gaXNLZXlPZlR5cGUobSwga2V5LCB0eXBlKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2VuUmVmRmxhZyh2KSB7XHJcbiAgICAgICAgaWYgKHYuX3NoYWxsb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGBTaGFsbG93UmVmYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHYuZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgQ29tcHV0ZWRSZWZgO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYFJlZmA7XHJcbiAgICB9XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxuICAgIGlmICh3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzKSB7XHJcbiAgICAgICAgd2luZG93LmRldnRvb2xzRm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzID0gW2Zvcm1hdHRlcl07XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEFjdHVhbCBpbXBsZW1lbnRhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gcmVuZGVyTGlzdChzb3VyY2UsIHJlbmRlckl0ZW0pIHtcclxuICAgIGxldCByZXQ7XHJcbiAgICBpZiAoaXNBcnJheShzb3VyY2UpIHx8IGlzU3RyaW5nKHNvdXJjZSkpIHtcclxuICAgICAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBzb3VyY2UubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oc291cmNlW2ldLCBpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2Ygc291cmNlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIU51bWJlci5pc0ludGVnZXIoc291cmNlKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBUaGUgdi1mb3IgcmFuZ2UgZXhwZWN0IGFuIGludGVnZXIgdmFsdWUgYnV0IGdvdCAke3NvdXJjZX0uYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2U7IGkrKykge1xyXG4gICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKGkgKyAxLCBpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChzb3VyY2UpKSB7XHJcbiAgICAgICAgaWYgKHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKSB7XHJcbiAgICAgICAgICAgIHJldCA9IEFycmF5LmZyb20oc291cmNlLCByZW5kZXJJdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xyXG4gICAgICAgICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShzb3VyY2Vba2V5XSwga2V5LCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldCA9IFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG4vKipcclxuICogRm9yIHByZWZpeGluZyBrZXlzIGluIHYtb249XCJvYmpcIiB3aXRoIFwib25cIlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gdG9IYW5kbGVycyhvYmopIHtcclxuICAgIGNvbnN0IHJldCA9IHt9O1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNPYmplY3Qob2JqKSkge1xyXG4gICAgICAgIHdhcm4oYHYtb24gd2l0aCBubyBhcmd1bWVudCBleHBlY3RzIGFuIG9iamVjdCB2YWx1ZS5gKTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgcmV0W3RvSGFuZGxlcktleShrZXkpXSA9IG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG4vKipcclxuICogQ29tcGlsZXIgcnVudGltZSBoZWxwZXIgZm9yIGNyZWF0aW5nIGR5bmFtaWMgc2xvdHMgb2JqZWN0XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTbG90cyhzbG90cywgZHluYW1pY1Nsb3RzKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGR5bmFtaWNTbG90cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHNsb3QgPSBkeW5hbWljU2xvdHNbaV07XHJcbiAgICAgICAgLy8gYXJyYXkgb2YgZHluYW1pYyBzbG90IGdlbmVyYXRlZCBieSA8dGVtcGxhdGUgdi1mb3I9XCIuLi5cIiAjWy4uLl0+XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoc2xvdCkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbG90Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBzbG90c1tzbG90W2pdLm5hbWVdID0gc2xvdFtqXS5mbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzbG90KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbmRpdGlvbmFsIHNpbmdsZSBzbG90IGdlbmVyYXRlZCBieSA8dGVtcGxhdGUgdi1pZj1cIi4uLlwiICNmb28+XHJcbiAgICAgICAgICAgIHNsb3RzW3Nsb3QubmFtZV0gPSBzbG90LmZuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzbG90cztcclxufVxuXG4vLyBDb3JlIEFQSSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuY29uc3QgdmVyc2lvbiA9IFwiMy4wLjJcIjtcclxuLyoqXHJcbiAqIFNTUiB1dGlscyBmb3IgXFxAdnVlL3NlcnZlci1yZW5kZXJlci4gT25seSBleHBvc2VkIGluIGNqcyBidWlsZHMuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3Qgc3NyVXRpbHMgPSAoIG51bGwpO1xuXG5leHBvcnQgeyBCYXNlVHJhbnNpdGlvbiwgQ29tbWVudCwgRnJhZ21lbnQsIEtlZXBBbGl2ZSwgU3RhdGljLCBTdXNwZW5zZSwgVGVsZXBvcnQsIFRleHQsIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLCBjYWxsV2l0aEVycm9ySGFuZGxpbmcsIGNsb25lVk5vZGUsIGNvbXB1dGVkLCBjcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciwgY3JlYXRlUmVuZGVyZXIsIGNyZWF0ZVNsb3RzLCBjcmVhdGVTdGF0aWNWTm9kZSwgY3JlYXRlVGV4dFZOb2RlLCBjcmVhdGVWTm9kZSwgZGVmaW5lQXN5bmNDb21wb25lbnQsIGRlZmluZUNvbXBvbmVudCwgZGV2dG9vbHMsIGdldEN1cnJlbnRJbnN0YW5jZSwgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLCBoLCBoYW5kbGVFcnJvciwgaW5pdEN1c3RvbUZvcm1hdHRlciwgaW5qZWN0LCBpc1ZOb2RlLCBtZXJnZVByb3BzLCBuZXh0VGljaywgb25BY3RpdmF0ZWQsIG9uQmVmb3JlTW91bnQsIG9uQmVmb3JlVW5tb3VudCwgb25CZWZvcmVVcGRhdGUsIG9uRGVhY3RpdmF0ZWQsIG9uRXJyb3JDYXB0dXJlZCwgb25Nb3VudGVkLCBvblJlbmRlclRyYWNrZWQsIG9uUmVuZGVyVHJpZ2dlcmVkLCBvblVubW91bnRlZCwgb25VcGRhdGVkLCBvcGVuQmxvY2ssIHBvcFNjb3BlSWQsIHByb3ZpZGUsIHB1c2hTY29wZUlkLCBxdWV1ZVBvc3RGbHVzaENiLCByZWdpc3RlclJ1bnRpbWVDb21waWxlciwgcmVuZGVyTGlzdCwgcmVuZGVyU2xvdCwgcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSwgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIHNldEJsb2NrVHJhY2tpbmcsIHNldERldnRvb2xzSG9vaywgc2V0VHJhbnNpdGlvbkhvb2tzLCBzc3JDb250ZXh0S2V5LCBzc3JVdGlscywgdG9IYW5kbGVycywgdHJhbnNmb3JtVk5vZGVBcmdzLCB1c2VTU1JDb250ZXh0LCB1c2VUcmFuc2l0aW9uU3RhdGUsIHZlcnNpb24sIHdhcm4sIHdhdGNoLCB3YXRjaEVmZmVjdCwgd2l0aEN0eCwgd2l0aERpcmVjdGl2ZXMsIHdpdGhTY29wZUlkIH07XG4iLCJpbXBvcnQgeyBjYW1lbGl6ZSwgd2FybiwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGdldEN1cnJlbnRJbnN0YW5jZSwgb25Nb3VudGVkLCB3YXRjaEVmZmVjdCwgb25VcGRhdGVkLCB1bnJlZiwgRnJhZ21lbnQsIGgsIEJhc2VUcmFuc2l0aW9uLCB1c2VUcmFuc2l0aW9uU3RhdGUsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgc2V0VHJhbnNpdGlvbkhvb2tzLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLCBjcmVhdGVWTm9kZSwgY3JlYXRlUmVuZGVyZXIsIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyIH0gZnJvbSAnQHZ1ZS9ydW50aW1lLWNvcmUnO1xuZXhwb3J0ICogZnJvbSAnQHZ1ZS9ydW50aW1lLWNvcmUnO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzQXJyYXksIGh5cGhlbmF0ZSwgY2FwaXRhbGl6ZSwgaXNTcGVjaWFsQm9vbGVhbkF0dHIsIGlzT24sIGlzTW9kZWxMaXN0ZW5lciwgaXNGdW5jdGlvbiwgRU1QVFlfT0JKLCBleHRlbmQsIGlzT2JqZWN0LCB0b051bWJlciwgaW52b2tlQXJyYXlGbnMsIGxvb3NlSW5kZXhPZiwgaXNTZXQsIGxvb3NlRXF1YWwsIGlzSFRNTFRhZywgaXNTVkdUYWcgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN2Z05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcclxuY29uc3QgZG9jID0gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IG51bGwpO1xyXG5sZXQgdGVtcENvbnRhaW5lcjtcclxubGV0IHRlbXBTVkdDb250YWluZXI7XHJcbmNvbnN0IG5vZGVPcHMgPSB7XHJcbiAgICBpbnNlcnQ6IChjaGlsZCwgcGFyZW50LCBhbmNob3IpID0+IHtcclxuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBhbmNob3IgfHwgbnVsbCk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlOiBjaGlsZCA9PiB7XHJcbiAgICAgICAgY29uc3QgcGFyZW50ID0gY2hpbGQucGFyZW50Tm9kZTtcclxuICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZUVsZW1lbnQ6ICh0YWcsIGlzU1ZHLCBpcykgPT4gaXNTVkdcclxuICAgICAgICA/IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZylcclxuICAgICAgICA6IGRvYy5jcmVhdGVFbGVtZW50KHRhZywgaXMgPyB7IGlzIH0gOiB1bmRlZmluZWQpLFxyXG4gICAgY3JlYXRlVGV4dDogdGV4dCA9PiBkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCksXHJcbiAgICBjcmVhdGVDb21tZW50OiB0ZXh0ID0+IGRvYy5jcmVhdGVDb21tZW50KHRleHQpLFxyXG4gICAgc2V0VGV4dDogKG5vZGUsIHRleHQpID0+IHtcclxuICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IHRleHQ7XHJcbiAgICB9LFxyXG4gICAgc2V0RWxlbWVudFRleHQ6IChlbCwgdGV4dCkgPT4ge1xyXG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIH0sXHJcbiAgICBwYXJlbnROb2RlOiBub2RlID0+IG5vZGUucGFyZW50Tm9kZSxcclxuICAgIG5leHRTaWJsaW5nOiBub2RlID0+IG5vZGUubmV4dFNpYmxpbmcsXHJcbiAgICBxdWVyeVNlbGVjdG9yOiBzZWxlY3RvciA9PiBkb2MucXVlcnlTZWxlY3RvcihzZWxlY3RvciksXHJcbiAgICBzZXRTY29wZUlkKGVsLCBpZCkge1xyXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShpZCwgJycpO1xyXG4gICAgfSxcclxuICAgIGNsb25lTm9kZShlbCkge1xyXG4gICAgICAgIHJldHVybiBlbC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgLy8gX19VTlNBRkVfX1xyXG4gICAgLy8gUmVhc29uOiBpbm5lckhUTUwuXHJcbiAgICAvLyBTdGF0aWMgY29udGVudCBoZXJlIGNhbiBvbmx5IGNvbWUgZnJvbSBjb21waWxlZCB0ZW1wbGF0ZXMuXHJcbiAgICAvLyBBcyBsb25nIGFzIHRoZSB1c2VyIG9ubHkgdXNlcyB0cnVzdGVkIHRlbXBsYXRlcywgdGhpcyBpcyBzYWZlLlxyXG4gICAgaW5zZXJ0U3RhdGljQ29udGVudChjb250ZW50LCBwYXJlbnQsIGFuY2hvciwgaXNTVkcpIHtcclxuICAgICAgICBjb25zdCB0ZW1wID0gaXNTVkdcclxuICAgICAgICAgICAgPyB0ZW1wU1ZHQ29udGFpbmVyIHx8XHJcbiAgICAgICAgICAgICAgICAodGVtcFNWR0NvbnRhaW5lciA9IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsICdzdmcnKSlcclxuICAgICAgICAgICAgOiB0ZW1wQ29udGFpbmVyIHx8ICh0ZW1wQ29udGFpbmVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcclxuICAgICAgICB0ZW1wLmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgY29uc3QgZmlyc3QgPSB0ZW1wLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgbGV0IG5vZGUgPSBmaXJzdDtcclxuICAgICAgICBsZXQgbGFzdCA9IG5vZGU7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgICAgICAgbGFzdCA9IG5vZGU7XHJcbiAgICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0KG5vZGUsIHBhcmVudCwgYW5jaG9yKTtcclxuICAgICAgICAgICAgbm9kZSA9IHRlbXAuZmlyc3RDaGlsZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtmaXJzdCwgbGFzdF07XHJcbiAgICB9XHJcbn07XG5cbi8vIGNvbXBpbGVyIHNob3VsZCBub3JtYWxpemUgY2xhc3MgKyA6Y2xhc3MgYmluZGluZ3Mgb24gdGhlIHNhbWUgZWxlbWVudFxyXG4vLyBpbnRvIGEgc2luZ2xlIGJpbmRpbmcgWydzdGF0aWNDbGFzcycsIGR5bmFtaWNdXHJcbmZ1bmN0aW9uIHBhdGNoQ2xhc3MoZWwsIHZhbHVlLCBpc1NWRykge1xyXG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICB2YWx1ZSA9ICcnO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzU1ZHKSB7XHJcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGRpcmVjdGx5IHNldHRpbmcgY2xhc3NOYW1lIHNob3VsZCBiZSBmYXN0ZXIgdGhhbiBzZXRBdHRyaWJ1dGUgaW4gdGhlb3J5XHJcbiAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBlbGVtZW50IGR1cmluZyBhIHRyYW5zaXRpb24sIHRha2UgdGhlIHRlbXBvcmFyeSB0cmFuc2l0aW9uXHJcbiAgICAgICAgLy8gY2xhc3NlcyBpbnRvIGFjY291bnQuXHJcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdnRjO1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZVxyXG4gICAgICAgICAgICAgICAgPyBbdmFsdWUsIC4uLnRyYW5zaXRpb25DbGFzc2VzXVxyXG4gICAgICAgICAgICAgICAgOiBbLi4udHJhbnNpdGlvbkNsYXNzZXNdKS5qb2luKCcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIHBhdGNoU3R5bGUoZWwsIHByZXYsIG5leHQpIHtcclxuICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XHJcbiAgICBpZiAoIW5leHQpIHtcclxuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1N0cmluZyhuZXh0KSkge1xyXG4gICAgICAgIGlmIChwcmV2ICE9PSBuZXh0KSB7XHJcbiAgICAgICAgICAgIHN0eWxlLmNzc1RleHQgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcclxuICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgbmV4dFtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXYgJiYgIWlzU3RyaW5nKHByZXYpKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByZXYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0W2tleV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xyXG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdmFsKSB7XHJcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XHJcbiAgICAgICAgdmFsLmZvckVhY2godiA9PiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdikpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnLS0nKSkge1xyXG4gICAgICAgICAgICAvLyBjdXN0b20gcHJvcGVydHkgZGVmaW5pdGlvblxyXG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcHJlZml4ZWQgPSBhdXRvUHJlZml4KHN0eWxlLCBuYW1lKTtcclxuICAgICAgICAgICAgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gIWltcG9ydGFudFxyXG4gICAgICAgICAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKHByZWZpeGVkKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3R5bGVbcHJlZml4ZWRdID0gdmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IHByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XHJcbmNvbnN0IHByZWZpeENhY2hlID0ge307XHJcbmZ1bmN0aW9uIGF1dG9QcmVmaXgoc3R5bGUsIHJhd05hbWUpIHtcclxuICAgIGNvbnN0IGNhY2hlZCA9IHByZWZpeENhY2hlW3Jhd05hbWVdO1xyXG4gICAgaWYgKGNhY2hlZCkge1xyXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XHJcbiAgICB9XHJcbiAgICBsZXQgbmFtZSA9IGNhbWVsaXplKHJhd05hbWUpO1xyXG4gICAgaWYgKG5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgaW4gc3R5bGUpIHtcclxuICAgICAgICByZXR1cm4gKHByZWZpeENhY2hlW3Jhd05hbWVdID0gbmFtZSk7XHJcbiAgICB9XHJcbiAgICBuYW1lID0gY2FwaXRhbGl6ZShuYW1lKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgbmFtZTtcclxuICAgICAgICBpZiAocHJlZml4ZWQgaW4gc3R5bGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChwcmVmaXhDYWNoZVtyYXdOYW1lXSA9IHByZWZpeGVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmF3TmFtZTtcclxufVxuXG5jb25zdCB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xyXG5mdW5jdGlvbiBwYXRjaEF0dHIoZWwsIGtleSwgdmFsdWUsIGlzU1ZHKSB7XHJcbiAgICBpZiAoaXNTVkcgJiYga2V5LnN0YXJ0c1dpdGgoJ3hsaW5rOicpKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywga2V5LnNsaWNlKDYsIGtleS5sZW5ndGgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIG5vdGUgd2UgYXJlIG9ubHkgY2hlY2tpbmcgYm9vbGVhbiBhdHRyaWJ1dGVzIHRoYXQgZG9uJ3QgaGF2ZSBhXHJcbiAgICAgICAgLy8gY29ycmVzcG9uZGluZyBkb20gcHJvcCBvZiB0aGUgc2FtZSBuYW1lIGhlcmUuXHJcbiAgICAgICAgY29uc3QgaXNCb29sZWFuID0gaXNTcGVjaWFsQm9vbGVhbkF0dHIoa2V5KTtcclxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAoaXNCb29sZWFuICYmIHZhbHVlID09PSBmYWxzZSkpIHtcclxuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0Jvb2xlYW4gPyAnJyA6IHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLy8gX19VTlNBRkVfX1xyXG4vLyBmdW5jdGlvbnMuIFRoZSB1c2VyIGlzIHJlc3BvbnNpYmxlIGZvciB1c2luZyB0aGVtIHdpdGggb25seSB0cnVzdGVkIGNvbnRlbnQuXHJcbmZ1bmN0aW9uIHBhdGNoRE9NUHJvcChlbCwga2V5LCB2YWx1ZSwgXHJcbi8vIHRoZSBmb2xsb3dpbmcgYXJncyBhcmUgcGFzc2VkIG9ubHkgZHVlIHRvIHBvdGVudGlhbCBpbm5lckhUTUwvdGV4dENvbnRlbnRcclxuLy8gb3ZlcnJpZGluZyBleGlzdGluZyBWTm9kZXMsIGluIHdoaWNoIGNhc2UgdGhlIG9sZCB0cmVlIG11c3QgYmUgcHJvcGVybHlcclxuLy8gdW5tb3VudGVkLlxyXG5wcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbikge1xyXG4gICAgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgfHwga2V5ID09PSAndGV4dENvbnRlbnQnKSB7XHJcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xyXG4gICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxba2V5XSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWwudGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xyXG4gICAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXHJcbiAgICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZC5cclxuICAgICAgICBlbC5fdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgICAgIGlmIChlbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgZWwudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlID09PSAnJyAmJiB0eXBlb2YgZWxba2V5XSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgLy8gZS5nLiA8c2VsZWN0IG11bHRpcGxlPiBjb21waWxlcyB0byB7IG11bHRpcGxlOiAnJyB9XHJcbiAgICAgICAgZWxba2V5XSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh2YWx1ZSA9PSBudWxsICYmIHR5cGVvZiBlbFtrZXldID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vIGUuZy4gPGRpdiA6aWQ9XCJudWxsXCI+XHJcbiAgICAgICAgZWxba2V5XSA9ICcnO1xyXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gc29tZSBwcm9wZXJ0aWVzIHBlcmZvcm0gdmFsdWUgdmFsaWRhdGlvbiBhbmQgdGhyb3dcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBlbFtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYEZhaWxlZCBzZXR0aW5nIHByb3AgXCIke2tleX1cIiBvbiA8JHtlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCl9PjogYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYHZhbHVlICR7dmFsdWV9IGlzIGludmFsaWQuYCwgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cclxubGV0IF9nZXROb3cgPSBEYXRlLm5vdztcclxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcclxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcclxuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXHJcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cclxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgIF9nZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcCkge1xyXG4gICAgLy8gaWYgdGhlIGxvdy1yZXMgdGltZXN0YW1wIHdoaWNoIGlzIGJpZ2dlciB0aGFuIHRoZSBldmVudCB0aW1lc3RhbXBcclxuICAgIC8vICh3aGljaCBpcyBldmFsdWF0ZWQgQUZURVIpIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXHJcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lcnMgYXMgd2VsbC5cclxuICAgIF9nZXROb3cgPSAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKTtcclxufVxyXG4vLyBUbyBhdm9pZCB0aGUgb3ZlcmhlYWQgb2YgcmVwZWF0ZWRseSBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpLCB3ZSBjYWNoZVxyXG4vLyBhbmQgdXNlIHRoZSBzYW1lIHRpbWVzdGFtcCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVycyBhdHRhY2hlZCBpbiB0aGUgc2FtZSB0aWNrLlxyXG5sZXQgY2FjaGVkTm93ID0gMDtcclxuY29uc3QgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG5jb25zdCByZXNldCA9ICgpID0+IHtcclxuICAgIGNhY2hlZE5vdyA9IDA7XHJcbn07XHJcbmNvbnN0IGdldE5vdyA9ICgpID0+IGNhY2hlZE5vdyB8fCAocC50aGVuKHJlc2V0KSwgKGNhY2hlZE5vdyA9IF9nZXROb3coKSkpO1xyXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGVsLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcclxuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIHBhdGNoRXZlbnQoZWwsIHJhd05hbWUsIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBpbnN0YW5jZSA9IG51bGwpIHtcclxuICAgIC8vIHZlaSA9IHZ1ZSBldmVudCBpbnZva2Vyc1xyXG4gICAgY29uc3QgaW52b2tlcnMgPSBlbC5fdmVpIHx8IChlbC5fdmVpID0ge30pO1xyXG4gICAgY29uc3QgZXhpc3RpbmdJbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV07XHJcbiAgICBpZiAobmV4dFZhbHVlICYmIGV4aXN0aW5nSW52b2tlcikge1xyXG4gICAgICAgIC8vIHBhdGNoXHJcbiAgICAgICAgZXhpc3RpbmdJbnZva2VyLnZhbHVlID0gbmV4dFZhbHVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgW25hbWUsIG9wdGlvbnNdID0gcGFyc2VOYW1lKHJhd05hbWUpO1xyXG4gICAgICAgIGlmIChuZXh0VmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gYWRkXHJcbiAgICAgICAgICAgIGNvbnN0IGludm9rZXIgPSAoaW52b2tlcnNbcmF3TmFtZV0gPSBjcmVhdGVJbnZva2VyKG5leHRWYWx1ZSwgaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgaW52b2tlciwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV4aXN0aW5nSW52b2tlcikge1xyXG4gICAgICAgICAgICAvLyByZW1vdmVcclxuICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgZXhpc3RpbmdJbnZva2VyLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgaW52b2tlcnNbcmF3TmFtZV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IG9wdGlvbnNNb2RpZmllclJFID0gLyg/Ok9uY2V8UGFzc2l2ZXxDYXB0dXJlKSQvO1xyXG5mdW5jdGlvbiBwYXJzZU5hbWUobmFtZSkge1xyXG4gICAgbGV0IG9wdGlvbnM7XHJcbiAgICBpZiAob3B0aW9uc01vZGlmaWVyUkUudGVzdChuYW1lKSkge1xyXG4gICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICBsZXQgbTtcclxuICAgICAgICB3aGlsZSAoKG0gPSBuYW1lLm1hdGNoKG9wdGlvbnNNb2RpZmllclJFKSkpIHtcclxuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgbmFtZS5sZW5ndGggLSBtWzBdLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIG9wdGlvbnNbbVswXS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtuYW1lLnNsaWNlKDIpLnRvTG93ZXJDYXNlKCksIG9wdGlvbnNdO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUludm9rZXIoaW5pdGlhbFZhbHVlLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgaW52b2tlciA9IChlKSA9PiB7XHJcbiAgICAgICAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxyXG4gICAgICAgIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXHJcbiAgICAgICAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXHJcbiAgICAgICAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxyXG4gICAgICAgIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcclxuICAgICAgICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXHJcbiAgICAgICAgY29uc3QgdGltZVN0YW1wID0gZS50aW1lU3RhbXAgfHwgX2dldE5vdygpO1xyXG4gICAgICAgIGlmICh0aW1lU3RhbXAgPj0gaW52b2tlci5hdHRhY2hlZCAtIDEpIHtcclxuICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcocGF0Y2hTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oZSwgaW52b2tlci52YWx1ZSksIGluc3RhbmNlLCA1IC8qIE5BVElWRV9FVkVOVF9IQU5ETEVSICovLCBbZV0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpbnZva2VyLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xyXG4gICAgaW52b2tlci5hdHRhY2hlZCA9IGdldE5vdygpO1xyXG4gICAgcmV0dXJuIGludm9rZXI7XHJcbn1cclxuZnVuY3Rpb24gcGF0Y2hTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oZSwgdmFsdWUpIHtcclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsU3RvcCA9IGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uO1xyXG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBvcmlnaW5hbFN0b3AuY2FsbChlKTtcclxuICAgICAgICAgICAgZS5fc3RvcHBlZCA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdmFsdWUubWFwKGZuID0+IChlKSA9PiAhZS5fc3RvcHBlZCAmJiBmbihlKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgbmF0aXZlT25SRSA9IC9eb25bYS16XS87XHJcbmNvbnN0IGZvcmNlUGF0Y2hQcm9wID0gKF8sIGtleSkgPT4ga2V5ID09PSAndmFsdWUnO1xyXG5jb25zdCBwYXRjaFByb3AgPSAoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIGlzU1ZHID0gZmFsc2UsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgIC8vIHNwZWNpYWxcclxuICAgICAgICBjYXNlICdjbGFzcyc6XHJcbiAgICAgICAgICAgIHBhdGNoQ2xhc3MoZWwsIG5leHRWYWx1ZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzdHlsZSc6XHJcbiAgICAgICAgICAgIHBhdGNoU3R5bGUoZWwsIHByZXZWYWx1ZSwgbmV4dFZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgaWYgKGlzT24oa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIHYtbW9kZWwgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hFdmVudChlbCwga2V5LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgcGFyZW50Q29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBpc1NWRykpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoRE9NUHJvcChlbCwga2V5LCBuZXh0VmFsdWUsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgPGlucHV0IHYtbW9kZWwgdHlwZT1cImNoZWNrYm94XCI+IHdpdGhcclxuICAgICAgICAgICAgICAgIC8vIDp0cnVlLXZhbHVlICYgOmZhbHNlLXZhbHVlXHJcbiAgICAgICAgICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBkb20gcHJvcGVydGllcyBzaW5jZSBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlXHJcbiAgICAgICAgICAgICAgICAvLyBzdHJpbmdpZmllZC5cclxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICd0cnVlLXZhbHVlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLl90cnVlVmFsdWUgPSBuZXh0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdmYWxzZS12YWx1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5fZmFsc2VWYWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBhdGNoQXR0cihlbCwga2V5LCBuZXh0VmFsdWUsIGlzU1ZHKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIHZhbHVlLCBpc1NWRykge1xyXG4gICAgaWYgKGlzU1ZHKSB7XHJcbiAgICAgICAgLy8gbW9zdCBrZXlzIG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZSBvbiBzdmcgZWxlbWVudHMgdG8gd29ya1xyXG4gICAgICAgIC8vIC4uLmV4Y2VwdCBpbm5lckhUTUxcclxuICAgICAgICBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gb3IgbmF0aXZlIG9uY2xpY2sgd2l0aCBmdW5jdGlvbiB2YWx1ZXNcclxuICAgICAgICBpZiAoa2V5IGluIGVsICYmIG5hdGl2ZU9uUkUudGVzdChrZXkpICYmIGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBzcGVsbGNoZWNrIGFuZCBkcmFnZ2FibGUgYXJlIG51bWVyYXRlZCBhdHRycywgaG93ZXZlciB0aGVpclxyXG4gICAgLy8gY29ycmVzcG9uZGluZyBET00gcHJvcGVydGllcyBhcmUgYWN0dWFsbHkgYm9vbGVhbnMgLSB0aGlzIGxlYWRzIHRvXHJcbiAgICAvLyBzZXR0aW5nIGl0IHdpdGggYSBzdHJpbmcgXCJmYWxzZVwiIHZhbHVlIGxlYWRpbmcgaXQgdG8gYmUgY29lcmNlZCB0b1xyXG4gICAgLy8gYHRydWVgLCBzbyB3ZSBuZWVkIHRvIGFsd2F5cyB0cmVhdCB0aGVtIGFzIGF0dHJpYnV0ZXMuXHJcbiAgICAvLyBOb3RlIHRoYXQgYGNvbnRlbnRFZGl0YWJsZWAgZG9lc24ndCBoYXZlIHRoaXMgcHJvYmxlbTogaXRzIERPTVxyXG4gICAgLy8gcHJvcGVydHkgaXMgYWxzbyBlbnVtZXJhdGVkIHN0cmluZyB2YWx1ZXMuXHJcbiAgICBpZiAoa2V5ID09PSAnc3BlbGxjaGVjaycgfHwga2V5ID09PSAnZHJhZ2dhYmxlJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vICMxNzg3IGZvcm0gYXMgYW4gYXR0cmlidXRlIG11c3QgYmUgYSBzdHJpbmcsIHdoaWxlIGl0IGFjY2VwdHMgYW4gRWxlbWVudCBhc1xyXG4gICAgLy8gYSBwcm9wXHJcbiAgICBpZiAoa2V5ID09PSAnZm9ybScgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vICMxNTI2IDxpbnB1dCBsaXN0PiBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGVcclxuICAgIGlmIChrZXkgPT09ICdsaXN0JyAmJiBlbC50YWdOYW1lID09PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gbmF0aXZlIG9uY2xpY2sgd2l0aCBzdHJpbmcgdmFsdWUsIG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxyXG4gICAgaWYgKG5hdGl2ZU9uUkUudGVzdChrZXkpICYmIGlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBrZXkgaW4gZWw7XHJcbn1cblxuZnVuY3Rpb24gdXNlQ3NzTW9kdWxlKG5hbWUgPSAnJHN0eWxlJykge1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHVzZUNzc01vZHVsZSBtdXN0IGJlIGNhbGxlZCBpbnNpZGUgc2V0dXAoKWApO1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfT0JKO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2R1bGVzID0gaW5zdGFuY2UudHlwZS5fX2Nzc01vZHVsZXM7XHJcbiAgICAgICAgaWYgKCFtb2R1bGVzKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBDdXJyZW50IGluc3RhbmNlIGRvZXMgbm90IGhhdmUgQ1NTIG1vZHVsZXMgaW5qZWN0ZWQuYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9PQko7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1vZCA9IG1vZHVsZXNbbmFtZV07XHJcbiAgICAgICAgaWYgKCFtb2QpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKGBDdXJyZW50IGluc3RhbmNlIGRvZXMgbm90IGhhdmUgQ1NTIG1vZHVsZSBuYW1lZCBcIiR7bmFtZX1cIi5gKTtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1vZDtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiB1c2VDc3NWYXJzKGdldHRlciwgc2NvcGVkID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB3YXJuKGB1c2VDc3NWYXJzIGlzIGNhbGxlZCB3aXRob3V0IGN1cnJlbnQgYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZS5gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcmVmaXggPSBzY29wZWQgJiYgaW5zdGFuY2UudHlwZS5fX3Njb3BlSWRcclxuICAgICAgICA/IGAke2luc3RhbmNlLnR5cGUuX19zY29wZUlkLnJlcGxhY2UoL15kYXRhLXYtLywgJycpfS1gXHJcbiAgICAgICAgOiBgYDtcclxuICAgIGNvbnN0IHNldFZhcnMgPSAoKSA9PiBzZXRWYXJzT25WTm9kZShpbnN0YW5jZS5zdWJUcmVlLCBnZXR0ZXIoaW5zdGFuY2UucHJveHkpLCBwcmVmaXgpO1xyXG4gICAgb25Nb3VudGVkKCgpID0+IHdhdGNoRWZmZWN0KHNldFZhcnMpKTtcclxuICAgIG9uVXBkYXRlZChzZXRWYXJzKTtcclxufVxyXG5mdW5jdGlvbiBzZXRWYXJzT25WTm9kZSh2bm9kZSwgdmFycywgcHJlZml4KSB7XHJcbiAgICBpZiAoIHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgIGNvbnN0IHN1c3BlbnNlID0gdm5vZGUuc3VzcGVuc2U7XHJcbiAgICAgICAgdm5vZGUgPSBzdXNwZW5zZS5hY3RpdmVCcmFuY2g7XHJcbiAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggJiYgIXN1c3BlbnNlLmlzSHlkcmF0aW5nKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRWYXJzT25WTm9kZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIHZhcnMsIHByZWZpeCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGRyaWxsIGRvd24gSE9DcyB1bnRpbCBpdCdzIGEgbm9uLWNvbXBvbmVudCB2bm9kZVxyXG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudCkge1xyXG4gICAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50LnN1YlRyZWU7XHJcbiAgICB9XHJcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovICYmIHZub2RlLmVsKSB7XHJcbiAgICAgICAgY29uc3Qgc3R5bGUgPSB2bm9kZS5lbC5zdHlsZTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YXJzKSB7XHJcbiAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KGAtLSR7cHJlZml4fSR7a2V5fWAsIHVucmVmKHZhcnNba2V5XSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaChjID0+IHNldFZhcnNPblZOb2RlKGMsIHZhcnMsIHByZWZpeCkpO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XHJcbmNvbnN0IEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xyXG4vLyBET00gVHJhbnNpdGlvbiBpcyBhIGhpZ2hlci1vcmRlci1jb21wb25lbnQgYmFzZWQgb24gdGhlIHBsYXRmb3JtLWFnbm9zdGljXHJcbi8vIGJhc2UgVHJhbnNpdGlvbiBjb21wb25lbnQsIHdpdGggRE9NLXNwZWNpZmljIGxvZ2ljLlxyXG5jb25zdCBUcmFuc2l0aW9uID0gKHByb3BzLCB7IHNsb3RzIH0pID0+IGgoQmFzZVRyYW5zaXRpb24sIHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocHJvcHMpLCBzbG90cyk7XHJcblRyYW5zaXRpb24uZGlzcGxheU5hbWUgPSAnVHJhbnNpdGlvbic7XHJcbmNvbnN0IERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSB7XHJcbiAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICBjc3M6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6IHRydWVcclxuICAgIH0sXHJcbiAgICBkdXJhdGlvbjogW1N0cmluZywgTnVtYmVyLCBPYmplY3RdLFxyXG4gICAgZW50ZXJGcm9tQ2xhc3M6IFN0cmluZyxcclxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGVudGVyVG9DbGFzczogU3RyaW5nLFxyXG4gICAgYXBwZWFyRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxyXG4gICAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxyXG4gICAgbGVhdmVGcm9tQ2xhc3M6IFN0cmluZyxcclxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGxlYXZlVG9DbGFzczogU3RyaW5nXHJcbn07XHJcbmNvbnN0IFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSAoVHJhbnNpdGlvbi5wcm9wcyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBCYXNlVHJhbnNpdGlvbi5wcm9wcywgRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycykpO1xyXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKSB7XHJcbiAgICBsZXQgeyBuYW1lID0gJ3YnLCB0eXBlLCBjc3MgPSB0cnVlLCBkdXJhdGlvbiwgZW50ZXJGcm9tQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1mcm9tYCwgZW50ZXJBY3RpdmVDbGFzcyA9IGAke25hbWV9LWVudGVyLWFjdGl2ZWAsIGVudGVyVG9DbGFzcyA9IGAke25hbWV9LWVudGVyLXRvYCwgYXBwZWFyRnJvbUNsYXNzID0gZW50ZXJGcm9tQ2xhc3MsIGFwcGVhckFjdGl2ZUNsYXNzID0gZW50ZXJBY3RpdmVDbGFzcywgYXBwZWFyVG9DbGFzcyA9IGVudGVyVG9DbGFzcywgbGVhdmVGcm9tQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1mcm9tYCwgbGVhdmVBY3RpdmVDbGFzcyA9IGAke25hbWV9LWxlYXZlLWFjdGl2ZWAsIGxlYXZlVG9DbGFzcyA9IGAke25hbWV9LWxlYXZlLXRvYCB9ID0gcmF3UHJvcHM7XHJcbiAgICBjb25zdCBiYXNlUHJvcHMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Byb3BzKSB7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKSB7XHJcbiAgICAgICAgICAgIGJhc2VQcm9wc1trZXldID0gcmF3UHJvcHNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWNzcykge1xyXG4gICAgICAgIHJldHVybiBiYXNlUHJvcHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkdXJhdGlvbnMgPSBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbik7XHJcbiAgICBjb25zdCBlbnRlckR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1swXTtcclxuICAgIGNvbnN0IGxlYXZlRHVyYXRpb24gPSBkdXJhdGlvbnMgJiYgZHVyYXRpb25zWzFdO1xyXG4gICAgY29uc3QgeyBvbkJlZm9yZUVudGVyLCBvbkVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkxlYXZlLCBvbkxlYXZlQ2FuY2VsbGVkLCBvbkJlZm9yZUFwcGVhciA9IG9uQmVmb3JlRW50ZXIsIG9uQXBwZWFyID0gb25FbnRlciwgb25BcHBlYXJDYW5jZWxsZWQgPSBvbkVudGVyQ2FuY2VsbGVkIH0gPSBiYXNlUHJvcHM7XHJcbiAgICBjb25zdCBmaW5pc2hFbnRlciA9IChlbCwgaXNBcHBlYXIsIGRvbmUpID0+IHtcclxuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhckFjdGl2ZUNsYXNzIDogZW50ZXJBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgZG9uZSAmJiBkb25lKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZmluaXNoTGVhdmUgPSAoZWwsIGRvbmUpID0+IHtcclxuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICBkb25lICYmIGRvbmUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBtYWtlRW50ZXJIb29rID0gKGlzQXBwZWFyKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChlbCwgZG9uZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBob29rID0gaXNBcHBlYXIgPyBvbkFwcGVhciA6IG9uRW50ZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hFbnRlcihlbCwgaXNBcHBlYXIsIGRvbmUpO1xyXG4gICAgICAgICAgICBob29rICYmIGhvb2soZWwsIHJlc29sdmUpO1xyXG4gICAgICAgICAgICBuZXh0RnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhckZyb21DbGFzcyA6IGVudGVyRnJvbUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzKTtcclxuICAgICAgICAgICAgICAgIGlmICghKGhvb2sgJiYgaG9vay5sZW5ndGggPiAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRlckR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgZW50ZXJEdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIHJlc29sdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZXh0ZW5kKGJhc2VQcm9wcywge1xyXG4gICAgICAgIG9uQmVmb3JlRW50ZXIoZWwpIHtcclxuICAgICAgICAgICAgb25CZWZvcmVFbnRlciAmJiBvbkJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBlbnRlckFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBlbnRlckZyb21DbGFzcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkJlZm9yZUFwcGVhcihlbCkge1xyXG4gICAgICAgICAgICBvbkJlZm9yZUFwcGVhciAmJiBvbkJlZm9yZUFwcGVhcihlbCk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYXBwZWFyQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFwcGVhckZyb21DbGFzcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkVudGVyOiBtYWtlRW50ZXJIb29rKGZhbHNlKSxcclxuICAgICAgICBvbkFwcGVhcjogbWFrZUVudGVySG9vayh0cnVlKSxcclxuICAgICAgICBvbkxlYXZlKGVsLCBkb25lKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hMZWF2ZShlbCwgZG9uZSk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xyXG4gICAgICAgICAgICBuZXh0RnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShvbkxlYXZlICYmIG9uTGVhdmUubGVuZ3RoID4gMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGVhdmVEdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIGxlYXZlRHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCByZXNvbHZlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBvbkxlYXZlICYmIG9uTGVhdmUoZWwsIHJlc29sdmUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25FbnRlckNhbmNlbGxlZChlbCkge1xyXG4gICAgICAgICAgICBmaW5pc2hFbnRlcihlbCwgZmFsc2UpO1xyXG4gICAgICAgICAgICBvbkVudGVyQ2FuY2VsbGVkICYmIG9uRW50ZXJDYW5jZWxsZWQoZWwpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BcHBlYXJDYW5jZWxsZWQoZWwpIHtcclxuICAgICAgICAgICAgZmluaXNoRW50ZXIoZWwsIHRydWUpO1xyXG4gICAgICAgICAgICBvbkFwcGVhckNhbmNlbGxlZCAmJiBvbkFwcGVhckNhbmNlbGxlZChlbCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkKGVsKSB7XHJcbiAgICAgICAgICAgIGZpbmlzaExlYXZlKGVsKTtcclxuICAgICAgICAgICAgb25MZWF2ZUNhbmNlbGxlZCAmJiBvbkxlYXZlQ2FuY2VsbGVkKGVsKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbikge1xyXG4gICAgaWYgKGR1cmF0aW9uID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KGR1cmF0aW9uKSkge1xyXG4gICAgICAgIHJldHVybiBbTnVtYmVyT2YoZHVyYXRpb24uZW50ZXIpLCBOdW1iZXJPZihkdXJhdGlvbi5sZWF2ZSldO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbiA9IE51bWJlck9mKGR1cmF0aW9uKTtcclxuICAgICAgICByZXR1cm4gW24sIG5dO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIE51bWJlck9mKHZhbCkge1xyXG4gICAgY29uc3QgcmVzID0gdG9OdW1iZXIodmFsKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpXHJcbiAgICAgICAgdmFsaWRhdGVEdXJhdGlvbihyZXMpO1xyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUR1cmF0aW9uKHZhbCkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgd2FybihgPHRyYW5zaXRpb24+IGV4cGxpY2l0IGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIGAgK1xyXG4gICAgICAgICAgICBgZ290ICR7SlNPTi5zdHJpbmdpZnkodmFsKX0uYCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc05hTih2YWwpKSB7XHJcbiAgICAgICAgd2FybihgPHRyYW5zaXRpb24+IGV4cGxpY2l0IGR1cmF0aW9uIGlzIE5hTiAtIGAgK1xyXG4gICAgICAgICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XHJcbiAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBlbC5jbGFzc0xpc3QuYWRkKGMpKTtcclxuICAgIChlbC5fdnRjIHx8XHJcbiAgICAgICAgKGVsLl92dGMgPSBuZXcgU2V0KCkpKS5hZGQoY2xzKTtcclxufVxyXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xyXG4gICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgZWwuY2xhc3NMaXN0LnJlbW92ZShjKSk7XHJcbiAgICBjb25zdCB7IF92dGMgfSA9IGVsO1xyXG4gICAgaWYgKF92dGMpIHtcclxuICAgICAgICBfdnRjLmRlbGV0ZShjbHMpO1xyXG4gICAgICAgIGlmICghX3Z0Yy5zaXplKSB7XHJcbiAgICAgICAgICAgIGVsLl92dGMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG5leHRGcmFtZShjYikge1xyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzKGVsLCBleHBlY3RlZFR5cGUsIGNiKSB7XHJcbiAgICBjb25zdCB7IHR5cGUsIHRpbWVvdXQsIHByb3BDb3VudCB9ID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XHJcbiAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICByZXR1cm4gY2IoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGVuZEV2ZW50ID0gdHlwZSArICdlbmQnO1xyXG4gICAgbGV0IGVuZGVkID0gMDtcclxuICAgIGNvbnN0IGVuZCA9ICgpID0+IHtcclxuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGVuZEV2ZW50LCBvbkVuZCk7XHJcbiAgICAgICAgY2IoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBvbkVuZCA9IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xyXG4gICAgICAgICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIGVuZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xyXG4gICAgICAgICAgICBlbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9LCB0aW1lb3V0ICsgMSk7XHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGVuZEV2ZW50LCBvbkVuZCk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSkge1xyXG4gICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xyXG4gICAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xyXG4gICAgY29uc3QgZ2V0U3R5bGVQcm9wZXJ0aWVzID0gKGtleSkgPT4gKHN0eWxlc1trZXldIHx8ICcnKS5zcGxpdCgnLCAnKTtcclxuICAgIGNvbnN0IHRyYW5zaXRpb25EZWxheXMgPSBnZXRTdHlsZVByb3BlcnRpZXMoVFJBTlNJVElPTiArICdEZWxheScpO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IGdldFN0eWxlUHJvcGVydGllcyhUUkFOU0lUSU9OICsgJ0R1cmF0aW9uJyk7XHJcbiAgICBjb25zdCB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XHJcbiAgICBjb25zdCBhbmltYXRpb25EZWxheXMgPSBnZXRTdHlsZVByb3BlcnRpZXMoQU5JTUFUSU9OICsgJ0RlbGF5Jyk7XHJcbiAgICBjb25zdCBhbmltYXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoQU5JTUFUSU9OICsgJ0R1cmF0aW9uJyk7XHJcbiAgICBjb25zdCBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XHJcbiAgICBsZXQgdHlwZSA9IG51bGw7XHJcbiAgICBsZXQgdGltZW91dCA9IDA7XHJcbiAgICBsZXQgcHJvcENvdW50ID0gMDtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgdHlwZSA9IFRSQU5TSVRJT047XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcclxuICAgICAgICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcclxuICAgICAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgdHlwZSA9IEFOSU1BVElPTjtcclxuICAgICAgICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XHJcbiAgICAgICAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcclxuICAgICAgICB0eXBlID1cclxuICAgICAgICAgICAgdGltZW91dCA+IDBcclxuICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XHJcbiAgICAgICAgICAgICAgICAgICAgPyBUUkFOU0lUSU9OXHJcbiAgICAgICAgICAgICAgICAgICAgOiBBTklNQVRJT05cclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICBwcm9wQ291bnQgPSB0eXBlXHJcbiAgICAgICAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxyXG4gICAgICAgICAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXHJcbiAgICAgICAgICAgIDogMDtcclxuICAgIH1cclxuICAgIGNvbnN0IGhhc1RyYW5zZm9ybSA9IHR5cGUgPT09IFRSQU5TSVRJT04gJiZcclxuICAgICAgICAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvLnRlc3Qoc3R5bGVzW1RSQU5TSVRJT04gKyAnUHJvcGVydHknXSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgdGltZW91dCxcclxuICAgICAgICBwcm9wQ291bnQsXHJcbiAgICAgICAgaGFzVHJhbnNmb3JtXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldFRpbWVvdXQoZGVsYXlzLCBkdXJhdGlvbnMpIHtcclxuICAgIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBNYXRoLm1heCguLi5kdXJhdGlvbnMubWFwKChkLCBpKSA9PiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pKSk7XHJcbn1cclxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXJcclxuLy8gbnVtYmVycyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXHJcbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd25cclxuLy8gKGkuZS4gYWN0aW5nIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcclxuZnVuY3Rpb24gdG9NcyhzKSB7XHJcbiAgICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDA7XHJcbn1cblxuZnVuY3Rpb24gdG9SYXcob2JzZXJ2ZWQpIHtcclxuICAgIHJldHVybiAoKG9ic2VydmVkICYmIHRvUmF3KG9ic2VydmVkW1wiX192X3Jhd1wiIC8qIFJBVyAqL10pKSB8fCBvYnNlcnZlZCk7XHJcbn1cblxuY29uc3QgcG9zaXRpb25NYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCBuZXdQb3NpdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IFRyYW5zaXRpb25Hcm91cEltcGwgPSB7XHJcbiAgICBuYW1lOiAnVHJhbnNpdGlvbkdyb3VwJyxcclxuICAgIHByb3BzOiAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycywge1xyXG4gICAgICAgIHRhZzogU3RyaW5nLFxyXG4gICAgICAgIG1vdmVDbGFzczogU3RyaW5nXHJcbiAgICB9KSxcclxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XHJcbiAgICAgICAgbGV0IHByZXZDaGlsZHJlbjtcclxuICAgICAgICBsZXQgY2hpbGRyZW47XHJcbiAgICAgICAgb25VcGRhdGVkKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gY2hpbGRyZW4gaXMgZ3VhcmFudGVlZCB0byBleGlzdCBhZnRlciBpbml0aWFsIHJlbmRlclxyXG4gICAgICAgICAgICBpZiAoIXByZXZDaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBtb3ZlQ2xhc3MgPSBwcm9wcy5tb3ZlQ2xhc3MgfHwgYCR7cHJvcHMubmFtZSB8fCAndid9LW1vdmVgO1xyXG4gICAgICAgICAgICBpZiAoIWhhc0NTU1RyYW5zZm9ybShwcmV2Q2hpbGRyZW5bMF0uZWwsIGluc3RhbmNlLnZub2RlLmVsLCBtb3ZlQ2xhc3MpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXHJcbiAgICAgICAgICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxyXG4gICAgICAgICAgICBwcmV2Q2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XHJcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgY29uc3QgbW92ZWRDaGlsZHJlbiA9IHByZXZDaGlsZHJlbi5maWx0ZXIoYXBwbHlUcmFuc2xhdGlvbik7XHJcbiAgICAgICAgICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxyXG4gICAgICAgICAgICBmb3JjZVJlZmxvdygpO1xyXG4gICAgICAgICAgICBtb3ZlZENoaWxkcmVuLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IGMuZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xyXG4gICAgICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gc3R5bGUud2Via2l0VHJhbnNmb3JtID0gc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IChlbC5fbW92ZUNiID0gKGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBjYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgY2IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByYXdQcm9wcyA9IHRvUmF3KHByb3BzKTtcclxuICAgICAgICAgICAgY29uc3QgY3NzVHJhbnNpdGlvblByb3BzID0gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJhd1Byb3BzLnRhZyB8fCBGcmFnbWVudDtcclxuICAgICAgICAgICAgcHJldkNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCA/IGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCkpIDogW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQua2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoY2hpbGQsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoY2hpbGQsIGNzc1RyYW5zaXRpb25Qcm9wcywgc3RhdGUsIGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGA8VHJhbnNpdGlvbkdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBwcmV2Q2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGNoaWxkLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGNoaWxkLCBjc3NUcmFuc2l0aW9uUHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uTWFwLnNldChjaGlsZCwgY2hpbGQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0YWcsIG51bGwsIGNoaWxkcmVuKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBUcmFuc2l0aW9uR3JvdXAgPSBUcmFuc2l0aW9uR3JvdXBJbXBsO1xyXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyhjKSB7XHJcbiAgICBjb25zdCBlbCA9IGMuZWw7XHJcbiAgICBpZiAoZWwuX21vdmVDYikge1xyXG4gICAgICAgIGVsLl9tb3ZlQ2IoKTtcclxuICAgIH1cclxuICAgIGlmIChlbC5fZW50ZXJDYikge1xyXG4gICAgICAgIGVsLl9lbnRlckNiKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24oYykge1xyXG4gICAgbmV3UG9zaXRpb25NYXAuc2V0KGMsIGMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xyXG59XHJcbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24oYykge1xyXG4gICAgY29uc3Qgb2xkUG9zID0gcG9zaXRpb25NYXAuZ2V0KGMpO1xyXG4gICAgY29uc3QgbmV3UG9zID0gbmV3UG9zaXRpb25NYXAuZ2V0KGMpO1xyXG4gICAgY29uc3QgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xyXG4gICAgY29uc3QgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcclxuICAgIGlmIChkeCB8fCBkeSkge1xyXG4gICAgICAgIGNvbnN0IHMgPSBjLmVsLnN0eWxlO1xyXG4gICAgICAgIHMudHJhbnNmb3JtID0gcy53ZWJraXRUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7ZHh9cHgsJHtkeX1weClgO1xyXG4gICAgICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcclxuICAgICAgICByZXR1cm4gYztcclxuICAgIH1cclxufVxyXG4vLyB0aGlzIGlzIHB1dCBpbiBhIGRlZGljYXRlZCBmdW5jdGlvbiB0byBhdm9pZCB0aGUgbGluZSBmcm9tIGJlaW5nIHRyZWVzaGFrZW5cclxuZnVuY3Rpb24gZm9yY2VSZWZsb3coKSB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XHJcbn1cclxuZnVuY3Rpb24gaGFzQ1NTVHJhbnNmb3JtKGVsLCByb290LCBtb3ZlQ2xhc3MpIHtcclxuICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xyXG4gICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXHJcbiAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXHJcbiAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcclxuICAgIC8vIGlzIGFwcGxpZWQuXHJcbiAgICBjb25zdCBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xyXG4gICAgaWYgKGVsLl92dGMpIHtcclxuICAgICAgICBlbC5fdnRjLmZvckVhY2goY2xzID0+IHtcclxuICAgICAgICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LnJlbW92ZShjKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBtb3ZlQ2xhc3Muc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBjbG9uZS5jbGFzc0xpc3QuYWRkKGMpKTtcclxuICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSAocm9vdC5ub2RlVHlwZSA9PT0gMVxyXG4gICAgICAgID8gcm9vdFxyXG4gICAgICAgIDogcm9vdC5wYXJlbnROb2RlKTtcclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9uZSk7XHJcbiAgICBjb25zdCB7IGhhc1RyYW5zZm9ybSB9ID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xyXG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNsb25lKTtcclxuICAgIHJldHVybiBoYXNUcmFuc2Zvcm07XHJcbn1cblxuY29uc3QgZ2V0TW9kZWxBc3NpZ25lciA9ICh2bm9kZSkgPT4ge1xyXG4gICAgY29uc3QgZm4gPSB2bm9kZS5wcm9wc1snb25VcGRhdGU6bW9kZWxWYWx1ZSddO1xyXG4gICAgcmV0dXJuIGlzQXJyYXkoZm4pID8gdmFsdWUgPT4gaW52b2tlQXJyYXlGbnMoZm4sIHZhbHVlKSA6IGZuO1xyXG59O1xyXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQoZSkge1xyXG4gICAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kKGUpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgaWYgKHRhcmdldC5jb21wb3NpbmcpIHtcclxuICAgICAgICB0YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsICdpbnB1dCcpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHRyaWdnZXIoZWwsIHR5cGUpIHtcclxuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xyXG4gICAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xyXG59XHJcbi8vIFdlIGFyZSBleHBvcnRpbmcgdGhlIHYtbW9kZWwgcnVudGltZSBkaXJlY3RseSBhcyB2bm9kZSBob29rcyBzbyB0aGF0IGl0IGNhblxyXG4vLyBiZSB0cmVlLXNoYWtlbiBpbiBjYXNlIHYtbW9kZWwgaXMgbmV2ZXIgdXNlZC5cclxuY29uc3Qgdk1vZGVsVGV4dCA9IHtcclxuICAgIGNyZWF0ZWQoZWwsIHsgbW9kaWZpZXJzOiB7IGxhenksIHRyaW0sIG51bWJlciB9IH0sIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGNvbnN0IGNhc3RUb051bWJlciA9IG51bWJlciB8fCBlbC50eXBlID09PSAnbnVtYmVyJztcclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBsYXp5ID8gJ2NoYW5nZScgOiAnaW5wdXQnLCBlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNvbXBvc2luZylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgbGV0IGRvbVZhbHVlID0gZWwudmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh0cmltKSB7XHJcbiAgICAgICAgICAgICAgICBkb21WYWx1ZSA9IGRvbVZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjYXN0VG9OdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGRvbVZhbHVlID0gdG9OdW1iZXIoZG9tVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsLl9hc3NpZ24oZG9tVmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0cmltKSB7XHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC52YWx1ZSA9IGVsLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbGF6eSkge1xyXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xyXG4gICAgICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXHJcbiAgICAgICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcclxuICAgICAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxyXG4gICAgICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyBzZXQgdmFsdWUgb24gbW91bnRlZCBzbyBpdCdzIGFmdGVyIG1pbi9tYXggZm9yIHR5cGU9XCJyYW5nZVwiXHJcbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0pIHtcclxuICAgICAgICBlbC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgeyB2YWx1ZSwgbW9kaWZpZXJzOiB7IHRyaW0sIG51bWJlciB9IH0sIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIC8vIGF2b2lkIGNsZWFyaW5nIHVucmVzb2x2ZWQgdGV4dC4gIzIzMDJcclxuICAgICAgICBpZiAoZWwuY29tcG9zaW5nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsKSB7XHJcbiAgICAgICAgICAgIGlmICh0cmltICYmIGVsLnZhbHVlLnRyaW0oKSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKG51bWJlciB8fCBlbC50eXBlID09PSAnbnVtYmVyJykgJiYgdG9OdW1iZXIoZWwudmFsdWUpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XHJcbiAgICAgICAgaWYgKGVsLnZhbHVlICE9PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICBlbC52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuY29uc3Qgdk1vZGVsQ2hlY2tib3ggPSB7XHJcbiAgICBjcmVhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xyXG4gICAgICAgIHNldENoZWNrZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbW9kZWxWYWx1ZSA9IGVsLl9tb2RlbFZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50VmFsdWUgPSBnZXRWYWx1ZShlbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBlbC5jaGVja2VkO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NpZ24gPSBlbC5fYXNzaWduO1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJheShtb2RlbFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsb29zZUluZGV4T2YobW9kZWxWYWx1ZSwgZWxlbWVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gaW5kZXggIT09IC0xO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQgJiYgIWZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKG1vZGVsVmFsdWUuY29uY2F0KGVsZW1lbnRWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWNoZWNrZWQgJiYgZm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IFsuLi5tb2RlbFZhbHVlXTtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbihmaWx0ZXJlZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNTZXQobW9kZWxWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxWYWx1ZS5hZGQoZWxlbWVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVmFsdWUuZGVsZXRlKGVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhc3NpZ24oZ2V0Q2hlY2tib3hWYWx1ZShlbCwgY2hlY2tlZCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICBzZXRDaGVja2VkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHNldENoZWNrZWQoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XHJcbiAgICBlbC5fbW9kZWxWYWx1ZSA9IHZhbHVlO1xyXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpID4gLTE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1NldCh2YWx1ZSkpIHtcclxuICAgICAgICBlbC5jaGVja2VkID0gdmFsdWUuaGFzKHZub2RlLnByb3BzLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xyXG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCBnZXRDaGVja2JveFZhbHVlKGVsLCB0cnVlKSk7XHJcbiAgICB9XHJcbn1cclxuY29uc3Qgdk1vZGVsUmFkaW8gPSB7XHJcbiAgICBjcmVhdGVkKGVsLCB7IHZhbHVlIH0sIHZub2RlKSB7XHJcbiAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKTtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgZWwuX2Fzc2lnbihnZXRWYWx1ZShlbCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xyXG4gICAgICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuY29uc3Qgdk1vZGVsU2VsZWN0ID0ge1xyXG4gICAgY3JlYXRlZChlbCwgeyBtb2RpZmllcnM6IHsgbnVtYmVyIH0gfSwgdm5vZGUpIHtcclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcclxuICAgICAgICAgICAgICAgIC5jYWxsKGVsLm9wdGlvbnMsIChvKSA9PiBvLnNlbGVjdGVkKVxyXG4gICAgICAgICAgICAgICAgLm1hcCgobykgPT4gbnVtYmVyID8gdG9OdW1iZXIoZ2V0VmFsdWUobykpIDogZ2V0VmFsdWUobykpO1xyXG4gICAgICAgICAgICBlbC5fYXNzaWduKGVsLm11bHRpcGxlID8gc2VsZWN0ZWRWYWwgOiBzZWxlY3RlZFZhbFswXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgfSxcclxuICAgIC8vIHNldCB2YWx1ZSBpbiBtb3VudGVkICYgdXBkYXRlZCBiZWNhdXNlIDxzZWxlY3Q+IHJlbGllcyBvbiBpdHMgY2hpbGRyZW5cclxuICAgIC8vIDxvcHRpb24+cy5cclxuICAgIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVXBkYXRlKGVsLCBfYmluZGluZywgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlZChlbCwgeyB2YWx1ZSB9KSB7XHJcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKSB7XHJcbiAgICBjb25zdCBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XHJcbiAgICBpZiAoaXNNdWx0aXBsZSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgIWlzU2V0KHZhbHVlKSkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB3YXJuKGA8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw+IGV4cGVjdHMgYW4gQXJyYXkgb3IgU2V0IHZhbHVlIGZvciBpdHMgYmluZGluZywgYCArXHJcbiAgICAgICAgICAgICAgICBgYnV0IGdvdCAke09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpfS5gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcclxuICAgICAgICBjb25zdCBvcHRpb25WYWx1ZSA9IGdldFZhbHVlKG9wdGlvbik7XHJcbiAgICAgICAgaWYgKGlzTXVsdGlwbGUpIHtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIG9wdGlvblZhbHVlKSA+IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdmFsdWUuaGFzKG9wdGlvblZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghaXNNdWx0aXBsZSkge1xyXG4gICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcclxuICAgIH1cclxufVxyXG4vLyByZXRyaWV2ZSByYXcgdmFsdWUgc2V0IHZpYSA6dmFsdWUgYmluZGluZ3NcclxuZnVuY3Rpb24gZ2V0VmFsdWUoZWwpIHtcclxuICAgIHJldHVybiAnX3ZhbHVlJyBpbiBlbCA/IGVsLl92YWx1ZSA6IGVsLnZhbHVlO1xyXG59XHJcbi8vIHJldHJpZXZlIHJhdyB2YWx1ZSBmb3IgdHJ1ZS12YWx1ZSBhbmQgZmFsc2UtdmFsdWUgc2V0IHZpYSA6dHJ1ZS12YWx1ZSBvciA6ZmFsc2UtdmFsdWUgYmluZGluZ3NcclxuZnVuY3Rpb24gZ2V0Q2hlY2tib3hWYWx1ZShlbCwgY2hlY2tlZCkge1xyXG4gICAgY29uc3Qga2V5ID0gY2hlY2tlZCA/ICdfdHJ1ZVZhbHVlJyA6ICdfZmFsc2VWYWx1ZSc7XHJcbiAgICByZXR1cm4ga2V5IGluIGVsID8gZWxba2V5XSA6IGNoZWNrZWQ7XHJcbn1cclxuY29uc3Qgdk1vZGVsRHluYW1pYyA9IHtcclxuICAgIGNyZWF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsICdjcmVhdGVkJyk7XHJcbiAgICB9LFxyXG4gICAgbW91bnRlZChlbCwgYmluZGluZywgdm5vZGUpIHtcclxuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgbnVsbCwgJ21vdW50ZWQnKTtcclxuICAgIH0sXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpIHtcclxuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCAnYmVmb3JlVXBkYXRlJyk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSkge1xyXG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsICd1cGRhdGVkJyk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsIGhvb2spIHtcclxuICAgIGxldCBtb2RlbFRvVXNlO1xyXG4gICAgc3dpdGNoIChlbC50YWdOYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnU0VMRUNUJzpcclxuICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbFNlbGVjdDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnVEVYVEFSRUEnOlxyXG4gICAgICAgICAgICBtb2RlbFRvVXNlID0gdk1vZGVsVGV4dDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgc3dpdGNoICh2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbENoZWNrYm94O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmFkaW8nOlxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxSYWRpbztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbFRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGZuID0gbW9kZWxUb1VzZVtob29rXTtcclxuICAgIGZuICYmIGZuKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKTtcclxufVxuXG5jb25zdCBzeXN0ZW1Nb2RpZmllcnMgPSBbJ2N0cmwnLCAnc2hpZnQnLCAnYWx0JywgJ21ldGEnXTtcclxuY29uc3QgbW9kaWZpZXJHdWFyZHMgPSB7XHJcbiAgICBzdG9wOiBlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCksXHJcbiAgICBwcmV2ZW50OiBlID0+IGUucHJldmVudERlZmF1bHQoKSxcclxuICAgIHNlbGY6IGUgPT4gZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCxcclxuICAgIGN0cmw6IGUgPT4gIWUuY3RybEtleSxcclxuICAgIHNoaWZ0OiBlID0+ICFlLnNoaWZ0S2V5LFxyXG4gICAgYWx0OiBlID0+ICFlLmFsdEtleSxcclxuICAgIG1ldGE6IGUgPT4gIWUubWV0YUtleSxcclxuICAgIGxlZnQ6IGUgPT4gJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMCxcclxuICAgIG1pZGRsZTogZSA9PiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uICE9PSAxLFxyXG4gICAgcmlnaHQ6IGUgPT4gJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMixcclxuICAgIGV4YWN0OiAoZSwgbW9kaWZpZXJzKSA9PiBzeXN0ZW1Nb2RpZmllcnMuc29tZShtID0+IGVbYCR7bX1LZXlgXSAmJiAhbW9kaWZpZXJzLmluY2x1ZGVzKG0pKVxyXG59O1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHdpdGhNb2RpZmllcnMgPSAoZm4sIG1vZGlmaWVycykgPT4ge1xyXG4gICAgcmV0dXJuIChldmVudCwgLi4uYXJncykgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kaWZpZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gbW9kaWZpZXJHdWFyZHNbbW9kaWZpZXJzW2ldXTtcclxuICAgICAgICAgICAgaWYgKGd1YXJkICYmIGd1YXJkKGV2ZW50LCBtb2RpZmllcnMpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZm4oZXZlbnQsIC4uLmFyZ3MpO1xyXG4gICAgfTtcclxufTtcclxuLy8gS2VwdCBmb3IgMi54IGNvbXBhdC5cclxuLy8gTm90ZTogSUUxMSBjb21wYXQgZm9yIGBzcGFjZWJhcmAgYW5kIGBkZWxgIGlzIHJlbW92ZWQgZm9yIG5vdy5cclxuY29uc3Qga2V5TmFtZXMgPSB7XHJcbiAgICBlc2M6ICdlc2NhcGUnLFxyXG4gICAgc3BhY2U6ICcgJyxcclxuICAgIHVwOiAnYXJyb3ctdXAnLFxyXG4gICAgbGVmdDogJ2Fycm93LWxlZnQnLFxyXG4gICAgcmlnaHQ6ICdhcnJvdy1yaWdodCcsXHJcbiAgICBkb3duOiAnYXJyb3ctZG93bicsXHJcbiAgICBkZWxldGU6ICdiYWNrc3BhY2UnXHJcbn07XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3Qgd2l0aEtleXMgPSAoZm4sIG1vZGlmaWVycykgPT4ge1xyXG4gICAgcmV0dXJuIChldmVudCkgPT4ge1xyXG4gICAgICAgIGlmICghKCdrZXknIGluIGV2ZW50KSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGV2ZW50S2V5ID0gaHlwaGVuYXRlKGV2ZW50LmtleSk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgIC8vIE5vbmUgb2YgdGhlIHByb3ZpZGVkIGtleSBtb2RpZmllcnMgbWF0Y2ggdGhlIGN1cnJlbnQgZXZlbnQga2V5XHJcbiAgICAgICAgIW1vZGlmaWVycy5zb21lKGsgPT4gayA9PT0gZXZlbnRLZXkgfHwga2V5TmFtZXNba10gPT09IGV2ZW50S2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmbihldmVudCk7XHJcbiAgICB9O1xyXG59O1xuXG5jb25zdCB2U2hvdyA9IHtcclxuICAgIGJlZm9yZU1vdW50KGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XHJcbiAgICAgICAgZWwuX3ZvZCA9IGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcclxuICAgICAgICBpZiAodHJhbnNpdGlvbiAmJiB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uICYmIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB1cGRhdGVkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xyXG4gICAgICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5sZWF2ZShlbCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlZm9yZVVubW91bnQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2V0RGlzcGxheShlbCwgdmFsdWUpIHtcclxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl92b2QgOiAnbm9uZSc7XHJcbn1cblxuY29uc3QgcmVuZGVyZXJPcHRpb25zID0gZXh0ZW5kKHsgcGF0Y2hQcm9wLCBmb3JjZVBhdGNoUHJvcCB9LCBub2RlT3BzKTtcclxuLy8gbGF6eSBjcmVhdGUgdGhlIHJlbmRlcmVyIC0gdGhpcyBtYWtlcyBjb3JlIHJlbmRlcmVyIGxvZ2ljIHRyZWUtc2hha2FibGVcclxuLy8gaW4gY2FzZSB0aGUgdXNlciBvbmx5IGltcG9ydHMgcmVhY3Rpdml0eSB1dGlsaXRpZXMgZnJvbSBWdWUuXHJcbmxldCByZW5kZXJlcjtcclxubGV0IGVuYWJsZWRIeWRyYXRpb24gPSBmYWxzZTtcclxuZnVuY3Rpb24gZW5zdXJlUmVuZGVyZXIoKSB7XHJcbiAgICByZXR1cm4gcmVuZGVyZXIgfHwgKHJlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKSk7XHJcbn1cclxuZnVuY3Rpb24gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKSB7XHJcbiAgICByZW5kZXJlciA9IGVuYWJsZWRIeWRyYXRpb25cclxuICAgICAgICA/IHJlbmRlcmVyXHJcbiAgICAgICAgOiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpO1xyXG4gICAgZW5hYmxlZEh5ZHJhdGlvbiA9IHRydWU7XHJcbiAgICByZXR1cm4gcmVuZGVyZXI7XHJcbn1cclxuLy8gdXNlIGV4cGxpY2l0IHR5cGUgY2FzdHMgaGVyZSB0byBhdm9pZCBpbXBvcnQoKSBjYWxscyBpbiByb2xsZWQtdXAgZC50c1xyXG5jb25zdCByZW5kZXIgPSAoKC4uLmFyZ3MpID0+IHtcclxuICAgIGVuc3VyZVJlbmRlcmVyKCkucmVuZGVyKC4uLmFyZ3MpO1xyXG59KTtcclxuY29uc3QgaHlkcmF0ZSA9ICgoLi4uYXJncykgPT4ge1xyXG4gICAgZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5oeWRyYXRlKC4uLmFyZ3MpO1xyXG59KTtcclxuY29uc3QgY3JlYXRlQXBwID0gKCguLi5hcmdzKSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBlbnN1cmVSZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBtb3VudCB9ID0gYXBwO1xyXG4gICAgYXBwLm1vdW50ID0gKGNvbnRhaW5lck9yU2VsZWN0b3IpID0+IHtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyT3JTZWxlY3Rvcik7XHJcbiAgICAgICAgaWYgKCFjb250YWluZXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBhcHAuX2NvbXBvbmVudDtcclxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oY29tcG9uZW50KSAmJiAhY29tcG9uZW50LnJlbmRlciAmJiAhY29tcG9uZW50LnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudC50ZW1wbGF0ZSA9IGNvbnRhaW5lci5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNsZWFyIGNvbnRlbnQgYmVmb3JlIG1vdW50aW5nXHJcbiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGNvbnN0IHByb3h5ID0gbW91bnQoY29udGFpbmVyKTtcclxuICAgICAgICBjb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCd2LWNsb2FrJyk7XHJcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS12LWFwcCcsICcnKTtcclxuICAgICAgICByZXR1cm4gcHJveHk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFwcDtcclxufSk7XHJcbmNvbnN0IGNyZWF0ZVNTUkFwcCA9ICgoLi4uYXJncykgPT4ge1xyXG4gICAgY29uc3QgYXBwID0gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5jcmVhdGVBcHAoLi4uYXJncyk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgaW5qZWN0TmF0aXZlVGFnQ2hlY2soYXBwKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcclxuICAgIGFwcC5tb3VudCA9IChjb250YWluZXJPclNlbGVjdG9yKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xyXG4gICAgICAgIGlmIChjb250YWluZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vdW50KGNvbnRhaW5lciwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBhcHA7XHJcbn0pO1xyXG5mdW5jdGlvbiBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApIHtcclxuICAgIC8vIEluamVjdCBgaXNOYXRpdmVUYWdgXHJcbiAgICAvLyB0aGlzIGlzIHVzZWQgZm9yIGNvbXBvbmVudCBuYW1lIHZhbGlkYXRpb24gKGRldiBvbmx5KVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdpc05hdGl2ZVRhZycsIHtcclxuICAgICAgICB2YWx1ZTogKHRhZykgPT4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkdUYWcodGFnKSxcclxuICAgICAgICB3cml0YWJsZTogZmFsc2VcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXIpIHtcclxuICAgIGlmIChpc1N0cmluZyhjb250YWluZXIpKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXJlcykge1xyXG4gICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gbW91bnQgYXBwOiBtb3VudCB0YXJnZXQgc2VsZWN0b3IgcmV0dXJuZWQgbnVsbC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHJldHVybiBjb250YWluZXI7XHJcbn1cblxuZXhwb3J0IHsgVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwLCBjcmVhdGVBcHAsIGNyZWF0ZVNTUkFwcCwgaHlkcmF0ZSwgcmVuZGVyLCB1c2VDc3NNb2R1bGUsIHVzZUNzc1ZhcnMsIHZNb2RlbENoZWNrYm94LCB2TW9kZWxEeW5hbWljLCB2TW9kZWxSYWRpbywgdk1vZGVsU2VsZWN0LCB2TW9kZWxUZXh0LCB2U2hvdywgd2l0aEtleXMsIHdpdGhNb2RpZmllcnMgfTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIi8vIFJlZ2lzdGVyIGEgc2VydmljZSB3b3JrZXIgdG8gc2VydmUgYXNzZXRzIGZyb20gbG9jYWwgY2FjaGUuXG5cbi8vIFRoaXMgbGV0cyB0aGUgYXBwIGxvYWQgZmFzdGVyIG9uIHN1YnNlcXVlbnQgdmlzaXRzIGluIHByb2R1Y3Rpb24sIGFuZCBnaXZlc1xuLy8gaXQgb2ZmbGluZSBjYXBhYmlsaXRpZXMuIEhvd2V2ZXIsIGl0IGFsc28gbWVhbnMgdGhhdCBkZXZlbG9wZXJzIChhbmQgdXNlcnMpXG4vLyB3aWxsIG9ubHkgc2VlIGRlcGxveWVkIHVwZGF0ZXMgb24gdGhlIFwiTisxXCIgdmlzaXQgdG8gYSBwYWdlLCBzaW5jZSBwcmV2aW91c2x5XG4vLyBjYWNoZWQgcmVzb3VyY2VzIGFyZSB1cGRhdGVkIGluIHRoZSBiYWNrZ3JvdW5kLlxuXG52YXIgaXNMb2NhbGhvc3QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBCb29sZWFuKFxuICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnIHx8XG4gICAgLy8gWzo6MV0gaXMgdGhlIElQdjYgbG9jYWxob3N0IGFkZHJlc3MuXG4gICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnWzo6MV0nIHx8XG4gICAgLy8gMTI3LjAuMC4xLzggaXMgY29uc2lkZXJlZCBsb2NhbGhvc3QgZm9yIElQdjQuXG4gICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLm1hdGNoKFxuICAgICAgL14xMjcoPzpcXC4oPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pKXszfSQvXG4gICAgKVxuKTsgfVxuXG52YXIgd2FpdFdpbmRvd0xvYWRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS95eXg5OTA4MDMvcmVnaXN0ZXItc2VydmljZS13b3JrZXIvcHVsbC8zMyNkaXNjdXNzaW9uX3IzOTQxODE4NjFcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAvLyBUeXBpY2FsbHksIGEgYnJvd3NlciB0aGF0IHN1cHBvcnRzIGBzZXJ2aWNlV29ya2VyYCBzaG91bGQgYWxzbyBoYXZlIHN1cHBvcnRlZFxuICAvLyBgUHJvbWlzZWAuIEJ1dCBhcyB0aGlzIHBhY2thZ2UgY2FuIGJlIHVzZWQgaW4gZW52aXJvbm1lbnRzIHdpdGhvdXQgc2VydmljZVxuICAvLyB3b3JrZXIgc3VwcG9ydCAoaW4gdGhhdCBjYXNlIGl0IHdvdWxkIGRvIG5vdGhpbmcpLCB0aGVyZSdzIGEgY2hhbmNlIHRoYXRcbiAgLy8gYFByb21pc2VgIGRvZXMgbm90IGV4aXN0LiBTbyB3ZSBtdXN0IGNoZWNrIGZvciBpdHMgZXhpc3RlbmNlIGZpcnN0LlxuICBpZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2FpdFdpbmRvd0xvYWQgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCByZXNvbHZlKTsgfSlcbiAgfSBlbHNlIHtcbiAgICB3YWl0V2luZG93TG9hZCA9IHsgdGhlbjogZnVuY3Rpb24gKGNiKSB7IHJldHVybiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGNiKTsgfSB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyIChzd1VybCwgaG9va3MpIHtcbiAgaWYgKCBob29rcyA9PT0gdm9pZCAwICkgaG9va3MgPSB7fTtcblxuICB2YXIgcmVnaXN0cmF0aW9uT3B0aW9ucyA9IGhvb2tzLnJlZ2lzdHJhdGlvbk9wdGlvbnM7IGlmICggcmVnaXN0cmF0aW9uT3B0aW9ucyA9PT0gdm9pZCAwICkgcmVnaXN0cmF0aW9uT3B0aW9ucyA9IHt9O1xuICBkZWxldGUgaG9va3MucmVnaXN0cmF0aW9uT3B0aW9uc1xuXG4gIHZhciBlbWl0ID0gZnVuY3Rpb24gKGhvb2spIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgICBpZiAoaG9va3MgJiYgaG9va3NbaG9va10pIHtcbiAgICAgIGhvb2tzW2hvb2tdLmFwcGx5KGhvb2tzLCBhcmdzKVxuICAgIH1cbiAgfVxuXG4gIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gICAgd2FpdFdpbmRvd0xvYWQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNMb2NhbGhvc3QoKSkge1xuICAgICAgICAvLyBUaGlzIGlzIHJ1bm5pbmcgb24gbG9jYWxob3N0LiBMZXRzIGNoZWNrIGlmIGEgc2VydmljZSB3b3JrZXIgc3RpbGwgZXhpc3RzIG9yIG5vdC5cbiAgICAgICAgY2hlY2tWYWxpZFNlcnZpY2VXb3JrZXIoc3dVcmwsIGVtaXQsIHJlZ2lzdHJhdGlvbk9wdGlvbnMpXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4oZnVuY3Rpb24gKHJlZ2lzdHJhdGlvbikge1xuICAgICAgICAgIGVtaXQoJ3JlYWR5JywgcmVnaXN0cmF0aW9uKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSXMgbm90IGxvY2FsIGhvc3QuIEp1c3QgcmVnaXN0ZXIgc2VydmljZSB3b3JrZXJcbiAgICAgICAgcmVnaXN0ZXJWYWxpZFNXKHN3VXJsLCBlbWl0LCByZWdpc3RyYXRpb25PcHRpb25zKVxuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICBlbWl0KCdyZWFkeScsIHJlZ2lzdHJhdGlvbilcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlbWl0LCBlcnJvcikge1xuICBpZiAoIW5hdmlnYXRvci5vbkxpbmUpIHtcbiAgICBlbWl0KCdvZmZsaW5lJylcbiAgfVxuICBlbWl0KCdlcnJvcicsIGVycm9yKVxufVxuXG5mdW5jdGlvbiByZWdpc3RlclZhbGlkU1cgKHN3VXJsLCBlbWl0LCByZWdpc3RyYXRpb25PcHRpb25zKSB7XG4gIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyXG4gICAgLnJlZ2lzdGVyKHN3VXJsLCByZWdpc3RyYXRpb25PcHRpb25zKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHtcbiAgICAgIGVtaXQoJ3JlZ2lzdGVyZWQnLCByZWdpc3RyYXRpb24pXG4gICAgICBpZiAocmVnaXN0cmF0aW9uLndhaXRpbmcpIHtcbiAgICAgICAgZW1pdCgndXBkYXRlZCcsIHJlZ2lzdHJhdGlvbilcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICByZWdpc3RyYXRpb24ub251cGRhdGVmb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZW1pdCgndXBkYXRlZm91bmQnLCByZWdpc3RyYXRpb24pXG4gICAgICAgIHZhciBpbnN0YWxsaW5nV29ya2VyID0gcmVnaXN0cmF0aW9uLmluc3RhbGxpbmdcbiAgICAgICAgaW5zdGFsbGluZ1dvcmtlci5vbnN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChpbnN0YWxsaW5nV29ya2VyLnN0YXRlID09PSAnaW5zdGFsbGVkJykge1xuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIG9sZCBjb250ZW50IHdpbGwgaGF2ZSBiZWVuIHB1cmdlZCBhbmRcbiAgICAgICAgICAgICAgLy8gdGhlIGZyZXNoIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAgICAvLyBJdCdzIHRoZSBwZXJmZWN0IHRpbWUgdG8gZGlzcGxheSBhIFwiTmV3IGNvbnRlbnQgaXNcbiAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlOyBwbGVhc2UgcmVmcmVzaC5cIiBtZXNzYWdlIGluIHlvdXIgd2ViIGFwcC5cbiAgICAgICAgICAgICAgZW1pdCgndXBkYXRlZCcsIHJlZ2lzdHJhdGlvbilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIGV2ZXJ5dGhpbmcgaGFzIGJlZW4gcHJlY2FjaGVkLlxuICAgICAgICAgICAgICAvLyBJdCdzIHRoZSBwZXJmZWN0IHRpbWUgdG8gZGlzcGxheSBhXG4gICAgICAgICAgICAgIC8vIFwiQ29udGVudCBpcyBjYWNoZWQgZm9yIG9mZmxpbmUgdXNlLlwiIG1lc3NhZ2UuXG4gICAgICAgICAgICAgIGVtaXQoJ2NhY2hlZCcsIHJlZ2lzdHJhdGlvbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGVtaXQsIGVycm9yKTsgfSlcbn1cblxuZnVuY3Rpb24gY2hlY2tWYWxpZFNlcnZpY2VXb3JrZXIgKHN3VXJsLCBlbWl0LCByZWdpc3RyYXRpb25PcHRpb25zKSB7XG4gIC8vIENoZWNrIGlmIHRoZSBzZXJ2aWNlIHdvcmtlciBjYW4gYmUgZm91bmQuXG4gIGZldGNoKHN3VXJsKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgLy8gRW5zdXJlIHNlcnZpY2Ugd29ya2VyIGV4aXN0cywgYW5kIHRoYXQgd2UgcmVhbGx5IGFyZSBnZXR0aW5nIGEgSlMgZmlsZS5cbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAvLyBObyBzZXJ2aWNlIHdvcmtlciBmb3VuZC5cbiAgICAgICAgZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoKFwiU2VydmljZSB3b3JrZXIgbm90IGZvdW5kIGF0IFwiICsgc3dVcmwpKSlcbiAgICAgICAgdW5yZWdpc3RlcigpXG4gICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKS5pbmRleE9mKCdqYXZhc2NyaXB0JykgPT09IC0xKSB7XG4gICAgICAgIGVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKFxuICAgICAgICAgIFwiRXhwZWN0ZWQgXCIgKyBzd1VybCArIFwiIHRvIGhhdmUgamF2YXNjcmlwdCBjb250ZW50LXR5cGUsIFwiICtcbiAgICAgICAgICBcImJ1dCByZWNlaXZlZCBcIiArIChyZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpKSlcbiAgICAgICAgdW5yZWdpc3RlcigpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXJ2aWNlIHdvcmtlciBmb3VuZC4gUHJvY2VlZCBhcyBub3JtYWwuXG4gICAgICAgIHJlZ2lzdGVyVmFsaWRTVyhzd1VybCwgZW1pdCwgcmVnaXN0cmF0aW9uT3B0aW9ucylcbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGVtaXQsIGVycm9yKTsgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXIgKCkge1xuICBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4oZnVuY3Rpb24gKHJlZ2lzdHJhdGlvbikge1xuICAgICAgcmVnaXN0cmF0aW9uLnVucmVnaXN0ZXIoKVxuICAgIH0pXG4gIH1cbn1cbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlRGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsIi8qKlxyXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcclxuICogaXMgaW4gdGhhdCBtYXAuXHJcbiAqIElNUE9SVEFOVDogYWxsIGNhbGxzIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBwcmVmaXhlZCB3aXRoXHJcbiAqIFxcL1xcKiNcXF9cXF9QVVJFXFxfXFxfXFwqXFwvXHJcbiAqIFNvIHRoYXQgcm9sbHVwIGNhbiB0cmVlLXNoYWtlIHRoZW0gaWYgbmVjZXNzYXJ5LlxyXG4gKi9cclxuZnVuY3Rpb24gbWFrZU1hcChzdHIsIGV4cGVjdHNMb3dlckNhc2UpIHtcclxuICAgIGNvbnN0IG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICBjb25zdCBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2UgPyB2YWwgPT4gISFtYXBbdmFsLnRvTG93ZXJDYXNlKCldIDogdmFsID0+ICEhbWFwW3ZhbF07XHJcbn1cblxuLy8gUGF0Y2ggZmxhZ3MgYXJlIG9wdGltaXphdGlvbiBoaW50cyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyLlxyXG4vLyB3aGVuIGEgYmxvY2sgd2l0aCBkeW5hbWljQ2hpbGRyZW4gaXMgZW5jb3VudGVyZWQgZHVyaW5nIGRpZmYsIHRoZSBhbGdvcml0aG1cclxuLy8gZW50ZXJzIFwib3B0aW1pemVkIG1vZGVcIi4gSW4gdGhpcyBtb2RlLCB3ZSBrbm93IHRoYXQgdGhlIHZkb20gaXMgcHJvZHVjZWQgYnlcclxuLy8gYSByZW5kZXIgZnVuY3Rpb24gZ2VuZXJhdGVkIGJ5IHRoZSBjb21waWxlciwgc28gdGhlIGFsZ29yaXRobSBvbmx5IG5lZWRzIHRvXHJcbi8vIGhhbmRsZSB1cGRhdGVzIGV4cGxpY2l0bHkgbWFya2VkIGJ5IHRoZXNlIHBhdGNoIGZsYWdzLlxyXG4vLyBkZXYgb25seSBmbGFnIC0+IG5hbWUgbWFwcGluZ1xyXG5jb25zdCBQYXRjaEZsYWdOYW1lcyA9IHtcclxuICAgIFsxIC8qIFRFWFQgKi9dOiBgVEVYVGAsXHJcbiAgICBbMiAvKiBDTEFTUyAqL106IGBDTEFTU2AsXHJcbiAgICBbNCAvKiBTVFlMRSAqL106IGBTVFlMRWAsXHJcbiAgICBbOCAvKiBQUk9QUyAqL106IGBQUk9QU2AsXHJcbiAgICBbMTYgLyogRlVMTF9QUk9QUyAqL106IGBGVUxMX1BST1BTYCxcclxuICAgIFszMiAvKiBIWURSQVRFX0VWRU5UUyAqL106IGBIWURSQVRFX0VWRU5UU2AsXHJcbiAgICBbNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovXTogYFNUQUJMRV9GUkFHTUVOVGAsXHJcbiAgICBbMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovXTogYEtFWUVEX0ZSQUdNRU5UYCxcclxuICAgIFsyNTYgLyogVU5LRVlFRF9GUkFHTUVOVCAqL106IGBVTktFWUVEX0ZSQUdNRU5UYCxcclxuICAgIFsxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi9dOiBgRFlOQU1JQ19TTE9UU2AsXHJcbiAgICBbNTEyIC8qIE5FRURfUEFUQ0ggKi9dOiBgTkVFRF9QQVRDSGAsXHJcbiAgICBbLTEgLyogSE9JU1RFRCAqL106IGBIT0lTVEVEYCxcclxuICAgIFstMiAvKiBCQUlMICovXTogYEJBSUxgXHJcbn07XG5cbmNvbnN0IEdMT0JBTFNfV0hJVEVfTElTVEVEID0gJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4scGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksJyArXHJcbiAgICAnZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSwnICtcclxuICAgICdPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsJztcclxuY29uc3QgaXNHbG9iYWxseVdoaXRlbGlzdGVkID0gLyojX19QVVJFX18qLyBtYWtlTWFwKEdMT0JBTFNfV0hJVEVfTElTVEVEKTtcblxuY29uc3QgcmFuZ2UgPSAyO1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZShzb3VyY2UsIHN0YXJ0ID0gMCwgZW5kID0gc291cmNlLmxlbmd0aCkge1xyXG4gICAgY29uc3QgbGluZXMgPSBzb3VyY2Uuc3BsaXQoL1xccj9cXG4vKTtcclxuICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb3VudCArPSBsaW5lc1tpXS5sZW5ndGggKyAxO1xyXG4gICAgICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaSAtIHJhbmdlOyBqIDw9IGkgKyByYW5nZSB8fCBlbmQgPiBjb3VudDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gaiArIDE7XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaChgJHtsaW5lfSR7JyAnLnJlcGVhdChNYXRoLm1heCgzIC0gU3RyaW5nKGxpbmUpLmxlbmd0aCwgMCkpfXwgICR7bGluZXNbal19YCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGogPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwdXNoIHVuZGVybGluZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gbGluZUxlbmd0aCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KDEsIGVuZCA+IGNvdW50ID8gbGluZUxlbmd0aCAtIHBhZCA6IGVuZCAtIHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArICcgJy5yZXBlYXQocGFkKSArICdeJy5yZXBlYXQobGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChqID4gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChNYXRoLm1pbihlbmQgLSBjb3VudCwgbGluZUxlbmd0aCksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArICdeJy5yZXBlYXQobGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IGxpbmVMZW5ndGggKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXMuam9pbignXFxuJyk7XHJcbn1cblxuLyoqXHJcbiAqIE9uIHRoZSBjbGllbnQgd2Ugb25seSBuZWVkIHRvIG9mZmVyIHNwZWNpYWwgY2FzZXMgZm9yIGJvb2xlYW4gYXR0cmlidXRlcyB0aGF0XHJcbiAqIGhhdmUgZGlmZmVyZW50IG5hbWVzIGZyb20gdGhlaXIgY29ycmVzcG9uZGluZyBkb20gcHJvcGVydGllczpcclxuICogLSBpdGVtc2NvcGUgLT4gTi9BXHJcbiAqIC0gYWxsb3dmdWxsc2NyZWVuIC0+IGFsbG93RnVsbHNjcmVlblxyXG4gKiAtIGZvcm1ub3ZhbGlkYXRlIC0+IGZvcm1Ob1ZhbGlkYXRlXHJcbiAqIC0gaXNtYXAgLT4gaXNNYXBcclxuICogLSBub21vZHVsZSAtPiBub01vZHVsZVxyXG4gKiAtIG5vdmFsaWRhdGUgLT4gbm9WYWxpZGF0ZVxyXG4gKiAtIHJlYWRvbmx5IC0+IHJlYWRPbmx5XHJcbiAqL1xyXG5jb25zdCBzcGVjaWFsQm9vbGVhbkF0dHJzID0gYGl0ZW1zY29wZSxhbGxvd2Z1bGxzY3JlZW4sZm9ybW5vdmFsaWRhdGUsaXNtYXAsbm9tb2R1bGUsbm92YWxpZGF0ZSxyZWFkb25seWA7XHJcbmNvbnN0IGlzU3BlY2lhbEJvb2xlYW5BdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKHNwZWNpYWxCb29sZWFuQXR0cnMpO1xyXG4vKipcclxuICogVGhlIGZ1bGwgbGlzdCBpcyBuZWVkZWQgZHVyaW5nIFNTUiB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGluaXRpYWwgbWFya3VwLlxyXG4gKi9cclxuY29uc3QgaXNCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzICtcclxuICAgIGAsYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNvbnRyb2xzLGRlZmF1bHQsZGVmZXIsZGlzYWJsZWQsaGlkZGVuLGAgK1xyXG4gICAgYGxvb3Asb3BlbixyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3MsYCArXHJcbiAgICBgY2hlY2tlZCxtdXRlZCxtdWx0aXBsZSxzZWxlY3RlZGApO1xyXG5jb25zdCB1bnNhZmVBdHRyQ2hhclJFID0gL1s+Lz1cIidcXHUwMDA5XFx1MDAwYVxcdTAwMGNcXHUwMDIwXS87XHJcbmNvbnN0IGF0dHJWYWxpZGF0aW9uQ2FjaGUgPSB7fTtcclxuZnVuY3Rpb24gaXNTU1JTYWZlQXR0ck5hbWUobmFtZSkge1xyXG4gICAgaWYgKGF0dHJWYWxpZGF0aW9uQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXTtcclxuICAgIH1cclxuICAgIGNvbnN0IGlzVW5zYWZlID0gdW5zYWZlQXR0ckNoYXJSRS50ZXN0KG5hbWUpO1xyXG4gICAgaWYgKGlzVW5zYWZlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgdW5zYWZlIGF0dHJpYnV0ZSBuYW1lOiAke25hbWV9YCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGF0dHJWYWxpZGF0aW9uQ2FjaGVbbmFtZV0gPSAhaXNVbnNhZmUpO1xyXG59XHJcbmNvbnN0IHByb3BzVG9BdHRyTWFwID0ge1xyXG4gICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcclxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcclxuICAgIGh0bWxGb3I6ICdmb3InLFxyXG4gICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcclxufTtcclxuLyoqXHJcbiAqIENTUyBwcm9wZXJ0aWVzIHRoYXQgYWNjZXB0IHBsYWluIG51bWJlcnNcclxuICovXHJcbmNvbnN0IGlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCxib3JkZXItaW1hZ2Utb3V0c2V0LGJvcmRlci1pbWFnZS1zbGljZSxgICtcclxuICAgIGBib3JkZXItaW1hZ2Utd2lkdGgsYm94LWZsZXgsYm94LWZsZXgtZ3JvdXAsYm94LW9yZGluYWwtZ3JvdXAsY29sdW1uLWNvdW50LGAgK1xyXG4gICAgYGNvbHVtbnMsZmxleCxmbGV4LWdyb3csZmxleC1wb3NpdGl2ZSxmbGV4LXNocmluayxmbGV4LW5lZ2F0aXZlLGZsZXgtb3JkZXIsYCArXHJcbiAgICBgZ3JpZC1yb3csZ3JpZC1yb3ctZW5kLGdyaWQtcm93LXNwYW4sZ3JpZC1yb3ctc3RhcnQsZ3JpZC1jb2x1bW4sYCArXHJcbiAgICBgZ3JpZC1jb2x1bW4tZW5kLGdyaWQtY29sdW1uLXNwYW4sZ3JpZC1jb2x1bW4tc3RhcnQsZm9udC13ZWlnaHQsbGluZS1jbGFtcCxgICtcclxuICAgIGBsaW5lLWhlaWdodCxvcGFjaXR5LG9yZGVyLG9ycGhhbnMsdGFiLXNpemUsd2lkb3dzLHotaW5kZXgsem9vbSxgICtcclxuICAgIC8vIFNWR1xyXG4gICAgYGZpbGwtb3BhY2l0eSxmbG9vZC1vcGFjaXR5LHN0b3Atb3BhY2l0eSxzdHJva2UtZGFzaGFycmF5LHN0cm9rZS1kYXNob2Zmc2V0LGAgK1xyXG4gICAgYHN0cm9rZS1taXRlcmxpbWl0LHN0cm9rZS1vcGFjaXR5LHN0cm9rZS13aWR0aGApO1xyXG4vKipcclxuICogS25vd24gYXR0cmlidXRlcywgdGhpcyBpcyB1c2VkIGZvciBzdHJpbmdpZmljYXRpb24gb2YgcnVudGltZSBzdGF0aWMgbm9kZXNcclxuICogc28gdGhhdCB3ZSBkb24ndCBzdHJpbmdpZnkgYmluZGluZ3MgdGhhdCBjYW5ub3QgYmUgc2V0IGZyb20gSFRNTC5cclxuICogRG9uJ3QgYWxzbyBmb3JnZXQgdG8gYWxsb3cgYGRhdGEtKmAgYW5kIGBhcmlhLSpgIVxyXG4gKiBHZW5lcmF0ZWQgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0F0dHJpYnV0ZXNcclxuICovXHJcbmNvbnN0IGlzS25vd25BdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGBhY2NlcHQsYWNjZXB0LWNoYXJzZXQsYWNjZXNza2V5LGFjdGlvbixhbGlnbixhbGxvdyxhbHQsYXN5bmMsYCArXHJcbiAgICBgYXV0b2NhcGl0YWxpemUsYXV0b2NvbXBsZXRlLGF1dG9mb2N1cyxhdXRvcGxheSxiYWNrZ3JvdW5kLGJnY29sb3IsYCArXHJcbiAgICBgYm9yZGVyLGJ1ZmZlcmVkLGNhcHR1cmUsY2hhbGxlbmdlLGNoYXJzZXQsY2hlY2tlZCxjaXRlLGNsYXNzLGNvZGUsYCArXHJcbiAgICBgY29kZWJhc2UsY29sb3IsY29scyxjb2xzcGFuLGNvbnRlbnQsY29udGVudGVkaXRhYmxlLGNvbnRleHRtZW51LGNvbnRyb2xzLGAgK1xyXG4gICAgYGNvb3Jkcyxjcm9zc29yaWdpbixjc3AsZGF0YSxkYXRldGltZSxkZWNvZGluZyxkZWZhdWx0LGRlZmVyLGRpcixkaXJuYW1lLGAgK1xyXG4gICAgYGRpc2FibGVkLGRvd25sb2FkLGRyYWdnYWJsZSxkcm9wem9uZSxlbmN0eXBlLGVudGVya2V5aGludCxmb3IsZm9ybSxgICtcclxuICAgIGBmb3JtYWN0aW9uLGZvcm1lbmN0eXBlLGZvcm1tZXRob2QsZm9ybW5vdmFsaWRhdGUsZm9ybXRhcmdldCxoZWFkZXJzLGAgK1xyXG4gICAgYGhlaWdodCxoaWRkZW4saGlnaCxocmVmLGhyZWZsYW5nLGh0dHAtZXF1aXYsaWNvbixpZCxpbXBvcnRhbmNlLGludGVncml0eSxgICtcclxuICAgIGBpc21hcCxpdGVtcHJvcCxrZXl0eXBlLGtpbmQsbGFiZWwsbGFuZyxsYW5ndWFnZSxsb2FkaW5nLGxpc3QsbG9vcCxsb3csYCArXHJcbiAgICBgbWFuaWZlc3QsbWF4LG1heGxlbmd0aCxtaW5sZW5ndGgsbWVkaWEsbWluLG11bHRpcGxlLG11dGVkLG5hbWUsbm92YWxpZGF0ZSxgICtcclxuICAgIGBvcGVuLG9wdGltdW0scGF0dGVybixwaW5nLHBsYWNlaG9sZGVyLHBvc3RlcixwcmVsb2FkLHJhZGlvZ3JvdXAscmVhZG9ubHksYCArXHJcbiAgICBgcmVmZXJyZXJwb2xpY3kscmVsLHJlcXVpcmVkLHJldmVyc2VkLHJvd3Mscm93c3BhbixzYW5kYm94LHNjb3BlLHNjb3BlZCxgICtcclxuICAgIGBzZWxlY3RlZCxzaGFwZSxzaXplLHNpemVzLHNsb3Qsc3BhbixzcGVsbGNoZWNrLHNyYyxzcmNkb2Msc3JjbGFuZyxzcmNzZXQsYCArXHJcbiAgICBgc3RhcnQsc3RlcCxzdHlsZSxzdW1tYXJ5LHRhYmluZGV4LHRhcmdldCx0aXRsZSx0cmFuc2xhdGUsdHlwZSx1c2VtYXAsYCArXHJcbiAgICBgdmFsdWUsd2lkdGgsd3JhcGApO1xuXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZSh2YWx1ZSkge1xyXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdmFsdWVbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTdHlsZShpc1N0cmluZyhpdGVtKSA/IHBhcnNlU3RyaW5nU3R5bGUoaXRlbSkgOiBpdGVtKTtcclxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5vcm1hbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNba2V5XSA9IG5vcm1hbGl6ZWRba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGxpc3REZWxpbWl0ZXJSRSA9IC87KD8hW14oXSpcXCkpL2c7XHJcbmNvbnN0IHByb3BlcnR5RGVsaW1pdGVyUkUgPSAvOiguKykvO1xyXG5mdW5jdGlvbiBwYXJzZVN0cmluZ1N0eWxlKGNzc1RleHQpIHtcclxuICAgIGNvbnN0IHJldCA9IHt9O1xyXG4gICAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyUkUpLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgY29uc3QgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlclJFKTtcclxuICAgICAgICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJldFt0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5mdW5jdGlvbiBzdHJpbmdpZnlTdHlsZShzdHlsZXMpIHtcclxuICAgIGxldCByZXQgPSAnJztcclxuICAgIGlmICghc3R5bGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW2tleV07XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGtleS5zdGFydHNXaXRoKGAtLWApID8ga2V5IDogaHlwaGVuYXRlKGtleSk7XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05vVW5pdE51bWVyaWNTdHlsZVByb3Aobm9ybWFsaXplZEtleSkpKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgcmVuZGVyIHZhbGlkIHZhbHVlc1xyXG4gICAgICAgICAgICByZXQgKz0gYCR7bm9ybWFsaXplZEtleX06JHt2YWx1ZX07YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzKHZhbHVlKSB7XHJcbiAgICBsZXQgcmVzID0gJyc7XHJcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgcmVzID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzICs9IG5vcm1hbGl6ZUNsYXNzKHZhbHVlW2ldKSArICcgJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgKz0gbmFtZSArICcgJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXMudHJpbSgpO1xyXG59XG5cbi8vIFRoZXNlIHRhZyBjb25maWdzIGFyZSBzaGFyZWQgYmV0d2VlbiBjb21waWxlci1kb20gYW5kIHJ1bnRpbWUtZG9tLCBzbyB0aGV5XHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudFxyXG5jb25zdCBIVE1MX1RBR1MgPSAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlciwnICtcclxuICAgICdoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLGRpdixkZCxkbCxkdCxmaWdjYXB0aW9uLCcgK1xyXG4gICAgJ2ZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLGEsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLCcgK1xyXG4gICAgJ2RhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSxzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCwnICtcclxuICAgICd0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbyxlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLCcgK1xyXG4gICAgJ2NhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucyxjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCwnICtcclxuICAgICd0aCx0cixidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsJyArXHJcbiAgICAnb3B0aW9uLG91dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsZGV0YWlscyxkaWFsb2csbWVudSwnICtcclxuICAgICdzdW1tYXJ5LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290JztcclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0VsZW1lbnRcclxuY29uc3QgU1ZHX1RBR1MgPSAnc3ZnLGFuaW1hdGUsYW5pbWF0ZU1vdGlvbixhbmltYXRlVHJhbnNmb3JtLGNpcmNsZSxjbGlwUGF0aCxjb2xvci1wcm9maWxlLCcgK1xyXG4gICAgJ2RlZnMsZGVzYyxkaXNjYXJkLGVsbGlwc2UsZmVCbGVuZCxmZUNvbG9yTWF0cml4LGZlQ29tcG9uZW50VHJhbnNmZXIsJyArXHJcbiAgICAnZmVDb21wb3NpdGUsZmVDb252b2x2ZU1hdHJpeCxmZURpZmZ1c2VMaWdodGluZyxmZURpc3BsYWNlbWVudE1hcCwnICtcclxuICAgICdmZURpc3RhbmNlTGlnaHQsZmVEcm9wU2hhZG93LGZlRmxvb2QsZmVGdW5jQSxmZUZ1bmNCLGZlRnVuY0csZmVGdW5jUiwnICtcclxuICAgICdmZUdhdXNzaWFuQmx1cixmZUltYWdlLGZlTWVyZ2UsZmVNZXJnZU5vZGUsZmVNb3JwaG9sb2d5LGZlT2Zmc2V0LCcgK1xyXG4gICAgJ2ZlUG9pbnRMaWdodCxmZVNwZWN1bGFyTGlnaHRpbmcsZmVTcG90TGlnaHQsZmVUaWxlLGZlVHVyYnVsZW5jZSxmaWx0ZXIsJyArXHJcbiAgICAnZm9yZWlnbk9iamVjdCxnLGhhdGNoLGhhdGNocGF0aCxpbWFnZSxsaW5lLGxpbmVhckdyYWRpZW50LG1hcmtlcixtYXNrLCcgK1xyXG4gICAgJ21lc2gsbWVzaGdyYWRpZW50LG1lc2hwYXRjaCxtZXNocm93LG1ldGFkYXRhLG1wYXRoLHBhdGgscGF0dGVybiwnICtcclxuICAgICdwb2x5Z29uLHBvbHlsaW5lLHJhZGlhbEdyYWRpZW50LHJlY3Qsc2V0LHNvbGlkY29sb3Isc3RvcCxzd2l0Y2gsc3ltYm9sLCcgK1xyXG4gICAgJ3RleHQsdGV4dFBhdGgsdGl0bGUsdHNwYW4sdW5rbm93bix1c2Usdmlldyc7XHJcbmNvbnN0IFZPSURfVEFHUyA9ICdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGhyLGltZyxpbnB1dCxsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicic7XHJcbmNvbnN0IGlzSFRNTFRhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChIVE1MX1RBR1MpO1xyXG5jb25zdCBpc1NWR1RhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChTVkdfVEFHUyk7XHJcbmNvbnN0IGlzVm9pZFRhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChWT0lEX1RBR1MpO1xuXG5jb25zdCBlc2NhcGVSRSA9IC9bXCInJjw+XS87XHJcbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzdHIgPSAnJyArIHN0cmluZztcclxuICAgIGNvbnN0IG1hdGNoID0gZXNjYXBlUkUuZXhlYyhzdHIpO1xyXG4gICAgaWYgKCFtYXRjaCkge1xyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9XHJcbiAgICBsZXQgaHRtbCA9ICcnO1xyXG4gICAgbGV0IGVzY2FwZWQ7XHJcbiAgICBsZXQgaW5kZXg7XHJcbiAgICBsZXQgbGFzdEluZGV4ID0gMDtcclxuICAgIGZvciAoaW5kZXggPSBtYXRjaC5pbmRleDsgaW5kZXggPCBzdHIubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpbmRleCkpIHtcclxuICAgICAgICAgICAgY2FzZSAzNDogLy8gXCJcclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJnF1b3Q7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM4OiAvLyAmXHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZhbXA7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM5OiAvLyAnXHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyYjMzk7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDYwOiAvLyA8XHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZsdDsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNjI6IC8vID5cclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJmd0Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xyXG4gICAgICAgICAgICBodG1sICs9IHN0ci5zdWJzdHJpbmcobGFzdEluZGV4LCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcclxuICAgICAgICBodG1sICs9IGVzY2FwZWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGFzdEluZGV4ICE9PSBpbmRleCA/IGh0bWwgKyBzdHIuc3Vic3RyaW5nKGxhc3RJbmRleCwgaW5kZXgpIDogaHRtbDtcclxufVxyXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUyL3N5bnRheC5odG1sI2NvbW1lbnRzXHJcbmNvbnN0IGNvbW1lbnRTdHJpcFJFID0gL14tPz58PCEtLXwtLT58LS0hPnw8IS0kL2c7XHJcbmZ1bmN0aW9uIGVzY2FwZUh0bWxDb21tZW50KHNyYykge1xyXG4gICAgcmV0dXJuIHNyYy5yZXBsYWNlKGNvbW1lbnRTdHJpcFJFLCAnJyk7XHJcbn1cblxuZnVuY3Rpb24gbG9vc2VDb21wYXJlQXJyYXlzKGEsIGIpIHtcclxuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgbGV0IGVxdWFsID0gdHJ1ZTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBlcXVhbCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGVxdWFsID0gbG9vc2VFcXVhbChhW2ldLCBiW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlcXVhbDtcclxufVxyXG5mdW5jdGlvbiBsb29zZUVxdWFsKGEsIGIpIHtcclxuICAgIGlmIChhID09PSBiKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgbGV0IGFWYWxpZFR5cGUgPSBpc0RhdGUoYSk7XHJcbiAgICBsZXQgYlZhbGlkVHlwZSA9IGlzRGF0ZShiKTtcclxuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcclxuICAgICAgICByZXR1cm4gYVZhbGlkVHlwZSAmJiBiVmFsaWRUeXBlID8gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpIDogZmFsc2U7XHJcbiAgICB9XHJcbiAgICBhVmFsaWRUeXBlID0gaXNBcnJheShhKTtcclxuICAgIGJWYWxpZFR5cGUgPSBpc0FycmF5KGIpO1xyXG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikgOiBmYWxzZTtcclxuICAgIH1cclxuICAgIGFWYWxpZFR5cGUgPSBpc09iamVjdChhKTtcclxuICAgIGJWYWxpZFR5cGUgPSBpc09iamVjdChiKTtcclxuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWY6IHRoaXMgaWYgd2lsbCBwcm9iYWJseSBuZXZlciBiZSBjYWxsZWQgKi9cclxuICAgICAgICBpZiAoIWFWYWxpZFR5cGUgfHwgIWJWYWxpZFR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYSkubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGJLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhiKS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGFLZXlzQ291bnQgIT09IGJLZXlzQ291bnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFIYXNLZXkgPSBhLmhhc093blByb3BlcnR5KGtleSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJIYXNLZXkgPSBiLmhhc093blByb3BlcnR5KGtleSk7XHJcbiAgICAgICAgICAgIGlmICgoYUhhc0tleSAmJiAhYkhhc0tleSkgfHxcclxuICAgICAgICAgICAgICAgICghYUhhc0tleSAmJiBiSGFzS2V5KSB8fFxyXG4gICAgICAgICAgICAgICAgIWxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XHJcbn1cclxuZnVuY3Rpb24gbG9vc2VJbmRleE9mKGFyciwgdmFsKSB7XHJcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChpdGVtID0+IGxvb3NlRXF1YWwoaXRlbSwgdmFsKSk7XHJcbn1cblxuLyoqXHJcbiAqIEZvciBjb252ZXJ0aW5nIHt7IGludGVycG9sYXRpb24gfX0gdmFsdWVzIHRvIGRpc3BsYXllZCBzdHJpbmdzLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgdG9EaXNwbGF5U3RyaW5nID0gKHZhbCkgPT4ge1xyXG4gICAgcmV0dXJuIHZhbCA9PSBudWxsXHJcbiAgICAgICAgPyAnJ1xyXG4gICAgICAgIDogaXNPYmplY3QodmFsKVxyXG4gICAgICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgcmVwbGFjZXIsIDIpXHJcbiAgICAgICAgICAgIDogU3RyaW5nKHZhbCk7XHJcbn07XHJcbmNvbnN0IHJlcGxhY2VyID0gKF9rZXksIHZhbCkgPT4ge1xyXG4gICAgaWYgKGlzTWFwKHZhbCkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBbYE1hcCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC5lbnRyaWVzKCldLnJlZHVjZSgoZW50cmllcywgW2tleSwgdmFsXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZW50cmllc1tgJHtrZXl9ID0+YF0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cmllcztcclxuICAgICAgICAgICAgfSwge30pXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbCkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBbYFNldCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC52YWx1ZXMoKV1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsKSAmJiAhaXNBcnJheSh2YWwpICYmICFpc1BsYWluT2JqZWN0KHZhbCkpIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsO1xyXG59O1xuXG4vKipcclxuICogTGlzdCBvZiBAYmFiZWwvcGFyc2VyIHBsdWdpbnMgdGhhdCBhcmUgdXNlZCBmb3IgdGVtcGxhdGUgZXhwcmVzc2lvblxyXG4gKiB0cmFuc2Zvcm1zIGFuZCBTRkMgc2NyaXB0IHRyYW5zZm9ybXMuIEJ5IGRlZmF1bHQgd2UgZW5hYmxlIHByb3Bvc2FscyBzbGF0ZWRcclxuICogZm9yIEVTMjAyMC4gVGhpcyB3aWxsIG5lZWQgdG8gYmUgdXBkYXRlZCBhcyB0aGUgc3BlYyBtb3ZlcyBmb3J3YXJkLlxyXG4gKiBGdWxsIGxpc3QgYXQgaHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vbmV4dC9iYWJlbC1wYXJzZXIjcGx1Z2luc1xyXG4gKi9cclxuY29uc3QgYmFiZWxQYXJzZXJEZWZhdWx0UGx1Z2lucyA9IFtcclxuICAgICdiaWdJbnQnLFxyXG4gICAgJ29wdGlvbmFsQ2hhaW5pbmcnLFxyXG4gICAgJ251bGxpc2hDb2FsZXNjaW5nT3BlcmF0b3InXHJcbl07XHJcbmNvbnN0IEVNUFRZX09CSiA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgPyBPYmplY3QuZnJlZXplKHt9KVxyXG4gICAgOiB7fTtcclxuY29uc3QgRU1QVFlfQVJSID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXTtcclxuY29uc3QgTk9PUCA9ICgpID0+IHsgfTtcclxuLyoqXHJcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXHJcbiAqL1xyXG5jb25zdCBOTyA9ICgpID0+IGZhbHNlO1xyXG5jb25zdCBvblJFID0gL15vblteYS16XS87XHJcbmNvbnN0IGlzT24gPSAoa2V5KSA9PiBvblJFLnRlc3Qoa2V5KTtcclxuY29uc3QgaXNNb2RlbExpc3RlbmVyID0gKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoJ29uVXBkYXRlOicpO1xyXG5jb25zdCBleHRlbmQgPSBPYmplY3QuYXNzaWduO1xyXG5jb25zdCByZW1vdmUgPSAoYXJyLCBlbCkgPT4ge1xyXG4gICAgY29uc3QgaSA9IGFyci5pbmRleE9mKGVsKTtcclxuICAgIGlmIChpID4gLTEpIHtcclxuICAgICAgICBhcnIuc3BsaWNlKGksIDEpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcbmNvbnN0IGhhc093biA9ICh2YWwsIGtleSkgPT4gaGFzT3duUHJvcGVydHkuY2FsbCh2YWwsIGtleSk7XHJcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xyXG5jb25zdCBpc01hcCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBNYXBdJztcclxuY29uc3QgaXNTZXQgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgU2V0XSc7XHJcbmNvbnN0IGlzRGF0ZSA9ICh2YWwpID0+IHZhbCBpbnN0YW5jZW9mIERhdGU7XHJcbmNvbnN0IGlzRnVuY3Rpb24gPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nO1xyXG5jb25zdCBpc1N0cmluZyA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xyXG5jb25zdCBpc1N5bWJvbCA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzeW1ib2wnO1xyXG5jb25zdCBpc09iamVjdCA9ICh2YWwpID0+IHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcclxuY29uc3QgaXNQcm9taXNlID0gKHZhbCkgPT4ge1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwudGhlbikgJiYgaXNGdW5jdGlvbih2YWwuY2F0Y2gpO1xyXG59O1xyXG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbmNvbnN0IHRvVHlwZVN0cmluZyA9ICh2YWx1ZSkgPT4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XHJcbmNvbnN0IHRvUmF3VHlwZSA9ICh2YWx1ZSkgPT4ge1xyXG4gICAgLy8gZXh0cmFjdCBcIlJhd1R5cGVcIiBmcm9tIHN0cmluZ3MgbGlrZSBcIltvYmplY3QgUmF3VHlwZV1cIlxyXG4gICAgcmV0dXJuIHRvVHlwZVN0cmluZyh2YWx1ZSkuc2xpY2UoOCwgLTEpO1xyXG59O1xyXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xyXG5jb25zdCBpc0ludGVnZXJLZXkgPSAoa2V5KSA9PiBpc1N0cmluZyhrZXkpICYmXHJcbiAgICBrZXkgIT09ICdOYU4nICYmXHJcbiAgICBrZXlbMF0gIT09ICctJyAmJlxyXG4gICAgJycgKyBwYXJzZUludChrZXksIDEwKSA9PT0ga2V5O1xyXG5jb25zdCBpc1Jlc2VydmVkUHJvcCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChcclxuLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxyXG4nLGtleSxyZWYsJyArXHJcbiAgICAnb25Wbm9kZUJlZm9yZU1vdW50LG9uVm5vZGVNb3VudGVkLCcgK1xyXG4gICAgJ29uVm5vZGVCZWZvcmVVcGRhdGUsb25Wbm9kZVVwZGF0ZWQsJyArXHJcbiAgICAnb25Wbm9kZUJlZm9yZVVubW91bnQsb25Wbm9kZVVubW91bnRlZCcpO1xyXG5jb25zdCBjYWNoZVN0cmluZ0Z1bmN0aW9uID0gKGZuKSA9PiB7XHJcbiAgICBjb25zdCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICByZXR1cm4gKChzdHIpID0+IHtcclxuICAgICAgICBjb25zdCBoaXQgPSBjYWNoZVtzdHJdO1xyXG4gICAgICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcclxuICAgIH0pO1xyXG59O1xyXG5jb25zdCBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IGNhbWVsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiB7XHJcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgKF8sIGMpID0+IChjID8gYy50b1VwcGVyQ2FzZSgpIDogJycpKTtcclxufSk7XHJcbmNvbnN0IGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBoeXBoZW5hdGUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKSk7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgY2FwaXRhbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpKTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB0b0hhbmRsZXJLZXkgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IChzdHIgPyBgb24ke2NhcGl0YWxpemUoc3RyKX1gIDogYGApKTtcclxuLy8gY29tcGFyZSB3aGV0aGVyIGEgdmFsdWUgaGFzIGNoYW5nZWQsIGFjY291bnRpbmcgZm9yIE5hTi5cclxuY29uc3QgaGFzQ2hhbmdlZCA9ICh2YWx1ZSwgb2xkVmFsdWUpID0+IHZhbHVlICE9PSBvbGRWYWx1ZSAmJiAodmFsdWUgPT09IHZhbHVlIHx8IG9sZFZhbHVlID09PSBvbGRWYWx1ZSk7XHJcbmNvbnN0IGludm9rZUFycmF5Rm5zID0gKGZucywgYXJnKSA9PiB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGZuc1tpXShhcmcpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBkZWYgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgdmFsdWVcclxuICAgIH0pO1xyXG59O1xyXG5jb25zdCB0b051bWJlciA9ICh2YWwpID0+IHtcclxuICAgIGNvbnN0IG4gPSBwYXJzZUZsb2F0KHZhbCk7XHJcbiAgICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuO1xyXG59O1xyXG5sZXQgX2dsb2JhbFRoaXM7XHJcbmNvbnN0IGdldEdsb2JhbFRoaXMgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKF9nbG9iYWxUaGlzIHx8XHJcbiAgICAgICAgKF9nbG9iYWxUaGlzID1cclxuICAgICAgICAgICAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICA/IGdsb2JhbFRoaXNcclxuICAgICAgICAgICAgICAgIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHdpbmRvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdsb2JhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7fSkpO1xyXG59O1xuXG5leHBvcnQgeyBFTVBUWV9BUlIsIEVNUFRZX09CSiwgTk8sIE5PT1AsIFBhdGNoRmxhZ05hbWVzLCBiYWJlbFBhcnNlckRlZmF1bHRQbHVnaW5zLCBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgZGVmLCBlc2NhcGVIdG1sLCBlc2NhcGVIdG1sQ29tbWVudCwgZXh0ZW5kLCBnZW5lcmF0ZUNvZGVGcmFtZSwgZ2V0R2xvYmFsVGhpcywgaGFzQ2hhbmdlZCwgaGFzT3duLCBoeXBoZW5hdGUsIGludm9rZUFycmF5Rm5zLCBpc0FycmF5LCBpc0Jvb2xlYW5BdHRyLCBpc0RhdGUsIGlzRnVuY3Rpb24sIGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCwgaXNIVE1MVGFnLCBpc0ludGVnZXJLZXksIGlzS25vd25BdHRyLCBpc01hcCwgaXNNb2RlbExpc3RlbmVyLCBpc05vVW5pdE51bWVyaWNTdHlsZVByb3AsIGlzT2JqZWN0LCBpc09uLCBpc1BsYWluT2JqZWN0LCBpc1Byb21pc2UsIGlzUmVzZXJ2ZWRQcm9wLCBpc1NTUlNhZmVBdHRyTmFtZSwgaXNTVkdUYWcsIGlzU2V0LCBpc1NwZWNpYWxCb29sZWFuQXR0ciwgaXNTdHJpbmcsIGlzU3ltYm9sLCBpc1ZvaWRUYWcsIGxvb3NlRXF1YWwsIGxvb3NlSW5kZXhPZiwgbWFrZU1hcCwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVN0eWxlLCBvYmplY3RUb1N0cmluZywgcGFyc2VTdHJpbmdTdHlsZSwgcHJvcHNUb0F0dHJNYXAsIHJlbW92ZSwgc3RyaW5naWZ5U3R5bGUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5LCB0b051bWJlciwgdG9SYXdUeXBlLCB0b1R5cGVTdHJpbmcgfTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1ByaW1pdGl2ZShWLCB0cnVlKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKGhpZGRlbktleXMsIGtleSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhcyhPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBzZXR0ZXIuY2FsbChPYmplY3RQcm90b3R5cGVTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBVU0VfU0VUVEVSKSBzZXRTeW1ib2xEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiBzZXR0ZXIgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7XG4gIH07XG5cbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIHJlZGVmaW5lKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhcyhTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG5pZiAoJHN0cmluZ2lmeSkge1xuICB2YXIgRk9SQ0VEX0pTT05fU1RSSU5HSUZZID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKCk7XG4gICAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JztcbiAgfSk7XG5cbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9KU09OX1NUUklOR0lGWSB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgICAgdmFyIGluZGV4ID0gMTtcbiAgICAgIHZhciAkcmVwbGFjZXI7XG4gICAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGluZGV4KSBhcmdzLnB1c2goYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICAgICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICAgIHJldHVybiAkc3RyaW5naWZ5LmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbi8vIFNhZmFyaSBidWcgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwMDgyOVxudmFyIE5PTl9HRU5FUklDID0gISFOYXRpdmVQcm9taXNlICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXS5jYWxsKHsgdGhlbjogZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9IH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmZpbmFsbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuZmluYWxseVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBOT05fR0VORVJJQyB9LCB7XG4gICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGdldEJ1aWx0SW4oJ1Byb21pc2UnKSk7XG4gICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gICAgcmV0dXJuIHRoaXMudGhlbihcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5LFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseVxuICAgICk7XG4gIH1cbn0pO1xuXG4vLyBwYXRjaCBuYXRpdmUgUHJvbWlzZS5wcm90b3R5cGUgZm9yIG5hdGl2ZSBhc3luYyBmdW5jdGlvbnNcbmlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nICYmICFOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddKSB7XG4gIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAnZmluYWxseScsIGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2ZpbmFsbHknXSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjYWNoZSA9IHt9O1xuXG52YXIgdGhyb3dlciA9IGZ1bmN0aW9uIChpdCkgeyB0aHJvdyBpdDsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIG9wdGlvbnMpIHtcbiAgaWYgKGhhcyhjYWNoZSwgTUVUSE9EX05BTUUpKSByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdO1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgdmFyIEFDQ0VTU09SUyA9IGhhcyhvcHRpb25zLCAnQUNDRVNTT1JTJykgPyBvcHRpb25zLkFDQ0VTU09SUyA6IGZhbHNlO1xuICB2YXIgYXJndW1lbnQwID0gaGFzKG9wdGlvbnMsIDApID8gb3B0aW9uc1swXSA6IHRocm93ZXI7XG4gIHZhciBhcmd1bWVudDEgPSBoYXMob3B0aW9ucywgMSkgPyBvcHRpb25zWzFdIDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV0gPSAhIW1ldGhvZCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIGlmIChBQ0NFU1NPUlMgJiYgIURFU0NSSVBUT1JTKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgTyA9IHsgbGVuZ3RoOiAtMSB9O1xuXG4gICAgaWYgKEFDQ0VTU09SUykgZGVmaW5lUHJvcGVydHkoTywgMSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IHRocm93ZXIgfSk7XG4gICAgZWxzZSBPWzFdID0gMTtcblxuICAgIG1ldGhvZC5jYWxsKE8sIGFyZ3VtZW50MCwgYXJndW1lbnQxKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxuaWYgKEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbmlmICghSVNfUFVSRSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcgPSBGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZztcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIShOQU1FIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nLmNhbGwodGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChNdXRhdGlvbk9ic2VydmVyICYmICFJU19JT1MpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIHRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgZWxzZSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNilcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHtcbiAgdmFyIGl0O1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHM6IEYsXG4gICAgICAgIG46IGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZTogZnVuY3Rpb24gZShfZSkge1xuICAgICAgICAgIHRocm93IF9lO1xuICAgICAgICB9LFxuICAgICAgICBmOiBGXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgfVxuXG4gIHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSxcbiAgICAgIGRpZEVyciA9IGZhbHNlLFxuICAgICAgZXJyO1xuICByZXR1cm4ge1xuICAgIHM6IGZ1bmN0aW9uIHMoKSB7XG4gICAgICBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIH0sXG4gICAgbjogZnVuY3Rpb24gbigpIHtcbiAgICAgIHZhciBzdGVwID0gaXQubmV4dCgpO1xuICAgICAgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTtcbiAgICAgIHJldHVybiBzdGVwO1xuICAgIH0sXG4gICAgZTogZnVuY3Rpb24gZShfZTIpIHtcbiAgICAgIGRpZEVyciA9IHRydWU7XG4gICAgICBlcnIgPSBfZTI7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbiBmKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0W1wicmV0dXJuXCJdICE9IG51bGwpIGl0W1wicmV0dXJuXCJdKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9O1xufSIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbicpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuYXNzaWduICE9PSBhc3NpZ24gfSwge1xuICBhc3NpZ246IGFzc2lnblxufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pXG4gICAgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLml0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHtcbiAgcmVkZWZpbmUoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG5cbnZhciBOYXRpdmVTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xuXG5pZiAoREVTQ1JJUFRPUlMgJiYgdHlwZW9mIE5hdGl2ZVN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICghKCdkZXNjcmlwdGlvbicgaW4gTmF0aXZlU3ltYm9sLnByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSB0aGlzIGluc3RhbmNlb2YgU3ltYm9sV3JhcHBlclxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIHZhciBzeW1ib2xQcm90b3R5cGUgPSBTeW1ib2xXcmFwcGVyLnByb3RvdHlwZSA9IE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG4gIHN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgbmF0aXZlID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIGRlZmluZVByb3BlcnR5KHN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IGlzT2JqZWN0KHRoaXMpID8gdGhpcy52YWx1ZU9mKCkgOiB0aGlzO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbFRvU3RyaW5nLmNhbGwoc3ltYm9sKTtcbiAgICAgIGlmIChoYXMoRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgZGVzYyA9IG5hdGl2ZSA/IHN0cmluZy5zbGljZSg3LCAtMSkgOiBzdHJpbmcucmVwbGFjZShyZWdleHAsICckMScpO1xuICAgICAgcmV0dXJuIGRlc2MgPT09ICcnID8gdW5kZWZpbmVkIDogZGVzYztcbiAgICB9XG4gIH0pO1xuXG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUnKTtcbnZhciBob3N0UmVwb3J0RXJyb3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycycpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2U7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgJGZldGNoID0gZ2V0QnVpbHRJbignZmV0Y2gnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG52YXIgSVNfTk9ERSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIERJU1BBVENIX0VWRU5UID0gISEoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgZ2xvYmFsLmRpc3BhdGNoRXZlbnQpO1xudmFyIFVOSEFORExFRF9SRUpFQ1RJT04gPSAndW5oYW5kbGVkcmVqZWN0aW9uJztcbnZhciBSRUpFQ1RJT05fSEFORExFRCA9ICdyZWplY3Rpb25oYW5kbGVkJztcbnZhciBQRU5ESU5HID0gMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcbnZhciBIQU5ETEVEID0gMTtcbnZhciBVTkhBTkRMRUQgPSAyO1xudmFyIEludGVybmFsLCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgUHJvbWlzZVdyYXBwZXIsIG5hdGl2ZVRoZW47XG5cbnZhciBGT1JDRUQgPSBpc0ZvcmNlZChQUk9NSVNFLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBHTE9CQUxfQ09SRV9KU19QUk9NSVNFID0gaW5zcGVjdFNvdXJjZShQcm9taXNlQ29uc3RydWN0b3IpICE9PSBTdHJpbmcoUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFKSB7XG4gICAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgIC8vIFdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgaWYgKFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgaWYgKCFJU19OT0RFICYmIHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgIT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gV2UgbmVlZCBQcm9taXNlI2ZpbmFsbHkgaW4gdGhlIHB1cmUgdmVyc2lvbiBmb3IgcHJldmVudGluZyBwcm90b3R5cGUgcG9sbHV0aW9uXG4gIGlmIChJU19QVVJFICYmICFQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlWydmaW5hbGx5J10pIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUHJvbWlzZUNvbnN0cnVjdG9yKSkgcmV0dXJuIGZhbHNlO1xuICAvLyBEZXRlY3QgY29ycmVjdG5lc3Mgb2Ygc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICB2YXIgcHJvbWlzZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5yZXNvbHZlKDEpO1xuICB2YXIgRmFrZVByb21pc2UgPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICB9O1xuICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yID0ge307XG4gIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gIHJldHVybiAhKHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2UpO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIGlzUmVqZWN0KSB7XG4gIGlmIChzdGF0ZS5ub3RpZmllZCkgcmV0dXJuO1xuICBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHN0YXRlLnJlYWN0aW9ucztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gY2hhaW5baW5kZXgrK107XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRCkgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSwgc3RhdGUpO1xuICAgICAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gY2FuIHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5yZWFjdGlvbnMgPSBbXTtcbiAgICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKSBvblVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gIH0pO1xufTtcblxudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gIHZhciBldmVudCwgaGFuZGxlcjtcbiAgaWYgKERJU1BBVENIX0VWRU5UKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBldmVudC5yZWFzb24gPSByZWFzb247XG4gICAgZXZlbnQuaW5pdEV2ZW50KG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0gZWxzZSBldmVudCA9IHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiByZWFzb24gfTtcbiAgaWYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSBoYW5kbGVyKGV2ZW50KTtcbiAgZWxzZSBpZiAobmFtZSA9PT0gVU5IQU5ETEVEX1JFSkVDVElPTikgaG9zdFJlcG9ydEVycm9ycygnVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgcmVhc29uKTtcbn07XG5cbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgdmFyIElTX1VOSEFORExFRCA9IGlzVW5oYW5kbGVkKHN0YXRlKTtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmIChJU19VTkhBTkRMRUQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChVTkhBTkRMRURfUkVKRUNUSU9OLCBwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBzdGF0ZS5yZWplY3Rpb24gPSBJU19OT0RFIHx8IGlzVW5oYW5kbGVkKHN0YXRlKSA/IFVOSEFORExFRCA6IEhBTkRMRUQ7XG4gICAgICBpZiAocmVzdWx0LmVycm9yKSB0aHJvdyByZXN1bHQudmFsdWU7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUucmVqZWN0aW9uICE9PSBIQU5ETEVEICYmICFzdGF0ZS5wYXJlbnQ7XG59O1xuXG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBwcm9taXNlLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICB2YXIgdGhlbiA9IGlzVGhlbmFibGUodmFsdWUpO1xuICAgIGlmICh0aGVuKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdChwcm9taXNlLCB3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHByb21pc2UsIHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoYmluZChpbnRlcm5hbFJlc29sdmUsIHRoaXMsIHN0YXRlKSwgYmluZChpbnRlcm5hbFJlamVjdCwgdGhpcywgc3RhdGUpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaW50ZXJuYWxSZWplY3QodGhpcywgc3RhdGUsIGVycm9yKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIHR5cGU6IFBST01JU0UsXG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIG5vdGlmaWVkOiBmYWxzZSxcbiAgICAgIHBhcmVudDogZmFsc2UsXG4gICAgICByZWFjdGlvbnM6IFtdLFxuICAgICAgcmVqZWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0YXRlOiBQRU5ESU5HLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZWRlZmluZUFsbChQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLnRoZW5gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnJlYWN0aW9ucy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmIChzdGF0ZS5zdGF0ZSAhPSBQRU5ESU5HKSBub3RpZnkodGhpcywgc3RhdGUsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHByb21pc2UpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gYmluZChpbnRlcm5hbFJlc29sdmUsIHByb21pc2UsIHN0YXRlKTtcbiAgICB0aGlzLnJlamVjdCA9IGJpbmQoaW50ZXJuYWxSZWplY3QsIHByb21pc2UsIHN0YXRlKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicpIHtcbiAgICBuYXRpdmVUaGVuID0gTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUudGhlbjtcblxuICAgIC8vIHdyYXAgbmF0aXZlIFByb21pc2UjdGhlbiBmb3IgbmF0aXZlIGFzeW5jIGZ1bmN0aW9uc1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbmF0aXZlVGhlbi5jYWxsKHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG5cbiAgICAvLyB3cmFwIGZldGNoIHJlc3VsdFxuICAgIGlmICh0eXBlb2YgJGZldGNoID09ICdmdW5jdGlvbicpICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGZldGNoOiBmdW5jdGlvbiBmZXRjaChpbnB1dCAvKiAsIGluaXQgKi8pIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKFByb21pc2VDb25zdHJ1Y3RvciwgJGZldGNoLmFwcGx5KGdsb2JhbCwgYXJndW1lbnRzKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG5cblByb21pc2VXcmFwcGVyID0gZ2V0QnVpbHRJbihQUk9NSVNFKTtcblxuLy8gc3RhdGljc1xuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICBjYXBhYmlsaXR5LnJlamVjdC5jYWxsKHVuZGVmaW5lZCwgcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB8fCBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZXNvbHZlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbFxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmFjZVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ3NsaWNlJywgeyBBQ0NFU1NPUlM6IHRydWUsIDA6IDAsIDE6IDIgfSk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgbmF0aXZlU2xpY2UgPSBbXS5zbGljZTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBDb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlLmNhbGwoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiAhU3ltYm9sLnNoYW1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Qcm9taXNlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==